var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.2.0","fields":["title","body"],"fieldVectors":[["title/classes/BaseContract.html",[0,0.602,1,1.732]],["body/classes/BaseContract.html",[0,1.068,1,2.296,2,0.238,3,0.238,4,0.203,5,2.608,6,1.663,7,4.295,8,3.14,9,3.14,10,3.14,11,3.14,12,3.14,13,0.93,14,4.295,15,2.525,16,3.38,17,2.585,18,0.104,19,0.329,20,2.721,21,1.778,22,2.405,23,2.89,24,1.398,25,1.522,26,2.21,27,2.382,28,4.295,29,1.289,30,0.031,31,1.778,32,0.32,33,0.437,34,3.112,35,0.321,36,3.112,37,3.112,38,3.112,39,2.101,40,0.901,41,2.036,42,1.93,43,2.524,44,1.371,45,2.797,46,0.871,47,2.275,48,3.596,49,3.112,50,1.1,51,1.829,52,0.329,53,3.112,54,2.608,55,3.112,56,2.196,57,0.379,58,4.919,59,1.522,60,2.027,61,2.275,62,2.101,63,3.112,64,3.112,65,2.027,66,2.608,67,3.112,68,4.295,69,3.112,70,3.112,71,3.112,72,2.036,73,3.112,74,2.027,75,3.112,76,1.663,77,3.112,78,3.112,79,2.027,80,3.112,81,3.112,82,3.112,83,3.112,84,2.608,85,3.599,86,1.829,87,3.112,88,1.398,89,3.112,90,0.02,91,0.02]],["title/interfaces/BaseContractType.html",[26,1.456,92,0.131]],["body/interfaces/BaseContractType.html",[2,0.318,3,0.318,4,0.271,15,2.46,18,0.139,19,0.398,20,2.991,26,2.336,30,0.031,32,0.332,33,0.897,35,0.339,52,0.398,57,0.54,59,2.991,60,3.869,62,2.991,65,4.062,90,0.024,91,0.024,92,0.229,93,3.485,94,4.356,95,4.356,96,4.356,97,3.041]],["title/interfaces/BondArgs.html",[92,0.131,98,1.732]],["body/interfaces/BondArgs.html",[2,0.284,3,0.284,4,0.242,13,0.967,18,0.124,19,0.37,30,0.031,32,0.335,33,0.678,35,0.424,40,1.103,52,0.479,57,0.552,90,0.022,91,0.022,92,0.249,98,2.582,99,1.982,100,1.145,101,1.299,102,2.72,103,0.885,104,1.982,105,2,106,1.982,107,0.959,108,1.982,109,1.39,110,0.959,111,1.122,112,1.982,113,1.535,114,1.122]],["title/interfaces/BondageArgs.html",[92,0.131,106,1.732]],["body/interfaces/BondageArgs.html",[2,0.28,3,0.28,4,0.238,13,0.964,18,0.122,19,0.366,30,0.031,32,0.333,33,0.846,35,0.423,40,1.101,52,0.477,57,0.55,90,0.022,91,0.022,92,0.248,98,1.953,99,1.953,100,1.141,101,1.053,102,2.709,103,0.872,104,1.953,105,2.433,106,2.557,107,1.464,108,1.953,109,1.38,110,0.945,111,1.105,112,1.953,113,1.513,114,1.105]],["title/interfaces/CalcBondRateType.html",[92,0.131,108,1.732]],["body/interfaces/CalcBondRateType.html",[2,0.292,3,0.292,4,0.249,13,0.973,18,0.128,19,0.377,30,0.031,32,0.323,35,0.421,40,1.095,52,0.481,57,0.555,90,0.022,91,0.022,92,0.251,98,2.038,99,2.038,100,1.152,101,1.083,102,2.74,103,0.911,104,2.038,105,2.037,106,2.038,107,0.986,108,2.63,109,1.408,110,0.986,111,1.153,112,2.038,113,1.579,114,1.153]],["title/interfaces/ContractType.html",[92,0.131,97,2.369]],["body/interfaces/ContractType.html",[2,0.33,3,0.33,4,0.281,15,1.782,18,0.144,19,0.407,20,3.02,26,1.934,30,0.03,32,0.313,33,0.882,35,0.346,52,0.407,57,0.509,59,3.02,60,2.803,62,3.02,65,4.096,90,0.024,91,0.024,92,0.233,93,3.606,94,4.449,95,4.449,96,4.449,97,3.881]],["title/classes/Curve.html",[0,0.602,115,1.904]],["body/classes/Curve.html",[0,0.622,2,0.169,3,0.169,4,0.144,6,1.79,18,0.074,19,0.256,21,1.387,24,1.505,27,2.435,29,1.87,30,0.031,31,1.87,32,0.304,33,0.634,35,0.426,41,2.464,44,0.866,46,1.264,50,0.781,52,0.169,56,2.01,72,1.87,79,1.438,86,2.852,90,0.015,91,0.015,105,1.387,114,1.224,115,3.119,116,1.851,117,4.067,118,3.783,119,2.91,120,3.181,121,3.181,122,5.11,123,3.35,124,3.35,125,4.517,126,4.517,127,3.35,128,4.517,129,3.35,130,3.35,131,2.209,132,2.209,133,2.209,134,3.35,135,5.11,136,2.209,137,4.047,138,5.309,139,2.209,140,2.635,141,2.209,142,4.047,143,2.209,144,3.784,145,2.209,146,3.35,147,1.606,148,2.414,149,2.209,150,2.209,151,2.209,152,2.209,153,2.209,154,1.851,155,2.209,156,3.35,157,2.449,158,2.449,159,2.449,160,0.992,161,1.851,162,1.298,163,1.438,164,2.209,165,2.209,166,2.209,167,2.209,168,2.209,169,2.209,170,2.209,171,2.209,172,3.35,173,3.35,174,2.209,175,1.851,176,3.35,177,2.807,178,3.647,179,2.209,180,2.209,181,2.209,182,2.209,183,1.851,184,2.209,185,2.209,186,2.209,187,1.851,188,2.209,189,2.209,190,2.209,191,2.209,192,2.209,193,2.209,194,2.209,195,3.35,196,2.209,197,2.209,198,2.209,199,2.449,200,2.209,201,3.391,202,2.807,203,2.209,204,2.807,205,2.209,206,2.209,207,2.209]],["title/interfaces/CurveTerm.html",[92,0.131,140,2.11]],["body/interfaces/CurveTerm.html",[2,0.347,3,0.347,4,0.295,18,0.151,19,0.419,30,0.03,32,0.32,35,0.433,52,0.419,90,0.025,91,0.025,92,0.238,119,2.214,120,2.42,121,2.42,140,3.567,157,4.472,158,4.472,159,4.472,160,2.034,208,3.793]],["title/interfaces/CurveType.html",[92,0.131,160,1.456]],["body/interfaces/CurveType.html",[2,0.347,3,0.347,4,0.295,18,0.151,19,0.419,30,0.03,32,0.32,35,0.433,52,0.419,90,0.025,91,0.025,92,0.238,119,2.992,120,3.27,121,3.27,140,2.948,157,3.31,158,3.31,159,3.31,160,2.461,208,3.793]],["title/interfaces/Filter.html",[92,0.131,109,0.838]],["body/interfaces/Filter.html",[2,0.289,3,0.289,4,0.247,13,0.887,18,0.126,19,0.375,30,0.031,32,0.336,33,0.897,35,0.409,40,1.111,46,1.058,52,0.466,57,0.507,90,0.022,91,0.022,92,0.24,100,0.909,101,0.832,103,0.903,107,1.536,109,1.265,110,1.483,111,1.735,147,1.143,209,2.021,210,3.066,211,2.221,212,2.221,213,1.699,214,2.021,215,2.615,216,1.336,217,2.221,218,2.221,219,2.021,220,2.462,221,2.462,222,2.021,223,2.221,224,1.849]],["title/interfaces/InitProvider.html",[92,0.131,225,1.732]],["body/interfaces/InitProvider.html",[2,0.285,3,0.285,4,0.242,13,0.575,18,0.124,19,0.37,30,0.031,32,0.349,33,0.799,35,0.316,40,1.047,44,1.251,52,0.472,57,0.574,90,0.022,91,0.022,92,0.217,100,1.097,101,1.333,103,0.887,109,0.961,110,0.961,111,1.124,147,1.627,148,3.237,160,1.67,163,2.42,215,1.986,216,2.088,224,2.366,225,2.586,226,3.114,227,3.711,228,3.045,229,2.183,230,2.183,231,3.716,232,2.717,233,3.716,234,1.67]],["title/interfaces/ProviderHandler.html",[92,0.131,235,2.11]],["body/interfaces/ProviderHandler.html",[2,0.272,3,0.272,4,0.232,18,0.119,19,0.36,30,0.031,32,0.346,35,0.398,40,0.894,44,1.506,52,0.48,57,0.529,90,0.021,91,0.021,92,0.19,100,0.661,101,1.034,103,0.849,107,0.92,110,1.216,114,1.896,119,1.74,120,1.901,121,1.901,147,1.076,160,1.598,210,1.901,216,1.257,223,2.09,224,1.74,225,1.901,227,2.316,228,1.901,229,2.09,230,2.09,235,3.429,236,2.98,237,5.602,238,4.693,239,4.095,240,1.901,241,2.316,242,2.814,243,2.316,244,3.429,245,2.316,246,2.814,247,2.316,248,3.557,249,2.6,250,2.6,251,2.316,252,2.316,253,3.557,254,2.316,255,3.557,256,2.6,257,3.557,258,2.98,259,2.316]],["title/interfaces/ResponseArgs.html",[92,0.131,260,2.369]],["body/interfaces/ResponseArgs.html",[2,0.303,3,0.303,4,0.258,13,0.613,18,0.133,19,0.386,30,0.031,32,0.344,33,0.707,35,0.329,40,1.023,44,1.024,52,0.461,57,0.553,90,0.023,91,0.023,92,0.224,100,0.736,101,1.284,103,0.946,109,1.024,110,1.024,111,1.198,147,1.765,148,3.119,163,2.58,215,2.117,234,1.78,251,3.801,254,3.801,260,3.685,261,3.319,262,4.266,263,4.405,264,2.896,265,2.896,266,3.319,267,3.319,268,3.961,269,3.961]],["title/classes/Subscriber.html",[0,0.602,107,0.838]],["body/classes/Subscriber.html",[0,0.666,2,0.185,3,0.185,4,0.158,9,1.767,13,0.818,18,0.081,19,0.274,21,1.484,22,2.933,24,1.086,25,1.182,27,2.483,29,2.089,30,0.031,31,2.089,32,0.329,33,0.708,35,0.329,39,1.753,40,0.411,41,2.453,42,2.458,44,1.367,45,1.574,46,1.003,52,0.185,56,2.418,57,0.507,88,2.525,90,0.016,91,0.016,100,1.1,102,2.123,105,2.188,107,1.222,234,1.61,240,3.068,241,1.574,242,3.068,243,1.574,244,3.738,245,1.574,246,3.068,247,1.574,259,3.286,270,2.025,271,4.272,272,4.195,273,5.046,274,3.584,275,4.272,276,2.62,277,3.584,278,3.123,279,2.417,280,2.417,281,2.417,282,2.417,283,2.417,284,2.417,285,2.417,286,2.62,287,2.417,288,2.417,289,2.417,290,4.272,291,2.417,292,2.62,293,2.417,294,2.417,295,2.62,296,2.417,297,2.025,298,2.417,299,2.025,300,2.417,301,2.417,302,2.025,303,1.292,304,5.046,305,2.025,306,2.417,307,2.025,308,2.025,309,2.025,310,2.025,311,2.417,312,2.417,313,2.417,314,2.417,315,3.579,316,3.003,317,2.417,318,2.417,319,1.767,320,2.417,321,2.025,322,2.417,323,2.417,324,2.417,325,2.417,326,2.417,327,2.417,328,2.417,329,2.025,330,3.584,331,2.417,332,2.417,333,2.417,334,2.417,335,2.417,336,2.025,337,3.584,338,3.584,339,2.417]],["title/interfaces/SubscriberHandler.html",[92,0.131,278,2.369]],["body/interfaces/SubscriberHandler.html",[2,0.302,3,0.302,4,0.257,18,0.132,19,0.385,30,0.031,32,0.339,33,0.817,35,0.361,44,1.431,52,0.461,57,0.348,90,0.023,91,0.023,92,0.203,102,1.772,105,2.081,114,1.933,224,2.706,234,1.772,238,4.882,239,4.259,240,2.108,241,2.568,242,2.957,243,2.568,244,3.603,245,2.568,246,2.687,247,2.568,258,3.304,259,2.568,276,2.883,278,3.674,286,2.883,292,2.883,295,2.883,299,3.304,340,3.304,341,5.827,342,3.943,343,3.943,344,5.533,345,3.943,346,3.943]],["title/interfaces/SubscriptionEnd.html",[92,0.131,219,1.732]],["body/interfaces/SubscriptionEnd.html",[2,0.294,3,0.294,4,0.25,13,0.892,18,0.128,19,0.378,30,0.031,32,0.337,33,0.857,35,0.399,40,1.113,46,1.074,52,0.468,57,0.54,90,0.023,91,0.023,92,0.241,100,1.108,101,1.269,103,0.917,107,1.543,109,0.993,110,0.993,111,1.161,147,1.161,209,2.052,210,2.052,211,2.256,212,2.256,213,1.725,214,2.052,215,2.641,216,1.357,217,2.256,218,2.256,219,2.641,220,2.5,221,2.5,222,2.052,223,2.256,224,1.878]],["title/interfaces/SubscriptionInit.html",[92,0.131,214,1.732]],["body/interfaces/SubscriptionInit.html",[2,0.288,3,0.288,4,0.245,13,0.885,18,0.126,19,0.373,30,0.031,32,0.344,33,0.683,35,0.417,40,1.099,46,1.051,52,0.465,57,0.537,90,0.022,91,0.022,92,0.24,100,1.101,101,1.259,103,0.897,107,1.26,109,0.971,110,0.971,111,1.136,147,1.635,209,2.008,210,2.008,211,2.207,212,2.207,213,1.688,214,2.604,215,2.604,216,2.022,217,3.361,218,2.207,219,2.008,220,2.446,221,2.446,222,2.008,223,2.207,224,1.837,347,3.521]],["title/interfaces/SubscriptionType.html",[92,0.131,222,1.732]],["body/interfaces/SubscriptionType.html",[2,0.305,3,0.305,4,0.26,13,0.905,18,0.133,19,0.388,30,0.031,32,0.328,35,0.382,40,1.109,46,1.116,52,0.472,57,0.545,90,0.023,91,0.023,92,0.244,100,1.121,101,0.878,103,0.952,107,1.562,109,1.031,110,1.031,111,1.206,147,1.206,209,2.132,210,2.132,211,2.343,212,2.343,213,1.792,214,2.132,215,2.706,216,1.409,217,2.343,218,2.343,219,2.132,220,2.597,221,2.597,222,2.706,223,2.343,224,1.951]],["title/interfaces/UnbondArgs.html",[92,0.131,104,1.732]],["body/interfaces/UnbondArgs.html",[2,0.284,3,0.284,4,0.242,13,0.967,18,0.124,19,0.37,30,0.031,32,0.335,33,0.678,35,0.424,40,1.103,52,0.479,57,0.552,90,0.022,91,0.022,92,0.249,98,1.982,99,1.982,100,1.145,101,1.299,102,2.414,103,0.885,104,2.582,105,2.444,106,1.982,107,0.959,108,1.982,109,1.39,110,0.959,111,1.122,112,1.982,113,1.535,114,1.122]],["title/classes/Utils.html",[0,0.602,50,1.145]],["body/classes/Utils.html",[0,0.909,2,0.236,3,0.236,4,0.201,13,0.477,17,2.2,18,0.103,19,0.327,21,1.767,27,2.577,29,2.375,30,0.031,31,2.375,32,0.319,33,0.805,35,0.362,41,2.435,44,1.266,46,1.37,47,2.255,50,1.867,52,0.236,56,1.277,57,0.558,72,1.277,76,2.965,90,0.02,91,0.02,119,2.394,161,3.577,162,1.812,178,2.009,348,2.585,349,1.812,350,6.574,351,5.547,352,4.055,353,5.547,354,5.547,355,4.269,356,4.269,357,4.269,358,4.269,359,4.269,360,3.259,361,3.085,362,3.085,363,3.085,364,3.085,365,3.085,366,3.085,367,3.085,368,3.085,369,4.269,370,3.085,371,3.085,372,2.585,373,3.085,374,3.085,375,4.896,376,3.085,377,3.862,378,3.085,379,4.269,380,3.085,381,3.085,382,3.085,383,3.085,384,3.085,385,2.255,386,3.085,387,3.085]],["title/classes/ZapArbiter.html",[0,0.602,246,1.732]],["body/classes/ZapArbiter.html",[0,0.665,1,2.741,2,0.139,3,0.139,4,0.119,6,0.972,10,2.107,13,0.882,15,1.954,16,1.069,17,1.829,18,0.061,19,0.221,20,1.991,21,1.193,22,2.823,23,2.103,24,1.295,25,0.89,26,1.295,27,2.359,29,2.123,30,0.031,31,2.123,32,0.309,33,0.741,35,0.323,39,0.89,40,0.919,41,2.499,42,2.431,43,1.069,44,0.925,46,0.509,50,1.018,51,1.069,52,0.139,56,2.599,57,0.417,59,0.89,61,1.33,62,0.89,66,2.998,74,1.185,76,1.54,84,2.998,85,3.954,86,2.103,88,1.829,90,0.016,91,0.013,92,0.074,100,1.025,101,1.039,103,0.972,107,1.366,109,1.597,110,0.745,111,1.082,113,2.285,114,1.597,118,1.069,147,0.55,178,2.33,213,0.817,214,1.54,216,1.438,217,1.693,219,2.176,222,1.54,246,1.54,303,0.972,347,1.185,349,1.069,360,1.693,372,2.414,388,1.524,389,1.877,390,2.882,391,2.882,392,2.882,393,3.579,394,2.889,395,2.882,396,2.882,397,1.819,398,2.889,399,1.185,400,1.185,401,1.185,402,1.185,403,1.819,404,1.819,405,1.819,406,1.819,407,2.998,408,1.819,409,1.819,410,4.705,411,2.882,412,1.819,413,1.819,414,2.107,415,3.243,416,2.414,417,2.414,418,1.819,419,1.819,420,1.819,421,1.819,422,2.107,423,1.819,424,1.819,425,1.185,426,1.185,427,1.185,428,1.819,429,1.524,430,1.185,431,1.819,432,1.819,433,1.819,434,1.819,435,1.819,436,1.819,437,1.33,438,1.819,439,1.819,440,1.819,441,1.819,442,1.819,443,2.616,444,1.819,445,1.819,446,4.72,447,1.819,448,1.819,449,1.819,450,2.882,451,1.819,452,2.882,453,2.882,454,3.411,455,1.819,456,2.414,457,1.819,458,1.819,459,2.889,460,2.882,461,1.819,462,2.882,463,2.882,464,2.414,465,1.819,466,1.819,467,3.411,468,2.998,469,1.819,470,1.819,471,1.819,472,1.819,473,1.819]],["title/classes/ZapDispatch.html",[0,0.602,240,1.732]],["body/classes/ZapDispatch.html",[0,0.554,1,2.784,2,0.146,3,0.146,4,0.124,6,1.017,8,2.182,13,0.911,15,2.083,16,1.754,17,1.875,18,0.064,19,0.229,20,2.041,21,1.728,22,2.548,23,2.165,24,0.855,25,0.93,26,1.341,27,2.351,29,2.157,30,0.031,31,2.083,32,0.313,33,0.706,35,0.296,39,0.93,40,0.77,41,2.439,42,2.162,43,1.118,44,0.953,46,0.532,50,1.055,51,1.118,52,0.229,56,2.584,57,0.4,59,0.93,62,0.93,72,0.788,76,2.23,79,1.239,86,1.118,88,0.855,90,0.014,91,0.014,92,0.121,100,0.842,101,0.811,103,0.996,107,0.772,109,1.551,110,0.492,111,0.575,113,2.462,114,1.718,144,3.496,147,0.903,148,1.596,177,1.594,178,1.944,183,1.594,213,0.855,234,2.037,240,1.596,251,3.133,252,3.392,254,1.944,260,2.182,262,2.693,263,2.693,264,2.182,265,4.21,266,3.087,267,1.594,303,1.017,349,1.118,360,2.165,389,2.399,394,3.57,398,2.953,399,1.239,400,1.239,401,1.239,402,1.239,415,2.182,417,2.501,422,3.916,425,1.239,426,1.239,427,1.239,429,1.594,443,1.391,459,2.953,464,2.501,467,2.501,468,1.594,474,1.594,475,2.986,476,2.986,477,2.986,478,2.986,479,1.903,480,2.501,481,1.903,482,1.903,483,1.903,484,2.986,485,1.903,486,1.903,487,1.903,488,1.903,489,2.986,490,3.496,491,1.903,492,1.903,493,2.986,494,1.594,495,1.903,496,2.986,497,1.903,498,1.594,499,1.903,500,1.903,501,1.903,502,1.903,503,1.903,504,1.903,505,1.903,506,1.903,507,1.903,508,1.903,509,1.594,510,1.903,511,1.903,512,1.903,513,1.903,514,1.903,515,4.173,516,1.903,517,1.903,518,4.173,519,1.903,520,3.685,521,1.903,522,1.903,523,2.986,524,1.903,525,1.903,526,1.903,527,1.903,528,1.903,529,1.903,530,4.173,531,1.903,532,1.903,533,1.903,534,1.903,535,1.903,536,1.903,537,1.903]],["title/classes/ZapProvider.html",[0,0.602,538,2.369]],["body/classes/ZapProvider.html",[0,0.419,2,0.103,3,0.103,4,0.088,8,1.651,10,2.49,11,2.49,12,2.998,13,0.862,15,2.133,18,0.045,19,0.173,21,0.935,22,3.04,24,0.606,25,0.66,27,2.415,29,2.085,30,0.031,31,2.085,32,0.326,33,0.706,35,0.368,39,1.104,40,0.495,41,2.612,42,2.713,44,1.126,45,0.878,46,0.815,50,0.477,52,0.103,56,2.462,57,0.519,65,2.218,72,1.698,88,2.133,90,0.01,91,0.01,100,1.066,102,1.015,103,0.539,105,1.698,107,1.267,110,1.061,113,1.698,115,3.143,117,1.892,118,1.327,119,1.104,120,1.821,121,1.821,147,0.683,154,2.854,160,1.309,162,0.792,175,2.44,199,0.986,210,1.557,216,0.798,225,1.557,227,1.471,228,2.691,229,0.792,230,2.001,234,0.606,235,1.897,240,2.537,241,0.878,242,2.691,243,0.878,244,3.092,245,0.878,246,2.537,247,0.878,249,2.129,250,2.772,251,1.471,252,2.836,254,1.897,256,1.651,259,2.469,262,1.651,263,0.986,265,2.49,302,1.13,303,1.207,305,1.13,307,1.13,308,1.13,309,1.13,310,1.13,319,1.651,321,1.13,336,1.13,347,2.671,394,2.671,407,1.13,410,1.892,416,1.892,430,2.671,437,1.651,454,1.892,459,2.671,490,1.13,494,1.13,509,1.13,538,1.651,539,1.13,540,2.913,541,2.258,542,2.258,543,2.913,544,2.913,545,2.258,546,2.258,547,1.892,548,1.892,549,2.258,550,2.258,551,2.258,552,1.349,553,1.349,554,1.349,555,1.349,556,1.349,557,1.349,558,1.349,559,1.349,560,1.349,561,3.436,562,1.349,563,1.892,564,2.258,565,2.998,566,1.349,567,1.349,568,2.854,569,1.349,570,1.349,571,1.349,572,1.349,573,1.349,574,1.349,575,1.13,576,1.349,577,2.44,578,1.892,579,1.13,580,1.349,581,1.349,582,1.349,583,1.349,584,1.349,585,1.349,586,1.349,587,1.349,588,1.349,589,1.13,590,1.13,591,1.349,592,1.13,593,1.13,594,1.13,595,1.349,596,1.892,597,1.349,598,1.349,599,4.747,600,3.792,601,3.406,602,3.406,603,1.13,604,1.349,605,1.349,606,1.13,607,1.349,608,1.349,609,1.13,610,2.258,611,1.349,612,1.349,613,1.349,614,1.349,615,1.349,616,1.349,617,1.349,618,1.349,619,1.349,620,1.349,621,1.349,622,1.349,623,1.349,624,1.349,625,1.349,626,1.349,627,1.349,628,1.349,629,1.349,630,2.258,631,1.349,632,1.349,633,1.349,634,1.349,635,2.258,636,2.913,637,2.258,638,1.349,639,1.349,640,1.349,641,1.349,642,1.349,643,1.349,644,1.349,645,1.349,646,1.349,647,1.349,648,1.349,649,1.349,650,1.349]],["title/interfaces/ZapProviderType.html",[92,0.131,377,2.369]],["body/interfaces/ZapProviderType.html",[2,0.307,3,0.307,4,0.262,13,0.907,18,0.134,19,0.389,30,0.03,32,0.345,35,0.403,44,1.038,52,0.427,57,0.58,74,2.615,90,0.023,91,0.023,92,0.206,100,1.089,101,0.884,115,3.733,147,1.538,216,1.972,218,2.36,228,2.983,229,2.36,347,3.634,377,3.717,596,3.365,651,3.365,652,3.365,653,4.016,654,4.016,655,4.016,656,4.016,657,3.365,658,4.016,659,4.016,660,4.016,661,4.016,662,4.016,663,4.016]],["title/classes/ZapRegistry.html",[0,0.602,242,1.732]],["body/classes/ZapRegistry.html",[0,0.452,1,2.533,2,0.113,3,0.113,4,0.096,6,1.3,12,4.114,13,0.954,15,2.456,16,0.866,17,1.394,18,0.169,19,0.186,20,1.761,21,1.007,22,3.065,23,1.823,24,0.662,25,0.721,26,1.092,27,2.38,29,2.193,30,0.031,31,2.193,32,0.315,33,0.743,35,0.26,39,0.721,40,0.976,41,2.587,42,2.712,43,0.866,44,0.931,46,0.412,50,0.859,51,0.866,52,0.186,54,1.235,56,2.637,57,0.476,59,0.721,61,1.777,62,0.721,72,1.877,76,1.3,79,1.583,88,2.129,90,0.011,91,0.011,100,1.094,101,0.876,109,1.37,113,2.193,114,1.371,115,3.169,118,1.429,147,0.446,148,1.658,160,0.662,162,0.866,199,1.777,201,2.6,202,2.037,204,2.037,216,1.407,225,1.658,227,0.96,228,2.129,229,0.866,230,1.823,232,2.268,234,1.394,242,1.3,349,0.866,360,1.429,389,2.021,394,3.086,398,2.594,399,0.96,400,0.96,401,0.96,402,0.96,415,4.063,425,0.96,426,0.96,427,0.96,430,1.583,437,1.777,443,2.911,456,1.235,459,2.952,480,1.235,498,1.235,547,2.037,548,2.037,568,2.037,575,1.235,577,2.037,579,1.235,590,1.235,592,1.235,603,1.235,609,1.235,664,1.235,665,2.431,666,2.431,667,2.431,668,2.431,669,2.431,670,2.431,671,2.431,672,2.431,673,2.431,674,2.431,675,1.474,676,1.474,677,3.6,678,1.474,679,1.474,680,2.431,681,1.474,682,1.474,683,1.474,684,1.474,685,1.474,686,1.474,687,1.474,688,2.431,689,2.431,690,2.431,691,1.474,692,4.286,693,2.431,694,2.431,695,1.474,696,1.474,697,1.474,698,1.474,699,1.474,700,1.474,701,1.474,702,1.474,703,1.474,704,1.474,705,1.474,706,1.474,707,1.474,708,1.474,709,1.474,710,1.474,711,1.474,712,1.474,713,1.474,714,1.474,715,1.474,716,1.474,717,1.474,718,1.474,719,1.474,720,1.474,721,1.474,722,1.474,723,1.474,724,1.474,725,1.474,726,1.474,727,1.474,728,1.474,729,1.474,730,1.474,731,1.474,732,1.474,733,1.474,734,1.474,735,1.474,736,1.474,737,1.474,738,1.474,739,1.474,740,1.474,741,1.474,742,1.474,743,1.474,744,1.474,745,3.103,746,1.474,747,1.474,748,1.474,749,1.474,750,1.474]],["title/classes/ZapToken.html",[0,0.602,272,2.369]],["body/classes/ZapToken.html",[0,0.677,1,3.023,2,0.189,3,0.189,4,0.161,6,1.321,9,1.807,11,4.404,13,0.67,15,2.281,16,1.452,17,1.945,18,0.083,19,0.279,20,2.336,21,1.977,22,3.002,23,2.543,24,1.111,25,1.209,26,1.637,27,2.431,29,2.109,30,0.031,31,2.109,32,0.319,33,0.714,35,0.369,39,2.117,40,1.075,41,2.519,42,2.675,43,1.452,44,1.119,46,0.692,50,0.874,51,1.452,52,0.189,56,2.594,57,0.422,59,1.209,60,1.61,62,1.209,72,1.023,86,1.452,88,2.146,90,0.017,91,0.017,101,0.952,272,2.664,315,4.267,316,4.267,319,3.895,349,1.452,389,2.819,398,3.317,399,1.61,400,1.61,401,1.61,402,1.61,425,1.61,426,1.61,427,1.61,565,4.488,751,2.472,752,3.644,753,4.777,754,3.644,755,3.644,756,2.472,757,2.472,758,4.464,759,2.472,760,2.472,761,2.472,762,2.472,763,2.472,764,2.472,765,2.472,766,4.328,767,2.472,768,2.472,769,2.472,770,2.472,771,2.472,772,2.472,773,2.472,774,2.472,775,3.644,776,3.644,777,2.472,778,3.644,779,2.472,780,2.472,781,2.472,782,2.472,783,2.472,784,4.328,785,2.472,786,2.472,787,2.472]],["title/dependencies.html",[788,1.981,789,3.264]],["body/dependencies.html",[17,2.278,30,0.031,42,1.796,50,1.413,90,0.023,91,0.023,148,2.137,163,2.603,213,1.796,303,2.137,385,2.922,789,3.349,790,3.998,791,3.998,792,3.998,793,3.998,794,3.998,795,3.998,796,3.998,797,5.568,798,3.998,799,3.998,800,3.998,801,3.998,802,3.998,803,2.922,804,3.349,805,3.998,806,3.349,807,3.998,808,3.349,809,3.349,810,3.998,811,3.998,812,3.998,813,3.998,814,3.998,815,3.998,816,4.665,817,3.998,818,3.998,819,3.998,820,3.998,821,3.998,822,3.998,823,3.998,824,3.998,825,3.998,826,3.998,827,3.998,828,3.998,829,5.568,830,3.998,831,3.998,832,5.07,833,3.998,834,3.998,835,3.998,836,4.248,837,3.998,838,3.998,839,3.998,840,5.07,841,5.07,842,3.998,843,3.998,844,3.998]],["title/miscellaneous/functions.html",[114,1.178,845,1.448]],["body/miscellaneous/functions.html",[18,0.17,30,0.027,48,3.715,90,0.027,91,0.027,114,1.537,352,4.518,788,3.715,845,2.716,846,4.258,847,4.258]],["title/index.html",[18,0.091,414,1.981,848,2.27]],["body/index.html",[4,0.214,13,0.688,15,1.356,30,0.03,33,0.46,44,0.847,46,1.413,72,1.356,88,1.999,90,0.02,91,0.02,92,0.132,100,0.826,118,1.925,119,1.602,120,1.751,121,1.751,187,2.745,216,1.158,228,1.751,235,2.134,239,2.395,329,2.745,414,2.395,430,2.134,538,2.395,563,2.745,565,4.37,578,2.745,606,3.727,788,4.142,803,2.395,806,3.727,808,5.008,809,5.166,816,2.745,836,3.727,848,2.745,849,3.276,850,3.276,851,3.276,852,4.449,853,3.276,854,4.449,855,4.449,856,3.276,857,5.419,858,2.395,859,3.276,860,3.276,861,3.276,862,3.276,863,3.276,864,3.276,865,3.276,866,3.276,867,4.449,868,5.844,869,3.276,870,3.276,871,3.276,872,5.419,873,3.276,874,3.276,875,3.276,876,5.977,877,3.276,878,3.276,879,4.449,880,3.276,881,3.276,882,5.844,883,3.276,884,3.276,885,3.276,886,3.276,887,3.276,888,3.276,889,3.276,890,3.276,891,4.449,892,3.276,893,3.276,894,3.276,895,3.276,896,3.276,897,3.276,898,3.276,899,3.276,900,3.276,901,3.276,902,3.276,903,4.449,904,3.276,905,4.449,906,4.449,907,4.449,908,3.276,909,3.276,910,3.276,911,3.276,912,3.276,913,3.276,914,3.276,915,4.449,916,3.276,917,3.276,918,3.276,919,3.276,920,3.276,921,4.449,922,3.276,923,3.276,924,5.052,925,3.276,926,3.276,927,3.276]],["title/interfaces/listenEvent.html",[92,0.131,112,1.732]],["body/interfaces/listenEvent.html",[2,0.295,3,0.295,4,0.252,13,0.925,18,0.129,19,0.379,30,0.031,32,0.314,33,0.695,35,0.415,40,1.081,52,0.482,57,0.54,90,0.023,91,0.023,92,0.252,98,2.061,99,2.061,100,1.073,101,1.09,102,2.46,103,0.921,104,2.061,105,2.051,106,2.061,107,0.997,108,2.061,109,1.63,110,0.997,111,1.166,112,2.648,113,2.392,114,1.656]],["title/modules.html",[858,3.228]],["body/modules.html",[30,0.027,90,0.027,91,0.027,858,3.815]],["title/overview.html",[928,3.7]],["body/overview.html",[0,0.958,30,0.027,90,0.027,91,0.027,92,0.208,928,4.321,929,5.157,930,5.157]],["title/miscellaneous/typealiases.html",[845,1.448,931,3.896]],["body/miscellaneous/typealiases.html",[18,0.114,30,0.025,32,0.356,40,1.116,57,0.563,90,0.021,91,0.021,99,1.816,103,1.564,209,1.816,213,1.527,225,2.751,226,2.847,230,3.47,232,3.762,234,2.312,236,2.847,249,3.762,250,3.762,252,3.351,256,3.762,261,2.847,264,3.762,276,3.762,286,3.762,292,3.762,295,3.762,340,2.847,422,3.333,561,5.471,651,2.847,652,4.312,657,4.312,758,4.312,845,1.816,932,3.398,933,5.605,934,3.398]],["title/miscellaneous/variables.html",[845,1.448,935,3.264]],["body/miscellaneous/variables.html",[5,2.363,17,2.838,18,0.094,30,0.031,32,0.291,35,0.364,45,3.884,47,3.41,48,3.41,50,2.027,57,0.354,72,1.66,74,3.037,76,3.542,90,0.018,91,0.018,116,2.363,162,3.153,209,1.507,211,3.276,212,1.657,270,2.363,297,2.363,303,2.143,348,2.363,352,2.062,360,3.894,385,3.41,388,2.363,474,2.363,539,2.363,589,3.359,593,3.908,594,2.363,664,2.363,803,2.062,804,3.359,845,1.507,846,5.392,847,2.363,933,2.363,935,2.363,936,4.664,937,4.664,938,6.179,939,4.664,940,4.664,941,4.664,942,4.664,943,4.664,944,5.079,945,2.82,946,2.82,947,2.82,948,4.009,949,2.82,950,2.82,951,2.82,952,2.82,953,2.82,954,2.82,955,2.82,956,2.82,957,2.82,958,2.82,959,2.82,960,2.82,961,2.82,962,2.82,963,2.82]]],"invertedIndex":[["",{"_index":30,"title":{},"body":{"classes/BaseContract.html":{},"interfaces/BaseContractType.html":{},"interfaces/BondArgs.html":{},"interfaces/BondageArgs.html":{},"interfaces/CalcBondRateType.html":{},"interfaces/ContractType.html":{},"classes/Curve.html":{},"interfaces/CurveTerm.html":{},"interfaces/CurveType.html":{},"interfaces/Filter.html":{},"interfaces/InitProvider.html":{},"interfaces/ProviderHandler.html":{},"interfaces/ResponseArgs.html":{},"classes/Subscriber.html":{},"interfaces/SubscriberHandler.html":{},"interfaces/SubscriptionEnd.html":{},"interfaces/SubscriptionInit.html":{},"interfaces/SubscriptionType.html":{},"interfaces/UnbondArgs.html":{},"classes/Utils.html":{},"classes/ZapArbiter.html":{},"classes/ZapDispatch.html":{},"classes/ZapProvider.html":{},"interfaces/ZapProviderType.html":{},"classes/ZapRegistry.html":{},"classes/ZapToken.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"interfaces/listenEvent.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":178,"title":{},"body":{"classes/Curve.html":{},"classes/Utils.html":{},"classes/ZapArbiter.html":{},"classes/ZapDispatch.html":{}}}],["0.0.4",{"_index":835,"title":{},"body":{"dependencies.html":{}}}],["0.11.1",{"_index":830,"title":{},"body":{"dependencies.html":{}}}],["0.12.7",{"_index":812,"title":{},"body":{"dependencies.html":{}}}],["0.9.100",{"_index":828,"title":{},"body":{"dependencies.html":{}}}],["1",{"_index":79,"title":{},"body":{"classes/BaseContract.html":{},"classes/Curve.html":{},"classes/ZapDispatch.html":{},"classes/ZapRegistry.html":{}}}],["1.0.0",{"_index":840,"title":{},"body":{"dependencies.html":{}}}],["1.0.1",{"_index":839,"title":{},"body":{"dependencies.html":{}}}],["1.1.0",{"_index":833,"title":{},"body":{"dependencies.html":{}}}],["1.1.3",{"_index":791,"title":{},"body":{"dependencies.html":{}}}],["1.13.7",{"_index":814,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":929,"title":{},"body":{"overview.html":{}}}],["2",{"_index":183,"title":{},"body":{"classes/Curve.html":{},"classes/ZapDispatch.html":{}}}],["2.0.2",{"_index":800,"title":{},"body":{"dependencies.html":{}}}],["2.0.8",{"_index":819,"title":{},"body":{"dependencies.html":{}}}],["2.1.5",{"_index":805,"title":{},"body":{"dependencies.html":{}}}],["2.9.2",{"_index":837,"title":{},"body":{"dependencies.html":{}}}],["21",{"_index":930,"title":{},"body":{"overview.html":{}}}],["3",{"_index":177,"title":{},"body":{"classes/Curve.html":{},"classes/ZapDispatch.html":{}}}],["3.0.0",{"_index":815,"title":{},"body":{"dependencies.html":{}}}],["3.0.7",{"_index":818,"title":{},"body":{"dependencies.html":{}}}],["4",{"_index":525,"title":{},"body":{"classes/ZapDispatch.html":{}}}],["4.0.4",{"_index":821,"title":{},"body":{"dependencies.html":{}}}],["4.1.2",{"_index":798,"title":{},"body":{"dependencies.html":{}}}],["4.1.3",{"_index":810,"title":{},"body":{"dependencies.html":{}}}],["4.1.4",{"_index":793,"title":{},"body":{"dependencies.html":{}}}],["400000",{"_index":212,"title":{},"body":{"interfaces/Filter.html":{},"interfaces/SubscriptionEnd.html":{},"interfaces/SubscriptionInit.html":{},"interfaces/SubscriptionType.html":{},"miscellaneous/variables.html":{}}}],["40000000",{"_index":954,"title":{},"body":{"miscellaneous/variables.html":{}}}],["5.10.0",{"_index":826,"title":{},"body":{"dependencies.html":{}}}],["5.2.0",{"_index":807,"title":{},"body":{"dependencies.html":{}}}],["5.2.4",{"_index":795,"title":{},"body":{"dependencies.html":{}}}],["6000000",{"_index":952,"title":{},"body":{"miscellaneous/variables.html":{}}}],["7.0.0",{"_index":824,"title":{},"body":{"dependencies.html":{}}}],["7.1.1",{"_index":799,"title":{},"body":{"dependencies.html":{}}}],["7.2.1",{"_index":796,"title":{},"body":{"dependencies.html":{}}}],["8.0.1",{"_index":802,"title":{},"body":{"dependencies.html":{}}}],["_calculatepolynomi",{"_index":123,"title":{},"body":{"classes/Curve.html":{}}}],["_calculatepolynomial(term",{"_index":134,"title":{},"body":{"classes/Curve.html":{}}}],["_calculateterm",{"_index":124,"title":{},"body":{"classes/Curve.html":{}}}],["_calculateterm(term",{"_index":139,"title":{},"body":{"classes/Curve.html":{}}}],["access",{"_index":14,"title":{},"body":{"classes/BaseContract.html":{}}}],["activ",{"_index":431,"title":{},"body":{"classes/ZapArbiter.html":{}}}],["add",{"_index":688,"title":{},"body":{"classes/ZapRegistry.html":{}}}],["address",{"_index":40,"title":{},"body":{"classes/BaseContract.html":{},"interfaces/BondArgs.html":{},"interfaces/BondageArgs.html":{},"interfaces/CalcBondRateType.html":{},"interfaces/Filter.html":{},"interfaces/InitProvider.html":{},"interfaces/ProviderHandler.html":{},"interfaces/ResponseArgs.html":{},"classes/Subscriber.html":{},"interfaces/SubscriptionEnd.html":{},"interfaces/SubscriptionInit.html":{},"interfaces/SubscriptionType.html":{},"interfaces/UnbondArgs.html":{},"classes/ZapArbiter.html":{},"classes/ZapDispatch.html":{},"classes/ZapProvider.html":{},"classes/ZapRegistry.html":{},"classes/ZapToken.html":{},"interfaces/listenEvent.html":{},"miscellaneous/typealiases.html":{}}}],["alias",{"_index":932,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["alloc",{"_index":753,"title":{},"body":{"classes/ZapToken.html":{}}}],["allocate(undefin",{"_index":757,"title":{},"body":{"classes/ZapToken.html":{}}}],["allocate({to",{"_index":779,"title":{},"body":{"classes/ZapToken.html":{}}}],["amount",{"_index":319,"title":{},"body":{"classes/Subscriber.html":{},"classes/ZapProvider.html":{},"classes/ZapToken.html":{}}}],["amount).send({from,ga",{"_index":786,"title":{},"body":{"classes/ZapToken.html":{}}}],["any|undefin",{"_index":96,"title":{},"body":{"interfaces/BaseContractType.html":{},"interfaces/ContractType.html":{}}}],["api.git",{"_index":844,"title":{},"body":{"dependencies.html":{}}}],["approv",{"_index":316,"title":{},"body":{"classes/Subscriber.html":{},"classes/ZapToken.html":{}}}],["approve(undefin",{"_index":760,"title":{},"body":{"classes/ZapToken.html":{}}}],["approve({to",{"_index":782,"title":{},"body":{"classes/ZapToken.html":{}}}],["arbit",{"_index":10,"title":{},"body":{"classes/BaseContract.html":{},"classes/ZapArbiter.html":{},"classes/ZapProvider.html":{}}}],["argument",{"_index":180,"title":{},"body":{"classes/Curve.html":{}}}],["array",{"_index":147,"title":{},"body":{"classes/Curve.html":{},"interfaces/Filter.html":{},"interfaces/InitProvider.html":{},"interfaces/ProviderHandler.html":{},"interfaces/ResponseArgs.html":{},"interfaces/SubscriptionEnd.html":{},"interfaces/SubscriptionInit.html":{},"interfaces/SubscriptionType.html":{},"classes/ZapArbiter.html":{},"classes/ZapDispatch.html":{},"classes/ZapProvider.html":{},"interfaces/ZapProviderType.html":{},"classes/ZapRegistry.html":{}}}],["artifact",{"_index":48,"title":{},"body":{"classes/BaseContract.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["artifact:ani",{"_index":64,"title":{},"body":{"classes/BaseContract.html":{}}}],["artifactnam",{"_index":60,"title":{},"body":{"classes/BaseContract.html":{},"interfaces/BaseContractType.html":{},"interfaces/ContractType.html":{},"classes/ZapToken.html":{}}}],["artifactor",{"_index":817,"title":{},"body":{"dependencies.html":{}}}],["artifacts:ani",{"_index":69,"title":{},"body":{"classes/BaseContract.html":{}}}],["artifacts[artifactnam",{"_index":68,"title":{},"body":{"classes/BaseContract.html":{}}}],["artifactsdir",{"_index":59,"title":{},"body":{"classes/BaseContract.html":{},"interfaces/BaseContractType.html":{},"interfaces/ContractType.html":{},"classes/ZapArbiter.html":{},"classes/ZapDispatch.html":{},"classes/ZapRegistry.html":{},"classes/ZapToken.html":{}}}],["assert",{"_index":45,"title":{},"body":{"classes/BaseContract.html":{},"classes/Subscriber.html":{},"classes/ZapProvider.html":{},"miscellaneous/variables.html":{}}}],["assert(array.isarray(endpoint_param",{"_index":605,"title":{},"body":{"classes/ZapProvider.html":{}}}],["assert(bounddot",{"_index":327,"title":{},"body":{"classes/Subscriber.html":{}}}],["assert(endpoint",{"_index":622,"title":{},"body":{"classes/ZapProvider.html":{}}}],["assert(own",{"_index":302,"title":{},"body":{"classes/Subscriber.html":{},"classes/ZapProvider.html":{}}}],["assert(txid",{"_index":613,"title":{},"body":{"classes/ZapProvider.html":{}}}],["assert.ok(approv",{"_index":320,"title":{},"body":{"classes/Subscriber.html":{}}}],["assert.ok(this.hasenoughzap(zapnum",{"_index":313,"title":{},"body":{"classes/Subscriber.html":{}}}],["async",{"_index":22,"title":{},"body":{"classes/BaseContract.html":{},"classes/Subscriber.html":{},"classes/ZapArbiter.html":{},"classes/ZapDispatch.html":{},"classes/ZapProvider.html":{},"classes/ZapRegistry.html":{},"classes/ZapToken.html":{}}}],["asyncmigr",{"_index":936,"title":{},"body":{"miscellaneous/variables.html":{}}}],["augment",{"_index":432,"title":{},"body":{"classes/ZapArbiter.html":{}}}],["await",{"_index":88,"title":{},"body":{"classes/BaseContract.html":{},"classes/Subscriber.html":{},"classes/ZapArbiter.html":{},"classes/ZapDispatch.html":{},"classes/ZapProvider.html":{},"classes/ZapRegistry.html":{},"classes/ZapToken.html":{},"index.html":{}}}],["balanc",{"_index":315,"title":{},"body":{"classes/Subscriber.html":{},"classes/ZapToken.html":{}}}],["balanceof",{"_index":754,"title":{},"body":{"classes/ZapToken.html":{}}}],["balanceof(address",{"_index":762,"title":{},"body":{"classes/ZapToken.html":{}}}],["balanceof(address:address",{"_index":770,"title":{},"body":{"classes/ZapToken.html":{}}}],["base",{"_index":471,"title":{},"body":{"classes/ZapArbiter.html":{}}}],["basecontract",{"_index":1,"title":{"classes/BaseContract.html":{}},"body":{"classes/BaseContract.html":{},"classes/ZapArbiter.html":{},"classes/ZapDispatch.html":{},"classes/ZapRegistry.html":{},"classes/ZapToken.html":{}}}],["basecontract,basecontracttyp",{"_index":426,"title":{},"body":{"classes/ZapArbiter.html":{},"classes/ZapDispatch.html":{},"classes/ZapRegistry.html":{},"classes/ZapToken.html":{}}}],["basecontract:12",{"_index":401,"title":{},"body":{"classes/ZapArbiter.html":{},"classes/ZapDispatch.html":{},"classes/ZapRegistry.html":{},"classes/ZapToken.html":{}}}],["basecontract:13",{"_index":402,"title":{},"body":{"classes/ZapArbiter.html":{},"classes/ZapDispatch.html":{},"classes/ZapRegistry.html":{},"classes/ZapToken.html":{}}}],["basecontract:14",{"_index":399,"title":{},"body":{"classes/ZapArbiter.html":{},"classes/ZapDispatch.html":{},"classes/ZapRegistry.html":{},"classes/ZapToken.html":{}}}],["basecontract:15",{"_index":400,"title":{},"body":{"classes/ZapArbiter.html":{},"classes/ZapDispatch.html":{},"classes/ZapRegistry.html":{},"classes/ZapToken.html":{}}}],["basecontract:49",{"_index":425,"title":{},"body":{"classes/ZapArbiter.html":{},"classes/ZapDispatch.html":{},"classes/ZapRegistry.html":{},"classes/ZapToken.html":{}}}],["basecontracttyp",{"_index":26,"title":{"interfaces/BaseContractType.html":{}},"body":{"classes/BaseContract.html":{},"interfaces/BaseContractType.html":{},"interfaces/ContractType.html":{},"classes/ZapArbiter.html":{},"classes/ZapDispatch.html":{},"classes/ZapRegistry.html":{},"classes/ZapToken.html":{}}}],["beta.34",{"_index":841,"title":{},"body":{"dependencies.html":{}}}],["bigamount",{"_index":775,"title":{},"body":{"classes/ZapToken.html":{}}}],["bigamount).send({from,ga",{"_index":778,"title":{},"body":{"classes/ZapToken.html":{}}}],["bignumb",{"_index":148,"title":{},"body":{"classes/Curve.html":{},"interfaces/InitProvider.html":{},"interfaces/ResponseArgs.html":{},"classes/ZapDispatch.html":{},"classes/ZapRegistry.html":{},"dependencies.html":{}}}],["bignumber.j",{"_index":163,"title":{},"body":{"classes/Curve.html":{},"interfaces/InitProvider.html":{},"interfaces/ResponseArgs.html":{},"dependencies.html":{}}}],["block",{"_index":217,"title":{},"body":{"interfaces/Filter.html":{},"interfaces/SubscriptionEnd.html":{},"interfaces/SubscriptionInit.html":{},"interfaces/SubscriptionType.html":{},"classes/ZapArbiter.html":{}}}],["bond",{"_index":273,"title":{},"body":{"classes/Subscriber.html":{}}}],["bond(undefin",{"_index":285,"title":{},"body":{"classes/Subscriber.html":{}}}],["bond({provid",{"_index":311,"title":{},"body":{"classes/Subscriber.html":{}}}],["bondag",{"_index":9,"title":{},"body":{"classes/BaseContract.html":{},"classes/Subscriber.html":{},"classes/ZapToken.html":{}}}],["bondagearg",{"_index":106,"title":{"interfaces/BondageArgs.html":{}},"body":{"interfaces/BondArgs.html":{},"interfaces/BondageArgs.html":{},"interfaces/CalcBondRateType.html":{},"interfaces/UnbondArgs.html":{},"interfaces/listenEvent.html":{}}}],["bondarg",{"_index":98,"title":{"interfaces/BondArgs.html":{}},"body":{"interfaces/BondArgs.html":{},"interfaces/BondageArgs.html":{},"interfaces/CalcBondRateType.html":{},"interfaces/UnbondArgs.html":{},"interfaces/listenEvent.html":{}}}],["bondtyp",{"_index":286,"title":{},"body":{"classes/Subscriber.html":{},"interfaces/SubscriberHandler.html":{},"miscellaneous/typealiases.html":{}}}],["bondtype,unbondtype,subscribetype,subscriberconstructortype,subscriberhandl",{"_index":298,"title":{},"body":{"classes/Subscriber.html":{}}}],["boolean",{"_index":263,"title":{},"body":{"interfaces/ResponseArgs.html":{},"classes/ZapDispatch.html":{},"classes/ZapProvider.html":{}}}],["bootstrap",{"_index":879,"title":{},"body":{"index.html":{}}}],["bound",{"_index":154,"title":{},"body":{"classes/Curve.html":{},"classes/ZapProvider.html":{}}}],["bounddot",{"_index":325,"title":{},"body":{"classes/Subscriber.html":{}}}],["brand",{"_index":689,"title":{},"body":{"classes/ZapRegistry.html":{}}}],["build",{"_index":882,"title":{},"body":{"index.html":{}}}],["buildoptionstyp",{"_index":657,"title":{},"body":{"interfaces/ZapProviderType.html":{},"miscellaneous/typealiases.html":{}}}],["built",{"_index":909,"title":{},"body":{"index.html":{}}}],["calcbondratetyp",{"_index":108,"title":{"interfaces/CalcBondRateType.html":{}},"body":{"interfaces/BondArgs.html":{},"interfaces/BondageArgs.html":{},"interfaces/CalcBondRateType.html":{},"interfaces/UnbondArgs.html":{},"interfaces/listenEvent.html":{}}}],["calcdotsforzap",{"_index":541,"title":{},"body":{"classes/ZapProvider.html":{}}}],["calcdotsforzap(undefin",{"_index":560,"title":{},"body":{"classes/ZapProvider.html":{}}}],["calcdotsforzap({endpoint",{"_index":627,"title":{},"body":{"classes/ZapProvider.html":{}}}],["calcul",{"_index":117,"title":{},"body":{"classes/Curve.html":{},"classes/ZapProvider.html":{}}}],["call",{"_index":577,"title":{},"body":{"classes/ZapProvider.html":{},"classes/ZapRegistry.html":{}}}],["callback",{"_index":113,"title":{},"body":{"interfaces/BondArgs.html":{},"interfaces/BondageArgs.html":{},"interfaces/CalcBondRateType.html":{},"interfaces/UnbondArgs.html":{},"classes/ZapArbiter.html":{},"classes/ZapDispatch.html":{},"classes/ZapProvider.html":{},"classes/ZapRegistry.html":{},"interfaces/listenEvent.html":{}}}],["callback:funct",{"_index":462,"title":{},"body":{"classes/ZapArbiter.html":{}}}],["callback:function):promis",{"_index":745,"title":{},"body":{"classes/ZapRegistry.html":{}}}],["callback:function):void",{"_index":530,"title":{},"body":{"classes/ZapDispatch.html":{}}}],["case",{"_index":515,"title":{},"body":{"classes/ZapDispatch.html":{}}}],["catch",{"_index":84,"title":{},"body":{"classes/BaseContract.html":{},"classes/ZapArbiter.html":{}}}],["cd",{"_index":886,"title":{},"body":{"index.html":{}}}],["chai",{"_index":797,"title":{},"body":{"dependencies.html":{}}}],["check",{"_index":171,"title":{},"body":{"classes/Curve.html":{}}}],["checkvalid",{"_index":125,"title":{},"body":{"classes/Curve.html":{}}}],["clariti",{"_index":831,"title":{},"body":{"dependencies.html":{}}}],["class",{"_index":0,"title":{"classes/BaseContract.html":{},"classes/Curve.html":{},"classes/Subscriber.html":{},"classes/Utils.html":{},"classes/ZapArbiter.html":{},"classes/ZapDispatch.html":{},"classes/ZapProvider.html":{},"classes/ZapRegistry.html":{},"classes/ZapToken.html":{}},"body":{"classes/BaseContract.html":{},"classes/Curve.html":{},"classes/Subscriber.html":{},"classes/Utils.html":{},"classes/ZapArbiter.html":{},"classes/ZapDispatch.html":{},"classes/ZapProvider.html":{},"classes/ZapRegistry.html":{},"classes/ZapToken.html":{},"overview.html":{}}}],["clearbuild",{"_index":351,"title":{},"body":{"classes/Utils.html":{}}}],["code",{"_index":916,"title":{},"body":{"index.html":{}}}],["coef",{"_index":157,"title":{},"body":{"classes/Curve.html":{},"interfaces/CurveTerm.html":{},"interfaces/CurveType.html":{}}}],["compodoc/compodoc",{"_index":790,"title":{},"body":{"dependencies.html":{}}}],["conduct",{"_index":917,"title":{},"body":{"index.html":{}}}],["config.j",{"_index":961,"title":{},"body":{"miscellaneous/variables.html":{}}}],["console.error(error",{"_index":637,"title":{},"body":{"classes/ZapProvider.html":{}}}],["console.log(\"convert",{"_index":611,"title":{},"body":{"classes/ZapProvider.html":{}}}],["console.log(\"subscript",{"_index":449,"title":{},"body":{"classes/ZapArbiter.html":{}}}],["console.log(error",{"_index":643,"title":{},"body":{"classes/ZapProvider.html":{}}}],["console.log(hextoutf8(endpointparam",{"_index":742,"title":{},"body":{"classes/ZapRegistry.html":{}}}],["const",{"_index":46,"title":{},"body":{"classes/BaseContract.html":{},"classes/Curve.html":{},"interfaces/Filter.html":{},"classes/Subscriber.html":{},"interfaces/SubscriptionEnd.html":{},"interfaces/SubscriptionInit.html":{},"interfaces/SubscriptionType.html":{},"classes/Utils.html":{},"classes/ZapArbiter.html":{},"classes/ZapDispatch.html":{},"classes/ZapProvider.html":{},"classes/ZapRegistry.html":{},"classes/ZapToken.html":{},"index.html":{}}}],["constant",{"_index":119,"title":{},"body":{"classes/Curve.html":{},"interfaces/CurveTerm.html":{},"interfaces/CurveType.html":{},"interfaces/ProviderHandler.html":{},"classes/Utils.html":{},"classes/ZapProvider.html":{},"index.html":{}}}],["constructor",{"_index":24,"title":{},"body":{"classes/BaseContract.html":{},"classes/Curve.html":{},"classes/Subscriber.html":{},"classes/ZapArbiter.html":{},"classes/ZapDispatch.html":{},"classes/ZapProvider.html":{},"classes/ZapRegistry.html":{},"classes/ZapToken.html":{}}}],["constructor(const",{"_index":129,"title":{},"body":{"classes/Curve.html":{}}}],["constructor(undefin",{"_index":25,"title":{},"body":{"classes/BaseContract.html":{},"classes/Subscriber.html":{},"classes/ZapArbiter.html":{},"classes/ZapDispatch.html":{},"classes/ZapProvider.html":{},"classes/ZapRegistry.html":{},"classes/ZapToken.html":{}}}],["constructor({artifactsdir",{"_index":433,"title":{},"body":{"classes/ZapArbiter.html":{}}}],["constructor({artifactsdir,artifactname,networkid,networkprovider}:basecontracttyp",{"_index":63,"title":{},"body":{"classes/BaseContract.html":{}}}],["constructor({artifactsdir=undefined,artifactname=undefined,networkid=undefined,networkprovider=undefined}:basecontracttyp",{"_index":768,"title":{},"body":{"classes/ZapToken.html":{}}}],["constructor({artifactsdir=undefined,networkid=undefined,networkprovider=undefined}:basecontracttyp",{"_index":498,"title":{},"body":{"classes/ZapDispatch.html":{},"classes/ZapRegistry.html":{}}}],["constructor({owner,handler,zapregistry,zapdispatch,zapbondage,zaparbiter}:providerconstructortyp",{"_index":598,"title":{},"body":{"classes/ZapProvider.html":{}}}],["constructor({owner,handler,zaptoken,zapregistry,zapdispatch,zapbondage,zaparbiter}:subscriberconstructortyp",{"_index":301,"title":{},"body":{"classes/Subscriber.html":{}}}],["contract",{"_index":15,"title":{},"body":{"classes/BaseContract.html":{},"interfaces/BaseContractType.html":{},"interfaces/ContractType.html":{},"classes/ZapArbiter.html":{},"classes/ZapDispatch.html":{},"classes/ZapProvider.html":{},"classes/ZapRegistry.html":{},"classes/ZapToken.html":{},"index.html":{}}}],["contract'",{"_index":61,"title":{},"body":{"classes/BaseContract.html":{},"classes/ZapArbiter.html":{},"classes/ZapRegistry.html":{}}}],["contract:ani",{"_index":54,"title":{},"body":{"classes/BaseContract.html":{},"classes/ZapRegistry.html":{}}}],["contracts_build_directori",{"_index":659,"title":{},"body":{"interfaces/ZapProviderType.html":{}}}],["contracts_directory:str",{"_index":660,"title":{},"body":{"interfaces/ZapProviderType.html":{}}}],["contractsdir",{"_index":937,"title":{},"body":{"miscellaneous/variables.html":{}}}],["contracttyp",{"_index":97,"title":{"interfaces/ContractType.html":{}},"body":{"interfaces/BaseContractType.html":{},"interfaces/ContractType.html":{}}}],["contribut",{"_index":911,"title":{},"body":{"index.html":{}}}],["contributing.md",{"_index":914,"title":{},"body":{"index.html":{}}}],["contributor",{"_index":923,"title":{},"body":{"index.html":{}}}],["convert",{"_index":146,"title":{},"body":{"classes/Curve.html":{}}}],["convertedconst",{"_index":199,"title":{},"body":{"classes/Curve.html":{},"classes/ZapProvider.html":{},"classes/ZapRegistry.html":{}}}],["converteddivid",{"_index":204,"title":{},"body":{"classes/Curve.html":{},"classes/ZapRegistry.html":{}}}],["convertedpart",{"_index":202,"title":{},"body":{"classes/Curve.html":{},"classes/ZapRegistry.html":{}}}],["converttobnarray",{"_index":126,"title":{},"body":{"classes/Curve.html":{}}}],["copi",{"_index":863,"title":{},"body":{"index.html":{}}}],["core",{"_index":804,"title":{},"body":{"dependencies.html":{},"miscellaneous/variables.html":{}}}],["core/lib/commands/migrate.j",{"_index":956,"title":{},"body":{"miscellaneous/variables.html":{}}}],["creat",{"_index":578,"title":{},"body":{"classes/ZapProvider.html":{},"index.html":{}}}],["curv",{"_index":115,"title":{"classes/Curve.html":{}},"body":{"classes/Curve.html":{},"classes/ZapProvider.html":{},"interfaces/ZapProviderType.html":{},"classes/ZapRegistry.html":{}}}],["curve'",{"_index":142,"title":{},"body":{"classes/Curve.html":{}}}],["curve(const",{"_index":610,"title":{},"body":{"classes/ZapProvider.html":{}}}],["curve(curve['0'].map((i:string)=>parseint(i)),curve['1'].map((i:string)=>parseint(i)),curve['2'].map((i:string)=>parseint(i",{"_index":734,"title":{},"body":{"classes/ZapRegistry.html":{}}}],["curve,curvetyp",{"_index":590,"title":{},"body":{"classes/ZapProvider.html":{},"classes/ZapRegistry.html":{}}}],["curve.constants.map((item:numb",{"_index":715,"title":{},"body":{"classes/ZapRegistry.html":{}}}],["curve.dividers.map((item:numb",{"_index":717,"title":{},"body":{"classes/ZapRegistry.html":{}}}],["curve.parts.map((item:numb",{"_index":716,"title":{},"body":{"classes/ZapRegistry.html":{}}}],["curve:curvetyp",{"_index":231,"title":{},"body":{"interfaces/InitProvider.html":{}}}],["curveterm",{"_index":140,"title":{"interfaces/CurveTerm.html":{}},"body":{"classes/Curve.html":{},"interfaces/CurveTerm.html":{},"interfaces/CurveType.html":{}}}],["curvetyp",{"_index":160,"title":{"interfaces/CurveType.html":{}},"body":{"classes/Curve.html":{},"interfaces/CurveTerm.html":{},"interfaces/CurveType.html":{},"interfaces/InitProvider.html":{},"interfaces/ProviderHandler.html":{},"classes/ZapProvider.html":{},"classes/ZapRegistry.html":{}}}],["data",{"_index":493,"title":{},"body":{"classes/ZapDispatch.html":{}}}],["datasubscriptionend",{"_index":466,"title":{},"body":{"classes/ZapArbiter.html":{}}}],["default",{"_index":76,"title":{},"body":{"classes/BaseContract.html":{},"classes/Utils.html":{},"classes/ZapArbiter.html":{},"classes/ZapDispatch.html":{},"classes/ZapRegistry.html":{},"miscellaneous/variables.html":{}}}],["default_ga",{"_index":211,"title":{},"body":{"interfaces/Filter.html":{},"interfaces/SubscriptionEnd.html":{},"interfaces/SubscriptionInit.html":{},"interfaces/SubscriptionType.html":{},"miscellaneous/variables.html":{}}}],["defin",{"_index":27,"title":{},"body":{"classes/BaseContract.html":{},"classes/Curve.html":{},"classes/Subscriber.html":{},"classes/Utils.html":{},"classes/ZapArbiter.html":{},"classes/ZapDispatch.html":{},"classes/ZapProvider.html":{},"classes/ZapRegistry.html":{},"classes/ZapToken.html":{}}}],["depend",{"_index":789,"title":{"dependencies.html":{}},"body":{"dependencies.html":{}}}],["descript",{"_index":6,"title":{},"body":{"classes/BaseContract.html":{},"classes/Curve.html":{},"classes/ZapArbiter.html":{},"classes/ZapDispatch.html":{},"classes/ZapRegistry.html":{},"classes/ZapToken.html":{}}}],["detail",{"_index":915,"title":{},"body":{"index.html":{}}}],["develop",{"_index":867,"title":{},"body":{"index.html":{}}}],["developer'",{"_index":860,"title":{},"body":{"index.html":{}}}],["dirname(require.resolve(\"zap_contracts/truffl",{"_index":960,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dispatch",{"_index":8,"title":{},"body":{"classes/BaseContract.html":{},"classes/ZapDispatch.html":{},"classes/ZapProvider.html":{}}}],["distinguish",{"_index":690,"title":{},"body":{"classes/ZapRegistry.html":{}}}],["divid",{"_index":120,"title":{},"body":{"classes/Curve.html":{},"interfaces/CurveTerm.html":{},"interfaces/CurveType.html":{},"interfaces/ProviderHandler.html":{},"classes/ZapProvider.html":{},"index.html":{}}}],["doc",{"_index":838,"title":{},"body":{"dependencies.html":{}}}],["document",{"_index":801,"title":{},"body":{"dependencies.html":{}}}],["dot",{"_index":105,"title":{},"body":{"interfaces/BondArgs.html":{},"interfaces/BondageArgs.html":{},"interfaces/CalcBondRateType.html":{},"classes/Curve.html":{},"classes/Subscriber.html":{},"interfaces/SubscriberHandler.html":{},"interfaces/UnbondArgs.html":{},"classes/ZapProvider.html":{},"interfaces/listenEvent.html":{}}}],["dots}:subscribetype):promis",{"_index":333,"title":{},"body":{"classes/Subscriber.html":{}}}],["dots}:unbondtype):promis",{"_index":324,"title":{},"body":{"classes/Subscriber.html":{}}}],["dots}:{endpoint:string,dots:number}):promis",{"_index":626,"title":{},"body":{"classes/ZapProvider.html":{}}}],["dynam",{"_index":262,"title":{},"body":{"interfaces/ResponseArgs.html":{},"classes/ZapDispatch.html":{},"classes/ZapProvider.html":{}}}],["dynamic:boolean",{"_index":255,"title":{},"body":{"interfaces/ProviderHandler.html":{}}}],["dynamic}:respond):promis",{"_index":649,"title":{},"body":{"classes/ZapProvider.html":{}}}],["each",{"_index":187,"title":{},"body":{"classes/Curve.html":{},"index.html":{}}}],["encod",{"_index":173,"title":{},"body":{"classes/Curve.html":{}}}],["end",{"_index":450,"title":{},"body":{"classes/ZapArbiter.html":{}}}],["endpoint",{"_index":100,"title":{},"body":{"interfaces/BondArgs.html":{},"interfaces/BondageArgs.html":{},"interfaces/CalcBondRateType.html":{},"interfaces/Filter.html":{},"interfaces/InitProvider.html":{},"interfaces/ProviderHandler.html":{},"interfaces/ResponseArgs.html":{},"classes/Subscriber.html":{},"interfaces/SubscriptionEnd.html":{},"interfaces/SubscriptionInit.html":{},"interfaces/SubscriptionType.html":{},"interfaces/UnbondArgs.html":{},"classes/ZapArbiter.html":{},"classes/ZapDispatch.html":{},"classes/ZapProvider.html":{},"interfaces/ZapProviderType.html":{},"classes/ZapRegistry.html":{},"index.html":{},"interfaces/listenEvent.html":{}}}],["endpoint'",{"_index":677,"title":{},"body":{"classes/ZapRegistry.html":{}}}],["endpoint:endpoint",{"_index":624,"title":{},"body":{"classes/ZapProvider.html":{}}}],["endpoint:str",{"_index":224,"title":{},"body":{"interfaces/Filter.html":{},"interfaces/InitProvider.html":{},"interfaces/ProviderHandler.html":{},"interfaces/SubscriberHandler.html":{},"interfaces/SubscriptionEnd.html":{},"interfaces/SubscriptionInit.html":{},"interfaces/SubscriptionType.html":{}}}],["endpoint_param",{"_index":216,"title":{},"body":{"interfaces/Filter.html":{},"interfaces/InitProvider.html":{},"interfaces/ProviderHandler.html":{},"interfaces/SubscriptionEnd.html":{},"interfaces/SubscriptionInit.html":{},"interfaces/SubscriptionType.html":{},"classes/ZapArbiter.html":{},"classes/ZapProvider.html":{},"interfaces/ZapProviderType.html":{},"classes/ZapRegistry.html":{},"index.html":{}}}],["endpoint_params.map((item:str",{"_index":708,"title":{},"body":{"classes/ZapRegistry.html":{}}}],["endpoint_params.map(el",{"_index":721,"title":{},"body":{"classes/ZapRegistry.html":{}}}],["endpoint_params:array",{"_index":663,"title":{},"body":{"interfaces/ZapProviderType.html":{}}}],["endpoint_params[i",{"_index":440,"title":{},"body":{"classes/ZapArbiter.html":{}}}],["endpoint_params}:initprovider):promis",{"_index":604,"title":{},"body":{"classes/ZapProvider.html":{}}}],["endpointparam",{"_index":234,"title":{},"body":{"interfaces/InitProvider.html":{},"interfaces/ResponseArgs.html":{},"classes/Subscriber.html":{},"interfaces/SubscriberHandler.html":{},"classes/ZapDispatch.html":{},"classes/ZapProvider.html":{},"classes/ZapRegistry.html":{},"miscellaneous/typealiases.html":{}}}],["endpointparams,txid,address,filt",{"_index":703,"title":{},"body":{"classes/ZapRegistry.html":{}}}],["endpointparams[i",{"_index":504,"title":{},"body":{"classes/ZapDispatch.html":{}}}],["endpointparams[i].startswith('0x",{"_index":503,"title":{},"body":{"classes/ZapDispatch.html":{}}}],["endsubscriptionprovid",{"_index":390,"title":{},"body":{"classes/ZapArbiter.html":{}}}],["endsubscriptionprovider(undefin",{"_index":403,"title":{},"body":{"classes/ZapArbiter.html":{}}}],["endsubscriptionprovider({subscrib",{"_index":457,"title":{},"body":{"classes/ZapArbiter.html":{}}}],["endsubscriptionsubscrib",{"_index":391,"title":{},"body":{"classes/ZapArbiter.html":{}}}],["endsubscriptionsubscriber(undefin",{"_index":405,"title":{},"body":{"classes/ZapArbiter.html":{}}}],["endsubscriptionsubscriber({provid",{"_index":451,"title":{},"body":{"classes/ZapArbiter.html":{}}}],["erc20",{"_index":752,"title":{},"body":{"classes/ZapToken.html":{}}}],["err",{"_index":85,"title":{},"body":{"classes/BaseContract.html":{},"classes/ZapArbiter.html":{}}}],["error",{"_index":175,"title":{},"body":{"classes/Curve.html":{},"classes/ZapProvider.html":{}}}],["error(\"a",{"_index":185,"title":{},"body":{"classes/Curve.html":{}}}],["error(\"divid",{"_index":190,"title":{},"body":{"classes/Curve.html":{}}}],["error(\"invalid",{"_index":179,"title":{},"body":{"classes/Curve.html":{}}}],["error(\"unknown",{"_index":181,"title":{},"body":{"classes/Curve.html":{}}}],["error('fail",{"_index":787,"title":{},"body":{"classes/ZapToken.html":{}}}],["error('invalid",{"_index":529,"title":{},"body":{"classes/ZapDispatch.html":{}}}],["error:ani",{"_index":635,"title":{},"body":{"classes/ZapProvider.html":{}}}],["error:error",{"_index":642,"title":{},"body":{"classes/ZapProvider.html":{}}}],["ethereum",{"_index":213,"title":{},"body":{"interfaces/Filter.html":{},"interfaces/SubscriptionEnd.html":{},"interfaces/SubscriptionInit.html":{},"interfaces/SubscriptionType.html":{},"classes/ZapArbiter.html":{},"classes/ZapDispatch.html":{},"dependencies.html":{},"miscellaneous/typealiases.html":{}}}],["event",{"_index":459,"title":{},"body":{"classes/ZapArbiter.html":{},"classes/ZapDispatch.html":{},"classes/ZapProvider.html":{},"classes/ZapRegistry.html":{}}}],["eventemitt",{"_index":593,"title":{},"body":{"classes/ZapProvider.html":{},"miscellaneous/variables.html":{}}}],["exampl",{"_index":349,"title":{},"body":{"classes/Utils.html":{},"classes/ZapArbiter.html":{},"classes/ZapDispatch.html":{},"classes/ZapRegistry.html":{},"classes/ZapToken.html":{}}}],["exist",{"_index":193,"title":{},"body":{"classes/Curve.html":{}}}],["export",{"_index":52,"title":{},"body":{"classes/BaseContract.html":{},"interfaces/BaseContractType.html":{},"interfaces/BondArgs.html":{},"interfaces/BondageArgs.html":{},"interfaces/CalcBondRateType.html":{},"interfaces/ContractType.html":{},"classes/Curve.html":{},"interfaces/CurveTerm.html":{},"interfaces/CurveType.html":{},"interfaces/Filter.html":{},"interfaces/InitProvider.html":{},"interfaces/ProviderHandler.html":{},"interfaces/ResponseArgs.html":{},"classes/Subscriber.html":{},"interfaces/SubscriberHandler.html":{},"interfaces/SubscriptionEnd.html":{},"interfaces/SubscriptionInit.html":{},"interfaces/SubscriptionType.html":{},"interfaces/UnbondArgs.html":{},"classes/Utils.html":{},"classes/ZapArbiter.html":{},"classes/ZapDispatch.html":{},"classes/ZapProvider.html":{},"interfaces/ZapProviderType.html":{},"classes/ZapRegistry.html":{},"classes/ZapToken.html":{},"interfaces/listenEvent.html":{}}}],["extend",{"_index":389,"title":{},"body":{"classes/ZapArbiter.html":{},"classes/ZapDispatch.html":{},"classes/ZapRegistry.html":{},"classes/ZapToken.html":{}}}],["fail",{"_index":321,"title":{},"body":{"classes/Subscriber.html":{},"classes/ZapProvider.html":{}}}],["file",{"_index":4,"title":{},"body":{"classes/BaseContract.html":{},"interfaces/BaseContractType.html":{},"interfaces/BondArgs.html":{},"interfaces/BondageArgs.html":{},"interfaces/CalcBondRateType.html":{},"interfaces/ContractType.html":{},"classes/Curve.html":{},"interfaces/CurveTerm.html":{},"interfaces/CurveType.html":{},"interfaces/Filter.html":{},"interfaces/InitProvider.html":{},"interfaces/ProviderHandler.html":{},"interfaces/ResponseArgs.html":{},"classes/Subscriber.html":{},"interfaces/SubscriberHandler.html":{},"interfaces/SubscriptionEnd.html":{},"interfaces/SubscriptionInit.html":{},"interfaces/SubscriptionType.html":{},"interfaces/UnbondArgs.html":{},"classes/Utils.html":{},"classes/ZapArbiter.html":{},"classes/ZapDispatch.html":{},"classes/ZapProvider.html":{},"interfaces/ZapProviderType.html":{},"classes/ZapRegistry.html":{},"classes/ZapToken.html":{},"index.html":{},"interfaces/listenEvent.html":{}}}],["filter",{"_index":109,"title":{"interfaces/Filter.html":{}},"body":{"interfaces/BondArgs.html":{},"interfaces/BondageArgs.html":{},"interfaces/CalcBondRateType.html":{},"interfaces/Filter.html":{},"interfaces/InitProvider.html":{},"interfaces/ResponseArgs.html":{},"interfaces/SubscriptionEnd.html":{},"interfaces/SubscriptionInit.html":{},"interfaces/SubscriptionType.html":{},"interfaces/UnbondArgs.html":{},"classes/ZapArbiter.html":{},"classes/ZapDispatch.html":{},"classes/ZapRegistry.html":{},"interfaces/listenEvent.html":{}}}],["filters.fromblock",{"_index":467,"title":{},"body":{"classes/ZapArbiter.html":{},"classes/ZapDispatch.html":{}}}],["fn",{"_index":159,"title":{},"body":{"classes/Curve.html":{},"interfaces/CurveTerm.html":{},"interfaces/CurveType.html":{}}}],["from,ga",{"_index":518,"title":{},"body":{"classes/ZapDispatch.html":{}}}],["from,gas=utils.constants.default_gas}:responsearg",{"_index":510,"title":{},"body":{"classes/ZapDispatch.html":{}}}],["from,gas=utils.constants.default_gas}:transfertyp",{"_index":774,"title":{},"body":{"classes/ZapToken.html":{}}}],["from,gas=utils.constants.default_gas}:transfertype):promis",{"_index":780,"title":{},"body":{"classes/ZapToken.html":{}}}],["from:address",{"_index":268,"title":{},"body":{"interfaces/ResponseArgs.html":{}}}],["from:this.providerown",{"_index":608,"title":{},"body":{"classes/ZapProvider.html":{}}}],["fromblock",{"_index":110,"title":{},"body":{"interfaces/BondArgs.html":{},"interfaces/BondageArgs.html":{},"interfaces/CalcBondRateType.html":{},"interfaces/Filter.html":{},"interfaces/InitProvider.html":{},"interfaces/ProviderHandler.html":{},"interfaces/ResponseArgs.html":{},"interfaces/SubscriptionEnd.html":{},"interfaces/SubscriptionInit.html":{},"interfaces/SubscriptionType.html":{},"interfaces/UnbondArgs.html":{},"classes/ZapArbiter.html":{},"classes/ZapDispatch.html":{},"classes/ZapProvider.html":{},"interfaces/listenEvent.html":{}}}],["fromblock}:unsubscribelisten",{"_index":641,"title":{},"body":{"classes/ZapProvider.html":{}}}],["fromblock}:{subscriber:str",{"_index":633,"title":{},"body":{"classes/ZapProvider.html":{}}}],["fromzapbas",{"_index":355,"title":{},"body":{"classes/Utils.html":{}}}],["fromzapbase(num",{"_index":367,"title":{},"body":{"classes/Utils.html":{}}}],["fs",{"_index":384,"title":{},"body":{"classes/Utils.html":{}}}],["fulfil",{"_index":484,"title":{},"body":{"classes/ZapDispatch.html":{}}}],["func",{"_index":446,"title":{},"body":{"classes/ZapArbiter.html":{}}}],["function",{"_index":114,"title":{"miscellaneous/functions.html":{}},"body":{"interfaces/BondArgs.html":{},"interfaces/BondageArgs.html":{},"interfaces/CalcBondRateType.html":{},"classes/Curve.html":{},"interfaces/ProviderHandler.html":{},"interfaces/SubscriberHandler.html":{},"interfaces/UnbondArgs.html":{},"classes/ZapArbiter.html":{},"classes/ZapDispatch.html":{},"classes/ZapRegistry.html":{},"miscellaneous/functions.html":{},"interfaces/listenEvent.html":{}}}],["g",{"_index":878,"title":{},"body":{"index.html":{}}}],["ga",{"_index":101,"title":{},"body":{"interfaces/BondArgs.html":{},"interfaces/BondageArgs.html":{},"interfaces/CalcBondRateType.html":{},"interfaces/Filter.html":{},"interfaces/InitProvider.html":{},"interfaces/ProviderHandler.html":{},"interfaces/ResponseArgs.html":{},"interfaces/SubscriptionEnd.html":{},"interfaces/SubscriptionInit.html":{},"interfaces/SubscriptionType.html":{},"interfaces/UnbondArgs.html":{},"classes/ZapArbiter.html":{},"classes/ZapDispatch.html":{},"interfaces/ZapProviderType.html":{},"classes/ZapRegistry.html":{},"classes/ZapToken.html":{},"interfaces/listenEvent.html":{}}}],["ganach",{"_index":803,"title":{},"body":{"dependencies.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["ganacheprovid",{"_index":939,"title":{},"body":{"miscellaneous/variables.html":{}}}],["gas=utils.constants.default_ga",{"_index":438,"title":{},"body":{"classes/ZapArbiter.html":{}}}],["gas=utils.constants.default_gas}:endpointparam",{"_index":720,"title":{},"body":{"classes/ZapRegistry.html":{}}}],["gas=utils.constants.default_gas}:initcurve):promis",{"_index":714,"title":{},"body":{"classes/ZapRegistry.html":{}}}],["gas=utils.constants.default_gas}:initprovid",{"_index":705,"title":{},"body":{"classes/ZapRegistry.html":{}}}],["gas=utils.constants.default_gas}:subscriptionend",{"_index":452,"title":{},"body":{"classes/ZapArbiter.html":{}}}],["gas=utils.constants.default_gas}:transfertype):promis",{"_index":783,"title":{},"body":{"classes/ZapToken.html":{}}}],["gas?:bignumb",{"_index":269,"title":{},"body":{"interfaces/ResponseArgs.html":{}}}],["gas?:numb",{"_index":221,"title":{},"body":{"interfaces/Filter.html":{},"interfaces/SubscriptionEnd.html":{},"interfaces/SubscriptionInit.html":{},"interfaces/SubscriptionType.html":{}}}],["gas_pric",{"_index":940,"title":{},"body":{"miscellaneous/variables.html":{}}}],["gaspric",{"_index":656,"title":{},"body":{"interfaces/ZapProviderType.html":{}}}],["get",{"_index":848,"title":{"index.html":{}},"body":{"index.html":{}}}],["getartifact",{"_index":352,"title":{},"body":{"classes/Utils.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["getcontractown",{"_index":23,"title":{},"body":{"classes/BaseContract.html":{},"classes/ZapArbiter.html":{},"classes/ZapDispatch.html":{},"classes/ZapRegistry.html":{},"classes/ZapToken.html":{}}}],["getcontractowner():promis",{"_index":87,"title":{},"body":{"classes/BaseContract.html":{}}}],["getcurv",{"_index":542,"title":{},"body":{"classes/ZapProvider.html":{}}}],["getcurve(endpoint",{"_index":566,"title":{},"body":{"classes/ZapProvider.html":{}}}],["getcurve(endpoint:string):promis",{"_index":619,"title":{},"body":{"classes/ZapProvider.html":{}}}],["gethexbuff",{"_index":356,"title":{},"body":{"classes/Utils.html":{}}}],["gethexbuffer(specifi",{"_index":370,"title":{},"body":{"classes/Utils.html":{}}}],["gethexstr",{"_index":357,"title":{},"body":{"classes/Utils.html":{}}}],["gethexstring(str",{"_index":373,"title":{},"body":{"classes/Utils.html":{}}}],["getnextendpointparam",{"_index":666,"title":{},"body":{"classes/ZapRegistry.html":{}}}],["getnextendpointparams(undefin",{"_index":675,"title":{},"body":{"classes/ZapRegistry.html":{}}}],["getnextendpointparams({provid",{"_index":737,"title":{},"body":{"classes/ZapRegistry.html":{}}}],["getnextprovid",{"_index":667,"title":{},"body":{"classes/ZapRegistry.html":{}}}],["getnextprovider(index",{"_index":678,"title":{},"body":{"classes/ZapRegistry.html":{}}}],["getnextprovider(index:number):promis",{"_index":735,"title":{},"body":{"classes/ZapRegistry.html":{}}}],["getpric",{"_index":127,"title":{},"body":{"classes/Curve.html":{}}}],["getprice(tot",{"_index":149,"title":{},"body":{"classes/Curve.html":{}}}],["getprovidercurv",{"_index":668,"title":{},"body":{"classes/ZapRegistry.html":{}}}],["getprovidercurve(provid",{"_index":681,"title":{},"body":{"classes/ZapRegistry.html":{}}}],["getprovidercurve(provider:string,endpoint:string):promis",{"_index":732,"title":{},"body":{"classes/ZapRegistry.html":{}}}],["getproviderpublickey",{"_index":669,"title":{},"body":{"classes/ZapRegistry.html":{}}}],["getproviderpublickey(provid",{"_index":683,"title":{},"body":{"classes/ZapRegistry.html":{}}}],["getproviderpublickey(provider:address):promis",{"_index":725,"title":{},"body":{"classes/ZapRegistry.html":{}}}],["getprovidertitl",{"_index":670,"title":{},"body":{"classes/ZapRegistry.html":{}}}],["getprovidertitle(provid",{"_index":685,"title":{},"body":{"classes/ZapRegistry.html":{}}}],["getprovidertitle(provider:address):promis",{"_index":729,"title":{},"body":{"classes/ZapRegistry.html":{}}}],["getpubkey",{"_index":543,"title":{},"body":{"classes/ZapProvider.html":{}}}],["getpubkey():promis",{"_index":617,"title":{},"body":{"classes/ZapProvider.html":{}}}],["getsubscript",{"_index":392,"title":{},"body":{"classes/ZapArbiter.html":{}}}],["getsubscription(undefin",{"_index":408,"title":{},"body":{"classes/ZapArbiter.html":{}}}],["getsubscription({provider,subscriber,endpoint}:subscriptiontyp",{"_index":447,"title":{},"body":{"classes/ZapArbiter.html":{}}}],["gettitl",{"_index":544,"title":{},"body":{"classes/ZapProvider.html":{}}}],["gettitle():promis",{"_index":615,"title":{},"body":{"classes/ZapProvider.html":{}}}],["getzapbound",{"_index":545,"title":{},"body":{"classes/ZapProvider.html":{}}}],["getzapbound(endpoint",{"_index":571,"title":{},"body":{"classes/ZapProvider.html":{}}}],["getzapbound(endpoint:string):promis",{"_index":621,"title":{},"body":{"classes/ZapProvider.html":{}}}],["getzaprequir",{"_index":546,"title":{},"body":{"classes/ZapProvider.html":{}}}],["getzaprequired(undefin",{"_index":573,"title":{},"body":{"classes/ZapProvider.html":{}}}],["getzaprequired({endpoint",{"_index":625,"title":{},"body":{"classes/ZapProvider.html":{}}}],["git+https://github.com/zapproject/zap",{"_index":843,"title":{},"body":{"dependencies.html":{}}}],["given",{"_index":152,"title":{},"body":{"classes/Curve.html":{}}}],["gui",{"_index":958,"title":{},"body":{"miscellaneous/variables.html":{}}}],["handleincom",{"_index":237,"title":{},"body":{"interfaces/ProviderHandler.html":{}}}],["handleincoming(res:ani",{"_index":894,"title":{},"body":{"index.html":{}}}],["handler",{"_index":259,"title":{},"body":{"interfaces/ProviderHandler.html":{},"classes/Subscriber.html":{},"interfaces/SubscriberHandler.html":{},"classes/ZapProvider.html":{}}}],["handlerespons",{"_index":341,"title":{},"body":{"interfaces/SubscriberHandler.html":{}}}],["handlesubscript",{"_index":238,"title":{},"body":{"interfaces/ProviderHandler.html":{},"interfaces/SubscriberHandler.html":{}}}],["handlesubscription(res:ani",{"_index":895,"title":{},"body":{"index.html":{}}}],["handleunsubscript",{"_index":239,"title":{},"body":{"interfaces/ProviderHandler.html":{},"interfaces/SubscriberHandler.html":{},"index.html":{}}}],["hasenoughzap",{"_index":274,"title":{},"body":{"classes/Subscriber.html":{}}}],["hasenoughzap(zaprequir",{"_index":288,"title":{},"body":{"classes/Subscriber.html":{}}}],["hasenoughzap(zaprequired:number):promis",{"_index":339,"title":{},"body":{"classes/Subscriber.html":{}}}],["here",{"_index":851,"title":{},"body":{"index.html":{}}}],["hex",{"_index":387,"title":{},"body":{"classes/Utils.html":{}}}],["hextoutf8",{"_index":592,"title":{},"body":{"classes/ZapProvider.html":{},"classes/ZapRegistry.html":{}}}],["hextoutf8(endpointparam",{"_index":743,"title":{},"body":{"classes/ZapRegistry.html":{}}}],["hextoutf8(titl",{"_index":731,"title":{},"body":{"classes/ZapRegistry.html":{}}}],["hoist",{"_index":880,"title":{},"body":{"index.html":{}}}],["hoistrun",{"_index":881,"title":{},"body":{"index.html":{}}}],["hostnam",{"_index":654,"title":{},"body":{"interfaces/ZapProviderType.html":{}}}],["https://truffleframework.com/ganach",{"_index":910,"title":{},"body":{"index.html":{}}}],["id",{"_index":75,"title":{},"body":{"classes/BaseContract.html":{}}}],["if(!artifactsdir",{"_index":67,"title":{},"body":{"classes/BaseContract.html":{}}}],["if(!endpoint_param",{"_index":707,"title":{},"body":{"classes/ZapRegistry.html":{}}}],["if(endpointparams.length",{"_index":502,"title":{},"body":{"classes/ZapDispatch.html":{}}}],["implement",{"_index":892,"title":{},"body":{"index.html":{}}}],["import",{"_index":44,"title":{},"body":{"classes/BaseContract.html":{},"classes/Curve.html":{},"interfaces/InitProvider.html":{},"interfaces/ProviderHandler.html":{},"interfaces/ResponseArgs.html":{},"classes/Subscriber.html":{},"interfaces/SubscriberHandler.html":{},"classes/Utils.html":{},"classes/ZapArbiter.html":{},"classes/ZapDispatch.html":{},"classes/ZapProvider.html":{},"interfaces/ZapProviderType.html":{},"classes/ZapRegistry.html":{},"classes/ZapToken.html":{},"index.html":{}}}],["import{zaparbit",{"_index":343,"title":{},"body":{"interfaces/SubscriberHandler.html":{}}}],["import{zaptoken",{"_index":342,"title":{},"body":{"interfaces/SubscriberHandler.html":{}}}],["incom",{"_index":464,"title":{},"body":{"classes/ZapArbiter.html":{},"classes/ZapDispatch.html":{}}}],["index",{"_index":18,"title":{"index.html":{}},"body":{"classes/BaseContract.html":{},"interfaces/BaseContractType.html":{},"interfaces/BondArgs.html":{},"interfaces/BondageArgs.html":{},"interfaces/CalcBondRateType.html":{},"interfaces/ContractType.html":{},"classes/Curve.html":{},"interfaces/CurveTerm.html":{},"interfaces/CurveType.html":{},"interfaces/Filter.html":{},"interfaces/InitProvider.html":{},"interfaces/ProviderHandler.html":{},"interfaces/ResponseArgs.html":{},"classes/Subscriber.html":{},"interfaces/SubscriberHandler.html":{},"interfaces/SubscriptionEnd.html":{},"interfaces/SubscriptionInit.html":{},"interfaces/SubscriptionType.html":{},"interfaces/UnbondArgs.html":{},"classes/Utils.html":{},"classes/ZapArbiter.html":{},"classes/ZapDispatch.html":{},"classes/ZapProvider.html":{},"interfaces/ZapProviderType.html":{},"classes/ZapRegistry.html":{},"classes/ZapToken.html":{},"miscellaneous/functions.html":{},"interfaces/listenEvent.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["index:numb",{"_index":233,"title":{},"body":{"interfaces/InitProvider.html":{}}}],["index}:nextendpoint):promis",{"_index":738,"title":{},"body":{"classes/ZapRegistry.html":{}}}],["info",{"_index":2,"title":{},"body":{"classes/BaseContract.html":{},"interfaces/BaseContractType.html":{},"interfaces/BondArgs.html":{},"interfaces/BondageArgs.html":{},"interfaces/CalcBondRateType.html":{},"interfaces/ContractType.html":{},"classes/Curve.html":{},"interfaces/CurveTerm.html":{},"interfaces/CurveType.html":{},"interfaces/Filter.html":{},"interfaces/InitProvider.html":{},"interfaces/ProviderHandler.html":{},"interfaces/ResponseArgs.html":{},"classes/Subscriber.html":{},"interfaces/SubscriberHandler.html":{},"interfaces/SubscriptionEnd.html":{},"interfaces/SubscriptionInit.html":{},"interfaces/SubscriptionType.html":{},"interfaces/UnbondArgs.html":{},"classes/Utils.html":{},"classes/ZapArbiter.html":{},"classes/ZapDispatch.html":{},"classes/ZapProvider.html":{},"interfaces/ZapProviderType.html":{},"classes/ZapRegistry.html":{},"classes/ZapToken.html":{},"interfaces/listenEvent.html":{}}}],["inform",{"_index":411,"title":{},"body":{"classes/ZapArbiter.html":{}}}],["inherit",{"_index":398,"title":{},"body":{"classes/ZapArbiter.html":{},"classes/ZapDispatch.html":{},"classes/ZapRegistry.html":{},"classes/ZapToken.html":{}}}],["init",{"_index":614,"title":{},"body":{"classes/ZapProvider.html":{}}}],["initcurv",{"_index":230,"title":{},"body":{"interfaces/InitProvider.html":{},"interfaces/ProviderHandler.html":{},"classes/ZapProvider.html":{},"classes/ZapRegistry.html":{},"miscellaneous/typealiases.html":{}}}],["initi",{"_index":416,"title":{},"body":{"classes/ZapArbiter.html":{},"classes/ZapProvider.html":{}}}],["initiateprovid",{"_index":547,"title":{},"body":{"classes/ZapProvider.html":{},"classes/ZapRegistry.html":{}}}],["initiateprovider(undefin",{"_index":575,"title":{},"body":{"classes/ZapProvider.html":{},"classes/ZapRegistry.html":{}}}],["initiateprovider({public_key",{"_index":603,"title":{},"body":{"classes/ZapProvider.html":{},"classes/ZapRegistry.html":{}}}],["initiateprovidercurv",{"_index":548,"title":{},"body":{"classes/ZapProvider.html":{},"classes/ZapRegistry.html":{}}}],["initiateprovidercurve(undefin",{"_index":579,"title":{},"body":{"classes/ZapProvider.html":{},"classes/ZapRegistry.html":{}}}],["initiateprovidercurve({endpoint",{"_index":609,"title":{},"body":{"classes/ZapProvider.html":{},"classes/ZapRegistry.html":{}}}],["initiatesubscript",{"_index":393,"title":{},"body":{"classes/ZapArbiter.html":{}}}],["initiatesubscription(undefin",{"_index":412,"title":{},"body":{"classes/ZapArbiter.html":{}}}],["initprovid",{"_index":225,"title":{"interfaces/InitProvider.html":{}},"body":{"interfaces/InitProvider.html":{},"interfaces/ProviderHandler.html":{},"classes/ZapProvider.html":{},"classes/ZapRegistry.html":{},"miscellaneous/typealiases.html":{}}}],["inquir",{"_index":564,"title":{},"body":{"classes/ZapProvider.html":{}}}],["instal",{"_index":872,"title":{},"body":{"index.html":{}}}],["instanc",{"_index":16,"title":{},"body":{"classes/BaseContract.html":{},"classes/ZapArbiter.html":{},"classes/ZapDispatch.html":{},"classes/ZapRegistry.html":{},"classes/ZapToken.html":{}}}],["instruct",{"_index":862,"title":{},"body":{"index.html":{}}}],["insuffici",{"_index":314,"title":{},"body":{"classes/Subscriber.html":{}}}],["interfac",{"_index":92,"title":{"interfaces/BaseContractType.html":{},"interfaces/BondArgs.html":{},"interfaces/BondageArgs.html":{},"interfaces/CalcBondRateType.html":{},"interfaces/ContractType.html":{},"interfaces/CurveTerm.html":{},"interfaces/CurveType.html":{},"interfaces/Filter.html":{},"interfaces/InitProvider.html":{},"interfaces/ProviderHandler.html":{},"interfaces/ResponseArgs.html":{},"interfaces/SubscriberHandler.html":{},"interfaces/SubscriptionEnd.html":{},"interfaces/SubscriptionInit.html":{},"interfaces/SubscriptionType.html":{},"interfaces/UnbondArgs.html":{},"interfaces/ZapProviderType.html":{},"interfaces/listenEvent.html":{}},"body":{"interfaces/BaseContractType.html":{},"interfaces/BondArgs.html":{},"interfaces/BondageArgs.html":{},"interfaces/CalcBondRateType.html":{},"interfaces/ContractType.html":{},"interfaces/CurveTerm.html":{},"interfaces/CurveType.html":{},"interfaces/Filter.html":{},"interfaces/InitProvider.html":{},"interfaces/ProviderHandler.html":{},"interfaces/ResponseArgs.html":{},"interfaces/SubscriberHandler.html":{},"interfaces/SubscriptionEnd.html":{},"interfaces/SubscriptionInit.html":{},"interfaces/SubscriptionType.html":{},"interfaces/UnbondArgs.html":{},"classes/ZapArbiter.html":{},"classes/ZapDispatch.html":{},"interfaces/ZapProviderType.html":{},"index.html":{},"interfaces/listenEvent.html":{},"overview.html":{}}}],["intergr",{"_index":861,"title":{},"body":{"index.html":{}}}],["introduct",{"_index":850,"title":{},"body":{"index.html":{}}}],["javascript",{"_index":856,"title":{},"body":{"index.html":{}}}],["join(zapcontractdirname,\"contract",{"_index":951,"title":{},"body":{"miscellaneous/variables.html":{}}}],["join(zapcontractdirname,\"migr",{"_index":957,"title":{},"body":{"miscellaneous/variables.html":{}}}],["key",{"_index":437,"title":{},"body":{"classes/ZapArbiter.html":{},"classes/ZapProvider.html":{},"classes/ZapRegistry.html":{}}}],["last",{"_index":436,"title":{},"body":{"classes/ZapArbiter.html":{}}}],["latest",{"_index":468,"title":{},"body":{"classes/ZapArbiter.html":{},"classes/ZapDispatch.html":{}}}],["lerna",{"_index":876,"title":{},"body":{"index.html":{}}}],["less",{"_index":328,"title":{},"body":{"classes/Subscriber.html":{}}}],["licens",{"_index":924,"title":{},"body":{"index.html":{}}}],["license.md",{"_index":927,"title":{},"body":{"index.html":{}}}],["list",{"_index":922,"title":{},"body":{"index.html":{}}}],["listen",{"_index":394,"title":{},"body":{"classes/ZapArbiter.html":{},"classes/ZapDispatch.html":{},"classes/ZapProvider.html":{},"classes/ZapRegistry.html":{}}}],["listen(callback",{"_index":418,"title":{},"body":{"classes/ZapArbiter.html":{}}}],["listen(callback:funct",{"_index":472,"title":{},"body":{"classes/ZapArbiter.html":{}}}],["listen(filt",{"_index":480,"title":{},"body":{"classes/ZapDispatch.html":{},"classes/ZapRegistry.html":{}}}],["listen(filters:filt",{"_index":744,"title":{},"body":{"classes/ZapRegistry.html":{}}}],["listenev",{"_index":112,"title":{"interfaces/listenEvent.html":{}},"body":{"interfaces/BondArgs.html":{},"interfaces/BondageArgs.html":{},"interfaces/CalcBondRateType.html":{},"interfaces/UnbondArgs.html":{},"interfaces/listenEvent.html":{}}}],["listenfulfillqueri",{"_index":475,"title":{},"body":{"classes/ZapDispatch.html":{}}}],["listenfulfillquery(filt",{"_index":482,"title":{},"body":{"classes/ZapDispatch.html":{}}}],["listenfulfillquery(filters:object",{"_index":534,"title":{},"body":{"classes/ZapDispatch.html":{}}}],["listenincom",{"_index":476,"title":{},"body":{"classes/ZapDispatch.html":{}}}],["listenincoming(filt",{"_index":485,"title":{},"body":{"classes/ZapDispatch.html":{}}}],["listenincoming(filters:object",{"_index":532,"title":{},"body":{"classes/ZapDispatch.html":{}}}],["listennewcurv",{"_index":671,"title":{},"body":{"classes/ZapRegistry.html":{}}}],["listennewcurve(provid",{"_index":696,"title":{},"body":{"classes/ZapRegistry.html":{}}}],["listennewcurve(provider:address",{"_index":749,"title":{},"body":{"classes/ZapRegistry.html":{}}}],["listennewprovid",{"_index":672,"title":{},"body":{"classes/ZapRegistry.html":{}}}],["listennewprovider(filt",{"_index":698,"title":{},"body":{"classes/ZapRegistry.html":{}}}],["listennewprovider(filters:filt",{"_index":747,"title":{},"body":{"classes/ZapRegistry.html":{}}}],["listenoffchainrespons",{"_index":477,"title":{},"body":{"classes/ZapDispatch.html":{}}}],["listenoffchainresponse(filt",{"_index":487,"title":{},"body":{"classes/ZapDispatch.html":{}}}],["listenoffchainresponse(filters:object",{"_index":536,"title":{},"body":{"classes/ZapDispatch.html":{}}}],["listenqueri",{"_index":250,"title":{},"body":{"interfaces/ProviderHandler.html":{},"classes/ZapProvider.html":{},"miscellaneous/typealiases.html":{}}}],["listenqueries(undefin",{"_index":581,"title":{},"body":{"classes/ZapProvider.html":{}}}],["listenqueries({fromblock}:listenqueri",{"_index":646,"title":{},"body":{"classes/ZapProvider.html":{}}}],["listensubscrib",{"_index":549,"title":{},"body":{"classes/ZapProvider.html":{}}}],["listensubscribes(undefin",{"_index":583,"title":{},"body":{"classes/ZapProvider.html":{}}}],["listensubscribes({subscrib",{"_index":632,"title":{},"body":{"classes/ZapProvider.html":{}}}],["listensubscriptionend",{"_index":395,"title":{},"body":{"classes/ZapArbiter.html":{}}}],["listensubscriptionend(filt",{"_index":420,"title":{},"body":{"classes/ZapArbiter.html":{}}}],["listensubscriptionend(filters:filt",{"_index":461,"title":{},"body":{"classes/ZapArbiter.html":{}}}],["listensubscriptionstart",{"_index":396,"title":{},"body":{"classes/ZapArbiter.html":{}}}],["listensubscriptionstart(filt",{"_index":423,"title":{},"body":{"classes/ZapArbiter.html":{}}}],["listensubscriptionstart(filters:filt",{"_index":469,"title":{},"body":{"classes/ZapArbiter.html":{}}}],["listenunsubscrib",{"_index":550,"title":{},"body":{"classes/ZapProvider.html":{}}}],["listenunsubscribes(undefin",{"_index":585,"title":{},"body":{"classes/ZapProvider.html":{}}}],["listenunsubscribes({subscrib",{"_index":640,"title":{},"body":{"classes/ZapProvider.html":{}}}],["liter",{"_index":561,"title":{},"body":{"classes/ZapProvider.html":{},"miscellaneous/typealiases.html":{}}}],["local",{"_index":865,"title":{},"body":{"index.html":{}}}],["logger",{"_index":658,"title":{},"body":{"interfaces/ZapProviderType.html":{}}}],["machin",{"_index":866,"title":{},"body":{"index.html":{}}}],["mainnet",{"_index":77,"title":{},"body":{"classes/BaseContract.html":{}}}],["manag",{"_index":430,"title":{},"body":{"classes/ZapArbiter.html":{},"classes/ZapProvider.html":{},"classes/ZapRegistry.html":{},"index.html":{}}}],["markdown",{"_index":834,"title":{},"body":{"dependencies.html":{}}}],["match",{"_index":91,"title":{},"body":{"classes/BaseContract.html":{},"interfaces/BaseContractType.html":{},"interfaces/BondArgs.html":{},"interfaces/BondageArgs.html":{},"interfaces/CalcBondRateType.html":{},"interfaces/ContractType.html":{},"classes/Curve.html":{},"interfaces/CurveTerm.html":{},"interfaces/CurveType.html":{},"interfaces/Filter.html":{},"interfaces/InitProvider.html":{},"interfaces/ProviderHandler.html":{},"interfaces/ResponseArgs.html":{},"classes/Subscriber.html":{},"interfaces/SubscriberHandler.html":{},"interfaces/SubscriptionEnd.html":{},"interfaces/SubscriptionInit.html":{},"interfaces/SubscriptionType.html":{},"interfaces/UnbondArgs.html":{},"classes/Utils.html":{},"classes/ZapArbiter.html":{},"classes/ZapDispatch.html":{},"classes/ZapProvider.html":{},"interfaces/ZapProviderType.html":{},"classes/ZapRegistry.html":{},"classes/ZapToken.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"interfaces/listenEvent.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["math.pow(x",{"_index":196,"title":{},"body":{"classes/Curve.html":{}}}],["member",{"_index":164,"title":{},"body":{"classes/Curve.html":{}}}],["method",{"_index":21,"title":{},"body":{"classes/BaseContract.html":{},"classes/Curve.html":{},"classes/Subscriber.html":{},"classes/Utils.html":{},"classes/ZapArbiter.html":{},"classes/ZapDispatch.html":{},"classes/ZapProvider.html":{},"classes/ZapRegistry.html":{},"classes/ZapToken.html":{}}}],["migrat",{"_index":385,"title":{},"body":{"classes/Utils.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["migratecontract",{"_index":353,"title":{},"body":{"classes/Utils.html":{}}}],["migrationdir",{"_index":941,"title":{},"body":{"miscellaneous/variables.html":{}}}],["migrations_directori",{"_index":662,"title":{},"body":{"interfaces/ZapProviderType.html":{}}}],["miscellan",{"_index":845,"title":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":926,"title":{},"body":{"index.html":{}}}],["mocha",{"_index":806,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["modul",{"_index":858,"title":{"modules.html":{}},"body":{"index.html":{},"modules.html":{}}}],["monorepo",{"_index":852,"title":{},"body":{"index.html":{}}}],["myhandl",{"_index":891,"title":{},"body":{"index.html":{}}}],["myzapprovid",{"_index":898,"title":{},"body":{"index.html":{}}}],["myzapprovider.initiateprovid",{"_index":900,"title":{},"body":{"index.html":{}}}],["myzapprovider.initiateprovidercurv",{"_index":908,"title":{},"body":{"index.html":{}}}],["name",{"_index":31,"title":{},"body":{"classes/BaseContract.html":{},"classes/Curve.html":{},"classes/Subscriber.html":{},"classes/Utils.html":{},"classes/ZapArbiter.html":{},"classes/ZapDispatch.html":{},"classes/ZapProvider.html":{},"classes/ZapRegistry.html":{},"classes/ZapToken.html":{}}}],["need",{"_index":606,"title":{},"body":{"classes/ZapProvider.html":{},"index.html":{}}}],["network",{"_index":74,"title":{},"body":{"classes/BaseContract.html":{},"classes/ZapArbiter.html":{},"interfaces/ZapProviderType.html":{},"miscellaneous/variables.html":{}}}],["network_id",{"_index":653,"title":{},"body":{"interfaces/ZapProviderType.html":{}}}],["networkid",{"_index":20,"title":{},"body":{"classes/BaseContract.html":{},"interfaces/BaseContractType.html":{},"interfaces/ContractType.html":{},"classes/ZapArbiter.html":{},"classes/ZapDispatch.html":{},"classes/ZapRegistry.html":{},"classes/ZapToken.html":{}}}],["networkid,networkprovider}:basecontracttyp",{"_index":434,"title":{},"body":{"classes/ZapArbiter.html":{}}}],["networkid:numb",{"_index":55,"title":{},"body":{"classes/BaseContract.html":{}}}],["networkprovid",{"_index":62,"title":{},"body":{"classes/BaseContract.html":{},"interfaces/BaseContractType.html":{},"interfaces/ContractType.html":{},"classes/ZapArbiter.html":{},"classes/ZapDispatch.html":{},"classes/ZapRegistry.html":{},"classes/ZapToken.html":{}}}],["new",{"_index":72,"title":{},"body":{"classes/BaseContract.html":{},"classes/Curve.html":{},"classes/Utils.html":{},"classes/ZapDispatch.html":{},"classes/ZapProvider.html":{},"classes/ZapRegistry.html":{},"classes/ZapToken.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["next",{"_index":680,"title":{},"body":{"classes/ZapRegistry.html":{}}}],["nextendpoint",{"_index":232,"title":{},"body":{"interfaces/InitProvider.html":{},"classes/ZapRegistry.html":{},"miscellaneous/typealiases.html":{}}}],["node",{"_index":823,"title":{},"body":{"dependencies.html":{}}}],["nodej",{"_index":874,"title":{},"body":{"index.html":{}}}],["non",{"_index":192,"title":{},"body":{"classes/Curve.html":{}}}],["normalizeprovid",{"_index":358,"title":{},"body":{"classes/Utils.html":{}}}],["normalizeprovider(provid",{"_index":376,"title":{},"body":{"classes/Utils.html":{}}}],["npm",{"_index":808,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["npm>=6.1.11",{"_index":875,"title":{},"body":{"index.html":{}}}],["null",{"_index":58,"title":{},"body":{"classes/BaseContract.html":{}}}],["num",{"_index":369,"title":{},"body":{"classes/Utils.html":{}}}],["number",{"_index":35,"title":{},"body":{"classes/BaseContract.html":{},"interfaces/BaseContractType.html":{},"interfaces/BondArgs.html":{},"interfaces/BondageArgs.html":{},"interfaces/CalcBondRateType.html":{},"interfaces/ContractType.html":{},"classes/Curve.html":{},"interfaces/CurveTerm.html":{},"interfaces/CurveType.html":{},"interfaces/Filter.html":{},"interfaces/InitProvider.html":{},"interfaces/ProviderHandler.html":{},"interfaces/ResponseArgs.html":{},"classes/Subscriber.html":{},"interfaces/SubscriberHandler.html":{},"interfaces/SubscriptionEnd.html":{},"interfaces/SubscriptionInit.html":{},"interfaces/SubscriptionType.html":{},"interfaces/UnbondArgs.html":{},"classes/Utils.html":{},"classes/ZapArbiter.html":{},"classes/ZapDispatch.html":{},"classes/ZapProvider.html":{},"interfaces/ZapProviderType.html":{},"classes/ZapRegistry.html":{},"classes/ZapToken.html":{},"interfaces/listenEvent.html":{},"miscellaneous/variables.html":{}}}],["number(pubkey.valueof",{"_index":728,"title":{},"body":{"classes/ZapRegistry.html":{}}}],["number|undefin",{"_index":95,"title":{},"body":{"interfaces/BaseContractType.html":{},"interfaces/ContractType.html":{}}}],["number}):promis",{"_index":634,"title":{},"body":{"classes/ZapProvider.html":{}}}],["object",{"_index":422,"title":{},"body":{"classes/ZapArbiter.html":{},"classes/ZapDispatch.html":{},"miscellaneous/typealiases.html":{}}}],["offchain",{"_index":489,"title":{},"body":{"classes/ZapDispatch.html":{}}}],["onc",{"_index":693,"title":{},"body":{"classes/ZapRegistry.html":{}}}],["onchainprovid",{"_index":266,"title":{},"body":{"interfaces/ResponseArgs.html":{},"classes/ZapDispatch.html":{}}}],["onchainsubscrib",{"_index":267,"title":{},"body":{"interfaces/ResponseArgs.html":{},"classes/ZapDispatch.html":{}}}],["onchainsubscriber).send({from",{"_index":508,"title":{},"body":{"classes/ZapDispatch.html":{}}}],["onchainsubscriber,from,gas=utils.constants.default_gas}:queryargs):promis",{"_index":501,"title":{},"body":{"classes/ZapDispatch.html":{}}}],["option",{"_index":33,"title":{},"body":{"classes/BaseContract.html":{},"interfaces/BaseContractType.html":{},"interfaces/BondArgs.html":{},"interfaces/BondageArgs.html":{},"interfaces/ContractType.html":{},"classes/Curve.html":{},"interfaces/Filter.html":{},"interfaces/InitProvider.html":{},"interfaces/ResponseArgs.html":{},"classes/Subscriber.html":{},"interfaces/SubscriberHandler.html":{},"interfaces/SubscriptionEnd.html":{},"interfaces/SubscriptionInit.html":{},"interfaces/UnbondArgs.html":{},"classes/Utils.html":{},"classes/ZapArbiter.html":{},"classes/ZapDispatch.html":{},"classes/ZapProvider.html":{},"classes/ZapRegistry.html":{},"classes/ZapToken.html":{},"index.html":{},"interfaces/listenEvent.html":{}}}],["oracl",{"_index":849,"title":{},"body":{"index.html":{}}}],["overview",{"_index":928,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["own",{"_index":568,"title":{},"body":{"classes/ZapProvider.html":{},"classes/ZapRegistry.html":{}}}],["owner",{"_index":39,"title":{},"body":{"classes/BaseContract.html":{},"classes/Subscriber.html":{},"classes/ZapArbiter.html":{},"classes/ZapDispatch.html":{},"classes/ZapProvider.html":{},"classes/ZapRegistry.html":{},"classes/ZapToken.html":{}}}],["owner'",{"_index":43,"title":{},"body":{"classes/BaseContract.html":{},"classes/ZapArbiter.html":{},"classes/ZapDispatch.html":{},"classes/ZapRegistry.html":{},"classes/ZapToken.html":{}}}],["owner:address",{"_index":257,"title":{},"body":{"interfaces/ProviderHandler.html":{}}}],["owner:str",{"_index":345,"title":{},"body":{"interfaces/SubscriberHandler.html":{}}}],["p1\",\"p2",{"_index":904,"title":{},"body":{"index.html":{}}}],["packag",{"_index":788,"title":{"dependencies.html":{}},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["packages/.../constants.t",{"_index":938,"title":{},"body":{"miscellaneous/variables.html":{}}}],["packages/.../index.t",{"_index":846,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["packages/.../types.t",{"_index":933,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["packages/arbiter/src/index.t",{"_index":388,"title":{},"body":{"classes/ZapArbiter.html":{},"miscellaneous/variables.html":{}}}],["packages/arbiter/src/index.ts:10",{"_index":397,"title":{},"body":{"classes/ZapArbiter.html":{}}}],["packages/arbiter/src/index.ts:106",{"_index":421,"title":{},"body":{"classes/ZapArbiter.html":{}}}],["packages/arbiter/src/index.ts:126",{"_index":424,"title":{},"body":{"classes/ZapArbiter.html":{}}}],["packages/arbiter/src/index.ts:146",{"_index":419,"title":{},"body":{"classes/ZapArbiter.html":{}}}],["packages/arbiter/src/index.ts:35",{"_index":413,"title":{},"body":{"classes/ZapArbiter.html":{}}}],["packages/arbiter/src/index.ts:60",{"_index":409,"title":{},"body":{"classes/ZapArbiter.html":{}}}],["packages/arbiter/src/index.ts:75",{"_index":406,"title":{},"body":{"classes/ZapArbiter.html":{}}}],["packages/arbiter/src/index.ts:92",{"_index":404,"title":{},"body":{"classes/ZapArbiter.html":{}}}],["packages/arbiter/src/types.t",{"_index":209,"title":{},"body":{"interfaces/Filter.html":{},"interfaces/SubscriptionEnd.html":{},"interfaces/SubscriptionInit.html":{},"interfaces/SubscriptionType.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["packages/artifacts/src/index.t",{"_index":847,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["packages/basecontract/src/index.t",{"_index":5,"title":{},"body":{"classes/BaseContract.html":{},"miscellaneous/variables.html":{}}}],["packages/basecontract/src/index.ts:12",{"_index":36,"title":{},"body":{"classes/BaseContract.html":{}}}],["packages/basecontract/src/index.ts:13",{"_index":37,"title":{},"body":{"classes/BaseContract.html":{}}}],["packages/basecontract/src/index.ts:14",{"_index":34,"title":{},"body":{"classes/BaseContract.html":{}}}],["packages/basecontract/src/index.ts:15",{"_index":28,"title":{},"body":{"classes/BaseContract.html":{}}}],["packages/basecontract/src/index.ts:49",{"_index":38,"title":{},"body":{"classes/BaseContract.html":{}}}],["packages/basecontract/src/types.t",{"_index":93,"title":{},"body":{"interfaces/BaseContractType.html":{},"interfaces/ContractType.html":{}}}],["packages/bondage/src/index.t",{"_index":945,"title":{},"body":{"miscellaneous/variables.html":{}}}],["packages/bondage/src/types.t",{"_index":99,"title":{},"body":{"interfaces/BondArgs.html":{},"interfaces/BondageArgs.html":{},"interfaces/CalcBondRateType.html":{},"interfaces/UnbondArgs.html":{},"interfaces/listenEvent.html":{},"miscellaneous/typealiases.html":{}}}],["packages/curve/src/index.t",{"_index":116,"title":{},"body":{"classes/Curve.html":{},"miscellaneous/variables.html":{}}}],["packages/curve/src/index.ts:10",{"_index":131,"title":{},"body":{"classes/Curve.html":{}}}],["packages/curve/src/index.ts:11",{"_index":133,"title":{},"body":{"classes/Curve.html":{}}}],["packages/curve/src/index.ts:119",{"_index":141,"title":{},"body":{"classes/Curve.html":{}}}],["packages/curve/src/index.ts:12",{"_index":132,"title":{},"body":{"classes/Curve.html":{}}}],["packages/curve/src/index.ts:13",{"_index":130,"title":{},"body":{"classes/Curve.html":{}}}],["packages/curve/src/index.ts:143",{"_index":145,"title":{},"body":{"classes/Curve.html":{}}}],["packages/curve/src/index.ts:164",{"_index":136,"title":{},"body":{"classes/Curve.html":{}}}],["packages/curve/src/index.ts:33",{"_index":143,"title":{},"body":{"classes/Curve.html":{}}}],["packages/curve/src/index.ts:66",{"_index":155,"title":{},"body":{"classes/Curve.html":{}}}],["packages/curve/src/index.ts:94",{"_index":150,"title":{},"body":{"classes/Curve.html":{}}}],["packages/curve/src/types.t",{"_index":208,"title":{},"body":{"interfaces/CurveTerm.html":{},"interfaces/CurveType.html":{}}}],["packages/dispatch/src/index.t",{"_index":474,"title":{},"body":{"classes/ZapDispatch.html":{},"miscellaneous/variables.html":{}}}],["packages/dispatch/src/index.ts:104",{"_index":481,"title":{},"body":{"classes/ZapDispatch.html":{}}}],["packages/dispatch/src/index.ts:116",{"_index":486,"title":{},"body":{"classes/ZapDispatch.html":{}}}],["packages/dispatch/src/index.ts:125",{"_index":483,"title":{},"body":{"classes/ZapDispatch.html":{}}}],["packages/dispatch/src/index.ts:13",{"_index":479,"title":{},"body":{"classes/ZapDispatch.html":{}}}],["packages/dispatch/src/index.ts:134",{"_index":488,"title":{},"body":{"classes/ZapDispatch.html":{}}}],["packages/dispatch/src/index.ts:30",{"_index":492,"title":{},"body":{"classes/ZapDispatch.html":{}}}],["packages/dispatch/src/index.ts:58",{"_index":495,"title":{},"body":{"classes/ZapDispatch.html":{}}}],["packages/dispatch/src/types.t",{"_index":261,"title":{},"body":{"interfaces/ResponseArgs.html":{},"miscellaneous/typealiases.html":{}}}],["packages/provider/src/index.t",{"_index":539,"title":{},"body":{"classes/ZapProvider.html":{},"miscellaneous/variables.html":{}}}],["packages/provider/src/index.ts:102",{"_index":567,"title":{},"body":{"classes/ZapProvider.html":{}}}],["packages/provider/src/index.ts:115",{"_index":572,"title":{},"body":{"classes/ZapProvider.html":{}}}],["packages/provider/src/index.ts:127",{"_index":574,"title":{},"body":{"classes/ZapProvider.html":{}}}],["packages/provider/src/index.ts:138",{"_index":562,"title":{},"body":{"classes/ZapProvider.html":{}}}],["packages/provider/src/index.ts:15",{"_index":554,"title":{},"body":{"classes/ZapProvider.html":{}}}],["packages/provider/src/index.ts:153",{"_index":584,"title":{},"body":{"classes/ZapProvider.html":{}}}],["packages/provider/src/index.ts:16",{"_index":553,"title":{},"body":{"classes/ZapProvider.html":{}}}],["packages/provider/src/index.ts:17",{"_index":558,"title":{},"body":{"classes/ZapProvider.html":{}}}],["packages/provider/src/index.ts:174",{"_index":586,"title":{},"body":{"classes/ZapProvider.html":{}}}],["packages/provider/src/index.ts:18",{"_index":557,"title":{},"body":{"classes/ZapProvider.html":{}}}],["packages/provider/src/index.ts:19",{"_index":556,"title":{},"body":{"classes/ZapProvider.html":{}}}],["packages/provider/src/index.ts:195",{"_index":582,"title":{},"body":{"classes/ZapProvider.html":{}}}],["packages/provider/src/index.ts:20",{"_index":559,"title":{},"body":{"classes/ZapProvider.html":{}}}],["packages/provider/src/index.ts:21",{"_index":552,"title":{},"body":{"classes/ZapProvider.html":{}}}],["packages/provider/src/index.ts:216",{"_index":587,"title":{},"body":{"classes/ZapProvider.html":{}}}],["packages/provider/src/index.ts:22",{"_index":555,"title":{},"body":{"classes/ZapProvider.html":{}}}],["packages/provider/src/index.ts:23",{"_index":551,"title":{},"body":{"classes/ZapProvider.html":{}}}],["packages/provider/src/index.ts:48",{"_index":576,"title":{},"body":{"classes/ZapProvider.html":{}}}],["packages/provider/src/index.ts:62",{"_index":580,"title":{},"body":{"classes/ZapProvider.html":{}}}],["packages/provider/src/index.ts:76",{"_index":570,"title":{},"body":{"classes/ZapProvider.html":{}}}],["packages/provider/src/index.ts:89",{"_index":569,"title":{},"body":{"classes/ZapProvider.html":{}}}],["packages/provider/src/types.t",{"_index":236,"title":{},"body":{"interfaces/ProviderHandler.html":{},"miscellaneous/typealiases.html":{}}}],["packages/registry/src/index.t",{"_index":664,"title":{},"body":{"classes/ZapRegistry.html":{},"miscellaneous/variables.html":{}}}],["packages/registry/src/index.ts:100",{"_index":686,"title":{},"body":{"classes/ZapRegistry.html":{}}}],["packages/registry/src/index.ts:112",{"_index":682,"title":{},"body":{"classes/ZapRegistry.html":{}}}],["packages/registry/src/index.ts:125",{"_index":679,"title":{},"body":{"classes/ZapRegistry.html":{}}}],["packages/registry/src/index.ts:137",{"_index":676,"title":{},"body":{"classes/ZapRegistry.html":{}}}],["packages/registry/src/index.ts:15",{"_index":674,"title":{},"body":{"classes/ZapRegistry.html":{}}}],["packages/registry/src/index.ts:156",{"_index":695,"title":{},"body":{"classes/ZapRegistry.html":{}}}],["packages/registry/src/index.ts:165",{"_index":699,"title":{},"body":{"classes/ZapRegistry.html":{}}}],["packages/registry/src/index.ts:174",{"_index":697,"title":{},"body":{"classes/ZapRegistry.html":{}}}],["packages/registry/src/index.ts:31",{"_index":687,"title":{},"body":{"classes/ZapRegistry.html":{}}}],["packages/registry/src/index.ts:52",{"_index":691,"title":{},"body":{"classes/ZapRegistry.html":{}}}],["packages/registry/src/index.ts:78",{"_index":701,"title":{},"body":{"classes/ZapRegistry.html":{}}}],["packages/registry/src/index.ts:90",{"_index":684,"title":{},"body":{"classes/ZapRegistry.html":{}}}],["packages/registry/src/types.t",{"_index":226,"title":{},"body":{"interfaces/InitProvider.html":{},"miscellaneous/typealiases.html":{}}}],["packages/subscriber/src/index.t",{"_index":270,"title":{},"body":{"classes/Subscriber.html":{},"miscellaneous/variables.html":{}}}],["packages/subscriber/src/index.ts:103",{"_index":289,"title":{},"body":{"classes/Subscriber.html":{}}}],["packages/subscriber/src/index.ts:12",{"_index":280,"title":{},"body":{"classes/Subscriber.html":{}}}],["packages/subscriber/src/index.ts:13",{"_index":279,"title":{},"body":{"classes/Subscriber.html":{}}}],["packages/subscriber/src/index.ts:14",{"_index":283,"title":{},"body":{"classes/Subscriber.html":{}}}],["packages/subscriber/src/index.ts:15",{"_index":282,"title":{},"body":{"classes/Subscriber.html":{}}}],["packages/subscriber/src/index.ts:16",{"_index":281,"title":{},"body":{"classes/Subscriber.html":{}}}],["packages/subscriber/src/index.ts:17",{"_index":284,"title":{},"body":{"classes/Subscriber.html":{}}}],["packages/subscriber/src/index.ts:18",{"_index":277,"title":{},"body":{"classes/Subscriber.html":{}}}],["packages/subscriber/src/index.ts:39",{"_index":287,"title":{},"body":{"classes/Subscriber.html":{}}}],["packages/subscriber/src/index.ts:66",{"_index":296,"title":{},"body":{"classes/Subscriber.html":{}}}],["packages/subscriber/src/index.ts:82",{"_index":293,"title":{},"body":{"classes/Subscriber.html":{}}}],["packages/subscriber/src/types.t",{"_index":340,"title":{},"body":{"interfaces/SubscriberHandler.html":{},"miscellaneous/typealiases.html":{}}}],["packages/utils/src/constants.t",{"_index":950,"title":{},"body":{"miscellaneous/variables.html":{}}}],["packages/utils/src/index.t",{"_index":348,"title":{},"body":{"classes/Utils.html":{},"miscellaneous/variables.html":{}}}],["packages/utils/src/index.ts:105",{"_index":364,"title":{},"body":{"classes/Utils.html":{}}}],["packages/utils/src/index.ts:106",{"_index":365,"title":{},"body":{"classes/Utils.html":{}}}],["packages/utils/src/index.ts:107",{"_index":361,"title":{},"body":{"classes/Utils.html":{}}}],["packages/utils/src/index.ts:108",{"_index":366,"title":{},"body":{"classes/Utils.html":{}}}],["packages/utils/src/index.ts:109",{"_index":363,"title":{},"body":{"classes/Utils.html":{}}}],["packages/utils/src/index.ts:18",{"_index":380,"title":{},"body":{"classes/Utils.html":{}}}],["packages/utils/src/index.ts:31",{"_index":371,"title":{},"body":{"classes/Utils.html":{}}}],["packages/utils/src/index.ts:35",{"_index":374,"title":{},"body":{"classes/Utils.html":{}}}],["packages/utils/src/index.ts:62",{"_index":382,"title":{},"body":{"classes/Utils.html":{}}}],["packages/utils/src/index.ts:71",{"_index":368,"title":{},"body":{"classes/Utils.html":{}}}],["packages/utils/src/index.ts:80",{"_index":378,"title":{},"body":{"classes/Utils.html":{}}}],["packages/utils/src/migrations/contracts/index.t",{"_index":962,"title":{},"body":{"miscellaneous/variables.html":{}}}],["packages/utils/src/migrations/index.t",{"_index":946,"title":{},"body":{"miscellaneous/variables.html":{}}}],["packages/utils/src/types.t",{"_index":651,"title":{},"body":{"interfaces/ZapProviderType.html":{},"miscellaneous/typealiases.html":{}}}],["packages/zaptoken/src/index.t",{"_index":751,"title":{},"body":{"classes/ZapToken.html":{}}}],["packages/zaptoken/src/index.ts:14",{"_index":756,"title":{},"body":{"classes/ZapToken.html":{}}}],["packages/zaptoken/src/index.ts:26",{"_index":763,"title":{},"body":{"classes/ZapToken.html":{}}}],["packages/zaptoken/src/index.ts:39",{"_index":765,"title":{},"body":{"classes/ZapToken.html":{}}}],["packages/zaptoken/src/index.ts:52",{"_index":759,"title":{},"body":{"classes/ZapToken.html":{}}}],["packages/zaptoken/src/index.ts:65",{"_index":761,"title":{},"body":{"classes/ZapToken.html":{}}}],["packages/zaptoken/src/types.t",{"_index":934,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["packages/{package_nam",{"_index":887,"title":{},"body":{"index.html":{}}}],["param",{"_index":56,"title":{},"body":{"classes/BaseContract.html":{},"classes/Curve.html":{},"classes/Subscriber.html":{},"classes/Utils.html":{},"classes/ZapArbiter.html":{},"classes/ZapDispatch.html":{},"classes/ZapProvider.html":{},"classes/ZapRegistry.html":{},"classes/ZapToken.html":{}}}],["paramet",{"_index":29,"title":{},"body":{"classes/BaseContract.html":{},"classes/Curve.html":{},"classes/Subscriber.html":{},"classes/Utils.html":{},"classes/ZapArbiter.html":{},"classes/ZapDispatch.html":{},"classes/ZapProvider.html":{},"classes/ZapRegistry.html":{},"classes/ZapToken.html":{}}}],["params).send({from",{"_index":724,"title":{},"body":{"classes/ZapRegistry.html":{}}}],["params.endpointparam",{"_index":741,"title":{},"body":{"classes/ZapRegistry.html":{}}}],["params:array",{"_index":706,"title":{},"body":{"classes/ZapRegistry.html":{}}}],["parent",{"_index":7,"title":{},"body":{"classes/BaseContract.html":{}}}],["part",{"_index":121,"title":{},"body":{"classes/Curve.html":{},"interfaces/CurveTerm.html":{},"interfaces/CurveType.html":{},"interfaces/ProviderHandler.html":{},"classes/ZapProvider.html":{},"index.html":{}}}],["path",{"_index":811,"title":{},"body":{"dependencies.html":{}}}],["per",{"_index":694,"title":{},"body":{"classes/ZapRegistry.html":{}}}],["piec",{"_index":122,"title":{},"body":{"classes/Curve.html":{}}}],["piecewis",{"_index":172,"title":{},"body":{"classes/Curve.html":{}}}],["platform",{"_index":855,"title":{},"body":{"index.html":{}}}],["pleas",{"_index":912,"title":{},"body":{"index.html":{}}}],["port",{"_index":655,"title":{},"body":{"interfaces/ZapProviderType.html":{}}}],["power",{"_index":158,"title":{},"body":{"classes/Curve.html":{},"interfaces/CurveTerm.html":{},"interfaces/CurveType.html":{}}}],["prerequisit",{"_index":870,"title":{},"body":{"index.html":{}}}],["prettier",{"_index":813,"title":{},"body":{"dependencies.html":{}}}],["prev",{"_index":189,"title":{},"body":{"classes/Curve.html":{}}}],["price",{"_index":151,"title":{},"body":{"classes/Curve.html":{}}}],["privat",{"_index":206,"title":{},"body":{"classes/Curve.html":{}}}],["process",{"_index":918,"title":{},"body":{"index.html":{}}}],["project",{"_index":857,"title":{},"body":{"index.html":{}}}],["promis",{"_index":42,"title":{},"body":{"classes/BaseContract.html":{},"classes/Subscriber.html":{},"classes/ZapArbiter.html":{},"classes/ZapDispatch.html":{},"classes/ZapProvider.html":{},"classes/ZapRegistry.html":{},"classes/ZapToken.html":{},"dependencies.html":{}}}],["promisify(migrate.run",{"_index":947,"title":{},"body":{"miscellaneous/variables.html":{}}}],["properti",{"_index":19,"title":{},"body":{"classes/BaseContract.html":{},"interfaces/BaseContractType.html":{},"interfaces/BondArgs.html":{},"interfaces/BondageArgs.html":{},"interfaces/CalcBondRateType.html":{},"interfaces/ContractType.html":{},"classes/Curve.html":{},"interfaces/CurveTerm.html":{},"interfaces/CurveType.html":{},"interfaces/Filter.html":{},"interfaces/InitProvider.html":{},"interfaces/ProviderHandler.html":{},"interfaces/ResponseArgs.html":{},"classes/Subscriber.html":{},"interfaces/SubscriberHandler.html":{},"interfaces/SubscriptionEnd.html":{},"interfaces/SubscriptionInit.html":{},"interfaces/SubscriptionType.html":{},"interfaces/UnbondArgs.html":{},"classes/Utils.html":{},"classes/ZapArbiter.html":{},"classes/ZapDispatch.html":{},"classes/ZapProvider.html":{},"interfaces/ZapProviderType.html":{},"classes/ZapRegistry.html":{},"classes/ZapToken.html":{},"interfaces/listenEvent.html":{}}}],["provid",{"_index":13,"title":{},"body":{"classes/BaseContract.html":{},"interfaces/BondArgs.html":{},"interfaces/BondageArgs.html":{},"interfaces/CalcBondRateType.html":{},"interfaces/Filter.html":{},"interfaces/InitProvider.html":{},"interfaces/ResponseArgs.html":{},"classes/Subscriber.html":{},"interfaces/SubscriptionEnd.html":{},"interfaces/SubscriptionInit.html":{},"interfaces/SubscriptionType.html":{},"interfaces/UnbondArgs.html":{},"classes/Utils.html":{},"classes/ZapArbiter.html":{},"classes/ZapDispatch.html":{},"classes/ZapProvider.html":{},"interfaces/ZapProviderType.html":{},"classes/ZapRegistry.html":{},"classes/ZapToken.html":{},"index.html":{},"interfaces/listenEvent.html":{}}}],["provider'",{"_index":415,"title":{},"body":{"classes/ZapArbiter.html":{},"classes/ZapDispatch.html":{},"classes/ZapRegistry.html":{}}}],["provider:address",{"_index":215,"title":{},"body":{"interfaces/Filter.html":{},"interfaces/InitProvider.html":{},"interfaces/ResponseArgs.html":{},"interfaces/SubscriptionEnd.html":{},"interfaces/SubscriptionInit.html":{},"interfaces/SubscriptionType.html":{}}}],["provider:str",{"_index":344,"title":{},"body":{"interfaces/SubscriberHandler.html":{}}}],["provider?:address",{"_index":220,"title":{},"body":{"interfaces/Filter.html":{},"interfaces/SubscriptionEnd.html":{},"interfaces/SubscriptionInit.html":{},"interfaces/SubscriptionType.html":{}}}],["providerconstructortyp",{"_index":256,"title":{},"body":{"interfaces/ProviderHandler.html":{},"classes/ZapProvider.html":{},"miscellaneous/typealiases.html":{}}}],["providerconstructortype,providerhandler,address,txid",{"_index":591,"title":{},"body":{"classes/ZapProvider.html":{}}}],["providerhand",{"_index":893,"title":{},"body":{"index.html":{}}}],["providerhandl",{"_index":235,"title":{"interfaces/ProviderHandler.html":{}},"body":{"interfaces/ProviderHandler.html":{},"classes/ZapProvider.html":{},"index.html":{}}}],["providerown",{"_index":540,"title":{},"body":{"classes/ZapProvider.html":{}}}],["providerowner:str",{"_index":595,"title":{},"body":{"classes/ZapProvider.html":{}}}],["providerpubkey",{"_index":334,"title":{},"body":{"classes/Subscriber.html":{}}}],["pstart",{"_index":194,"title":{},"body":{"classes/Curve.html":{}}}],["pubkey",{"_index":347,"title":{},"body":{"interfaces/SubscriptionInit.html":{},"classes/ZapArbiter.html":{},"classes/ZapProvider.html":{},"interfaces/ZapProviderType.html":{}}}],["pubkey:numb",{"_index":218,"title":{},"body":{"interfaces/Filter.html":{},"interfaces/SubscriptionEnd.html":{},"interfaces/SubscriptionInit.html":{},"interfaces/SubscriptionType.html":{},"interfaces/ZapProviderType.html":{}}}],["pubkey:number|str",{"_index":597,"title":{},"body":{"classes/ZapProvider.html":{}}}],["pubkey:str",{"_index":726,"title":{},"body":{"classes/ZapRegistry.html":{}}}],["public",{"_index":118,"title":{},"body":{"classes/Curve.html":{},"classes/ZapArbiter.html":{},"classes/ZapProvider.html":{},"classes/ZapRegistry.html":{},"index.html":{}}}],["public_key",{"_index":227,"title":{},"body":{"interfaces/InitProvider.html":{},"interfaces/ProviderHandler.html":{},"classes/ZapProvider.html":{},"classes/ZapRegistry.html":{}}}],["public_key:111",{"_index":901,"title":{},"body":{"index.html":{}}}],["pull",{"_index":920,"title":{},"body":{"index.html":{}}}],["purpos",{"_index":869,"title":{},"body":{"index.html":{}}}],["queri",{"_index":265,"title":{},"body":{"interfaces/ResponseArgs.html":{},"classes/ZapDispatch.html":{},"classes/ZapProvider.html":{}}}],["queryarg",{"_index":264,"title":{},"body":{"interfaces/ResponseArgs.html":{},"classes/ZapDispatch.html":{},"miscellaneous/typealiases.html":{}}}],["queryargs,responseargs,filter,txid",{"_index":497,"title":{},"body":{"classes/ZapDispatch.html":{}}}],["querydata",{"_index":478,"title":{},"body":{"classes/ZapDispatch.html":{}}}],["querydata(undefin",{"_index":491,"title":{},"body":{"classes/ZapDispatch.html":{}}}],["querydata({provid",{"_index":500,"title":{},"body":{"classes/ZapDispatch.html":{}}}],["queryid",{"_index":251,"title":{},"body":{"interfaces/ProviderHandler.html":{},"interfaces/ResponseArgs.html":{},"classes/ZapDispatch.html":{},"classes/ZapProvider.html":{}}}],["queryid:str",{"_index":253,"title":{},"body":{"interfaces/ProviderHandler.html":{}}}],["rang",{"_index":186,"title":{},"body":{"classes/Curve.html":{}}}],["re",{"_index":630,"title":{},"body":{"classes/ZapProvider.html":{}}}],["read",{"_index":913,"title":{},"body":{"index.html":{}}}],["readdirsync",{"_index":383,"title":{},"body":{"classes/Utils.html":{}}}],["receiv",{"_index":496,"title":{},"body":{"classes/ZapDispatch.html":{}}}],["refer",{"_index":191,"title":{},"body":{"classes/Curve.html":{}}}],["registr",{"_index":665,"title":{},"body":{"classes/ZapRegistry.html":{}}}],["registri",{"_index":12,"title":{},"body":{"classes/BaseContract.html":{},"classes/ZapProvider.html":{},"classes/ZapRegistry.html":{}}}],["repositori",{"_index":853,"title":{},"body":{"index.html":{}}}],["request",{"_index":329,"title":{},"body":{"classes/Subscriber.html":{},"index.html":{}}}],["requir",{"_index":303,"title":{},"body":{"classes/Subscriber.html":{},"classes/ZapArbiter.html":{},"classes/ZapDispatch.html":{},"classes/ZapProvider.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["require(\"./const",{"_index":362,"title":{},"body":{"classes/Utils.html":{}}}],["require(\"assert",{"_index":589,"title":{},"body":{"classes/ZapProvider.html":{},"miscellaneous/variables.html":{}}}],["require(\"path",{"_index":963,"title":{},"body":{"miscellaneous/variables.html":{}}}],["require(\"requir",{"_index":959,"title":{},"body":{"miscellaneous/variables.html":{}}}],["require(\"truffl",{"_index":955,"title":{},"body":{"miscellaneous/variables.html":{}}}],["require(\"web3",{"_index":162,"title":{},"body":{"classes/Curve.html":{},"classes/Utils.html":{},"classes/ZapProvider.html":{},"classes/ZapRegistry.html":{},"miscellaneous/variables.html":{}}}],["require('assert",{"_index":297,"title":{},"body":{"classes/Subscriber.html":{},"miscellaneous/variables.html":{}}}],["require('ev",{"_index":594,"title":{},"body":{"classes/ZapProvider.html":{},"miscellaneous/variables.html":{}}}],["require('f",{"_index":949,"title":{},"body":{"miscellaneous/variables.html":{}}}],["require('ganach",{"_index":948,"title":{},"body":{"miscellaneous/variables.html":{}}}],["require('web3",{"_index":47,"title":{},"body":{"classes/BaseContract.html":{},"classes/Utils.html":{},"miscellaneous/variables.html":{}}}],["requireal",{"_index":942,"title":{},"body":{"miscellaneous/variables.html":{}}}],["res:str",{"_index":896,"title":{},"body":{"index.html":{}}}],["resolv",{"_index":820,"title":{},"body":{"dependencies.html":{}}}],["respond",{"_index":252,"title":{},"body":{"interfaces/ProviderHandler.html":{},"classes/ZapDispatch.html":{},"classes/ZapProvider.html":{},"miscellaneous/typealiases.html":{}}}],["respond(undefin",{"_index":494,"title":{},"body":{"classes/ZapDispatch.html":{},"classes/ZapProvider.html":{}}}],["respond({queryid",{"_index":509,"title":{},"body":{"classes/ZapDispatch.html":{},"classes/ZapProvider.html":{}}}],["respons",{"_index":490,"title":{},"body":{"classes/ZapDispatch.html":{},"classes/ZapProvider.html":{}}}],["responsearg",{"_index":260,"title":{"interfaces/ResponseArgs.html":{}},"body":{"interfaces/ResponseArgs.html":{},"classes/ZapDispatch.html":{}}}],["responseparam",{"_index":254,"title":{},"body":{"interfaces/ProviderHandler.html":{},"interfaces/ResponseArgs.html":{},"classes/ZapDispatch.html":{},"classes/ZapProvider.html":{}}}],["responseparams).send({from,ga",{"_index":512,"title":{},"body":{"classes/ZapDispatch.html":{}}}],["responseparams.length",{"_index":514,"title":{},"body":{"classes/ZapDispatch.html":{}}}],["responseparams[0",{"_index":520,"title":{},"body":{"classes/ZapDispatch.html":{}}}],["responseparams[0]).send",{"_index":517,"title":{},"body":{"classes/ZapDispatch.html":{}}}],["responseparams[1",{"_index":523,"title":{},"body":{"classes/ZapDispatch.html":{}}}],["responseparams[1]).send",{"_index":521,"title":{},"body":{"classes/ZapDispatch.html":{}}}],["responseparams[2",{"_index":527,"title":{},"body":{"classes/ZapDispatch.html":{}}}],["responseparams[2]).send",{"_index":524,"title":{},"body":{"classes/ZapDispatch.html":{}}}],["responseparams[3]).send",{"_index":528,"title":{},"body":{"classes/ZapDispatch.html":{}}}],["result",{"_index":90,"title":{},"body":{"classes/BaseContract.html":{},"interfaces/BaseContractType.html":{},"interfaces/BondArgs.html":{},"interfaces/BondageArgs.html":{},"interfaces/CalcBondRateType.html":{},"interfaces/ContractType.html":{},"classes/Curve.html":{},"interfaces/CurveTerm.html":{},"interfaces/CurveType.html":{},"interfaces/Filter.html":{},"interfaces/InitProvider.html":{},"interfaces/ProviderHandler.html":{},"interfaces/ResponseArgs.html":{},"classes/Subscriber.html":{},"interfaces/SubscriberHandler.html":{},"interfaces/SubscriptionEnd.html":{},"interfaces/SubscriptionInit.html":{},"interfaces/SubscriptionType.html":{},"interfaces/UnbondArgs.html":{},"classes/Utils.html":{},"classes/ZapArbiter.html":{},"classes/ZapDispatch.html":{},"classes/ZapProvider.html":{},"interfaces/ZapProviderType.html":{},"classes/ZapRegistry.html":{},"classes/ZapToken.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"interfaces/listenEvent.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["result:str",{"_index":636,"title":{},"body":{"classes/ZapProvider.html":{}}}],["return",{"_index":41,"title":{},"body":{"classes/BaseContract.html":{},"classes/Curve.html":{},"classes/Subscriber.html":{},"classes/Utils.html":{},"classes/ZapArbiter.html":{},"classes/ZapDispatch.html":{},"classes/ZapProvider.html":{},"classes/ZapRegistry.html":{},"classes/ZapToken.html":{}}}],["run",{"_index":809,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["run_testpackag",{"_index":888,"title":{},"body":{"index.html":{}}}],["see",{"_index":921,"title":{},"body":{"index.html":{}}}],["send",{"_index":755,"title":{},"body":{"classes/ZapToken.html":{}}}],["send(undefin",{"_index":764,"title":{},"body":{"classes/ZapToken.html":{}}}],["send({from",{"_index":456,"title":{},"body":{"classes/ZapArbiter.html":{},"classes/ZapRegistry.html":{}}}],["send({from,ga",{"_index":713,"title":{},"body":{"classes/ZapRegistry.html":{}}}],["send({to",{"_index":773,"title":{},"body":{"classes/ZapToken.html":{}}}],["serv",{"_index":859,"title":{},"body":{"index.html":{}}}],["serveroptionstyp",{"_index":652,"title":{},"body":{"interfaces/ZapProviderType.html":{},"miscellaneous/typealiases.html":{}}}],["set",{"_index":692,"title":{},"body":{"classes/ZapRegistry.html":{}}}],["setendpointparam",{"_index":673,"title":{},"body":{"classes/ZapRegistry.html":{}}}],["setendpointparams(undefin",{"_index":700,"title":{},"body":{"classes/ZapRegistry.html":{}}}],["setendpointparams({endpoint",{"_index":719,"title":{},"body":{"classes/ZapRegistry.html":{}}}],["singl",{"_index":885,"title":{},"body":{"index.html":{}}}],["softwar",{"_index":873,"title":{},"body":{"index.html":{}}}],["sourc",{"_index":3,"title":{},"body":{"classes/BaseContract.html":{},"interfaces/BaseContractType.html":{},"interfaces/BondArgs.html":{},"interfaces/BondageArgs.html":{},"interfaces/CalcBondRateType.html":{},"interfaces/ContractType.html":{},"classes/Curve.html":{},"interfaces/CurveTerm.html":{},"interfaces/CurveType.html":{},"interfaces/Filter.html":{},"interfaces/InitProvider.html":{},"interfaces/ProviderHandler.html":{},"interfaces/ResponseArgs.html":{},"classes/Subscriber.html":{},"interfaces/SubscriberHandler.html":{},"interfaces/SubscriptionEnd.html":{},"interfaces/SubscriptionInit.html":{},"interfaces/SubscriptionType.html":{},"interfaces/UnbondArgs.html":{},"classes/Utils.html":{},"classes/ZapArbiter.html":{},"classes/ZapDispatch.html":{},"classes/ZapProvider.html":{},"interfaces/ZapProviderType.html":{},"classes/ZapRegistry.html":{},"classes/ZapToken.html":{},"interfaces/listenEvent.html":{}}}],["specif",{"_index":507,"title":{},"body":{"classes/ZapDispatch.html":{}}}],["specifi",{"_index":372,"title":{},"body":{"classes/Utils.html":{},"classes/ZapArbiter.html":{}}}],["start",{"_index":414,"title":{"index.html":{}},"body":{"classes/ZapArbiter.html":{},"index.html":{}}}],["startganacheserv",{"_index":354,"title":{},"body":{"classes/Utils.html":{}}}],["static",{"_index":350,"title":{},"body":{"classes/Utils.html":{}}}],["str",{"_index":375,"title":{},"body":{"classes/Utils.html":{}}}],["string",{"_index":57,"title":{},"body":{"classes/BaseContract.html":{},"interfaces/BaseContractType.html":{},"interfaces/BondArgs.html":{},"interfaces/BondageArgs.html":{},"interfaces/CalcBondRateType.html":{},"interfaces/ContractType.html":{},"interfaces/Filter.html":{},"interfaces/InitProvider.html":{},"interfaces/ProviderHandler.html":{},"interfaces/ResponseArgs.html":{},"classes/Subscriber.html":{},"interfaces/SubscriberHandler.html":{},"interfaces/SubscriptionEnd.html":{},"interfaces/SubscriptionInit.html":{},"interfaces/SubscriptionType.html":{},"interfaces/UnbondArgs.html":{},"classes/Utils.html":{},"classes/ZapArbiter.html":{},"classes/ZapDispatch.html":{},"classes/ZapProvider.html":{},"interfaces/ZapProviderType.html":{},"classes/ZapRegistry.html":{},"classes/ZapToken.html":{},"interfaces/listenEvent.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["string|object",{"_index":248,"title":{},"body":{"interfaces/ProviderHandler.html":{}}}],["string|undefin",{"_index":94,"title":{},"body":{"interfaces/BaseContractType.html":{},"interfaces/ContractType.html":{}}}],["structur",{"_index":128,"title":{},"body":{"classes/Curve.html":{}}}],["submit",{"_index":919,"title":{},"body":{"index.html":{}}}],["subscrib",{"_index":107,"title":{"classes/Subscriber.html":{}},"body":{"interfaces/BondArgs.html":{},"interfaces/BondageArgs.html":{},"interfaces/CalcBondRateType.html":{},"interfaces/Filter.html":{},"interfaces/ProviderHandler.html":{},"classes/Subscriber.html":{},"interfaces/SubscriptionEnd.html":{},"interfaces/SubscriptionInit.html":{},"interfaces/SubscriptionType.html":{},"interfaces/UnbondArgs.html":{},"classes/ZapArbiter.html":{},"classes/ZapDispatch.html":{},"classes/ZapProvider.html":{},"interfaces/listenEvent.html":{}}}],["subscribe(undefin",{"_index":291,"title":{},"body":{"classes/Subscriber.html":{}}}],["subscribe({provid",{"_index":332,"title":{},"body":{"classes/Subscriber.html":{}}}],["subscriber:address",{"_index":223,"title":{},"body":{"interfaces/Filter.html":{},"interfaces/ProviderHandler.html":{},"interfaces/SubscriptionEnd.html":{},"interfaces/SubscriptionInit.html":{},"interfaces/SubscriptionType.html":{}}}],["subscriberconstructortyp",{"_index":276,"title":{},"body":{"classes/Subscriber.html":{},"interfaces/SubscriberHandler.html":{},"miscellaneous/typealiases.html":{}}}],["subscriberhandl",{"_index":278,"title":{"interfaces/SubscriberHandler.html":{}},"body":{"classes/Subscriber.html":{},"interfaces/SubscriberHandler.html":{}}}],["subscriberown",{"_index":271,"title":{},"body":{"classes/Subscriber.html":{}}}],["subscriberowner:str",{"_index":300,"title":{},"body":{"classes/Subscriber.html":{}}}],["subscribetyp",{"_index":292,"title":{},"body":{"classes/Subscriber.html":{},"interfaces/SubscriberHandler.html":{},"miscellaneous/typealiases.html":{}}}],["subscript",{"_index":410,"title":{},"body":{"classes/ZapArbiter.html":{},"classes/ZapProvider.html":{}}}],["subscriptionend",{"_index":219,"title":{"interfaces/SubscriptionEnd.html":{}},"body":{"interfaces/Filter.html":{},"interfaces/SubscriptionEnd.html":{},"interfaces/SubscriptionInit.html":{},"interfaces/SubscriptionType.html":{},"classes/ZapArbiter.html":{}}}],["subscriptioninit",{"_index":214,"title":{"interfaces/SubscriptionInit.html":{}},"body":{"interfaces/Filter.html":{},"interfaces/SubscriptionEnd.html":{},"interfaces/SubscriptionInit.html":{},"interfaces/SubscriptionType.html":{},"classes/ZapArbiter.html":{}}}],["subscriptioninit):promis",{"_index":439,"title":{},"body":{"classes/ZapArbiter.html":{}}}],["subscriptioninit,subscriptionend,filter,subscriptiontype,txid",{"_index":428,"title":{},"body":{"classes/ZapArbiter.html":{}}}],["subscriptiontyp",{"_index":222,"title":{"interfaces/SubscriptionType.html":{}},"body":{"interfaces/Filter.html":{},"interfaces/SubscriptionEnd.html":{},"interfaces/SubscriptionInit.html":{},"interfaces/SubscriptionType.html":{},"classes/ZapArbiter.html":{}}}],["success",{"_index":784,"title":{},"body":{"classes/ZapToken.html":{}}}],["sum",{"_index":207,"title":{},"body":{"classes/Curve.html":{}}}],["super({artifactsdir,artifactname:\"dispatch\",networkid,networkprovid",{"_index":499,"title":{},"body":{"classes/ZapDispatch.html":{}}}],["super({artifactsdir,artifactname:\"registry\",networkid,networkprovid",{"_index":704,"title":{},"body":{"classes/ZapRegistry.html":{}}}],["super({artifactsdir,artifactname:\"zaptoken\",networkid,networkprovid",{"_index":769,"title":{},"body":{"classes/ZapToken.html":{}}}],["super({artifactsdir,artifactname:'arbiter',networkid,networkprovid",{"_index":435,"title":{},"body":{"classes/ZapArbiter.html":{}}}],["switch",{"_index":513,"title":{},"body":{"classes/ZapDispatch.html":{}}}],["term",{"_index":138,"title":{},"body":{"classes/Curve.html":{}}}],["term.coef",{"_index":198,"title":{},"body":{"classes/Curve.html":{}}}],["term.pow",{"_index":197,"title":{},"body":{"classes/Curve.html":{}}}],["termin",{"_index":210,"title":{},"body":{"interfaces/Filter.html":{},"interfaces/ProviderHandler.html":{},"interfaces/SubscriptionEnd.html":{},"interfaces/SubscriptionInit.html":{},"interfaces/SubscriptionType.html":{},"classes/ZapProvider.html":{}}}],["test",{"_index":868,"title":{},"body":{"index.html":{}}}],["testendpoint",{"_index":903,"title":{},"body":{"index.html":{}}}],["testrun",{"_index":884,"title":{},"body":{"index.html":{}}}],["testtitl",{"_index":902,"title":{},"body":{"index.html":{}}}],["theme",{"_index":832,"title":{},"body":{"dependencies.html":{}}}],["thing",{"_index":871,"title":{},"body":{"index.html":{}}}],["this.checkvalid",{"_index":169,"title":{},"body":{"classes/Curve.html":{}}}],["this.const",{"_index":165,"title":{},"body":{"classes/Curve.html":{}}}],["this.constants.length",{"_index":176,"title":{},"body":{"classes/Curve.html":{}}}],["this.constants.map((item",{"_index":200,"title":{},"body":{"classes/Curve.html":{}}}],["this.contract",{"_index":82,"title":{},"body":{"classes/BaseContract.html":{}}}],["this.contract.ev",{"_index":465,"title":{},"body":{"classes/ZapArbiter.html":{}}}],["this.contract.events.allev",{"_index":531,"title":{},"body":{"classes/ZapDispatch.html":{}}}],["this.contract.events.allevents(filt",{"_index":746,"title":{},"body":{"classes/ZapRegistry.html":{}}}],["this.contract.events.allevents({fromblock",{"_index":473,"title":{},"body":{"classes/ZapArbiter.html":{}}}],["this.contract.events.datapurchas",{"_index":470,"title":{},"body":{"classes/ZapArbiter.html":{}}}],["this.contract.events.fulfillquery(filt",{"_index":535,"title":{},"body":{"classes/ZapDispatch.html":{}}}],["this.contract.events.incoming(filt",{"_index":533,"title":{},"body":{"classes/ZapDispatch.html":{}}}],["this.contract.events.newcurve(provid",{"_index":750,"title":{},"body":{"classes/ZapRegistry.html":{}}}],["this.contract.events.newprovider(filt",{"_index":748,"title":{},"body":{"classes/ZapRegistry.html":{}}}],["this.contract.events.offchainresponse(filt",{"_index":537,"title":{},"body":{"classes/ZapDispatch.html":{}}}],["this.contract.methods.allocate(to",{"_index":781,"title":{},"body":{"classes/ZapToken.html":{}}}],["this.contract.methods.approve(to",{"_index":785,"title":{},"body":{"classes/ZapToken.html":{}}}],["this.contract.methods.balanceof(address).cal",{"_index":771,"title":{},"body":{"classes/ZapToken.html":{}}}],["this.contract.methods.endsubscriptionprovid",{"_index":458,"title":{},"body":{"classes/ZapArbiter.html":{}}}],["this.contract.methods.endsubscriptionsubscrib",{"_index":455,"title":{},"body":{"classes/ZapArbiter.html":{}}}],["this.contract.methods.getnextendpointparam",{"_index":739,"title":{},"body":{"classes/ZapRegistry.html":{}}}],["this.contract.methods.getnextprovider(index).cal",{"_index":736,"title":{},"body":{"classes/ZapRegistry.html":{}}}],["this.contract.methods.getprovidercurv",{"_index":733,"title":{},"body":{"classes/ZapRegistry.html":{}}}],["this.contract.methods.getproviderpublickey(provider).cal",{"_index":727,"title":{},"body":{"classes/ZapRegistry.html":{}}}],["this.contract.methods.getprovidertitle(provider).cal",{"_index":730,"title":{},"body":{"classes/ZapRegistry.html":{}}}],["this.contract.methods.getsubscription(provider,subscriber,utf8tohex(endpoint)).cal",{"_index":448,"title":{},"body":{"classes/ZapArbiter.html":{}}}],["this.contract.methods.initiateprovid",{"_index":710,"title":{},"body":{"classes/ZapRegistry.html":{}}}],["this.contract.methods.initiateprovidercurv",{"_index":718,"title":{},"body":{"classes/ZapRegistry.html":{}}}],["this.contract.methods.initiatesubscript",{"_index":442,"title":{},"body":{"classes/ZapArbiter.html":{}}}],["this.contract.methods.owner().call().valueof",{"_index":89,"title":{},"body":{"classes/BaseContract.html":{}}}],["this.contract.methods.queri",{"_index":506,"title":{},"body":{"classes/ZapDispatch.html":{}}}],["this.contract.methods.respond1",{"_index":516,"title":{},"body":{"classes/ZapDispatch.html":{}}}],["this.contract.methods.respond2",{"_index":519,"title":{},"body":{"classes/ZapDispatch.html":{}}}],["this.contract.methods.respond3",{"_index":522,"title":{},"body":{"classes/ZapDispatch.html":{}}}],["this.contract.methods.respond4",{"_index":526,"title":{},"body":{"classes/ZapDispatch.html":{}}}],["this.contract.methods.respondbytes32array",{"_index":511,"title":{},"body":{"classes/ZapDispatch.html":{}}}],["this.contract.methods.setendpointparam",{"_index":723,"title":{},"body":{"classes/ZapRegistry.html":{}}}],["this.contract.methods.transfer(to",{"_index":777,"title":{},"body":{"classes/ZapToken.html":{}}}],["this.curv",{"_index":600,"title":{},"body":{"classes/ZapProvider.html":{}}}],["this.divid",{"_index":167,"title":{},"body":{"classes/Curve.html":{}}}],["this.dividers.length",{"_index":184,"title":{},"body":{"classes/Curve.html":{}}}],["this.dividers.map((item",{"_index":205,"title":{},"body":{"classes/Curve.html":{}}}],["this.handl",{"_index":305,"title":{},"body":{"classes/Subscriber.html":{},"classes/ZapProvider.html":{}}}],["this.handler.handleincoming(result",{"_index":647,"title":{},"body":{"classes/ZapProvider.html":{}}}],["this.handler.handlesubscription(result",{"_index":638,"title":{},"body":{"classes/ZapProvider.html":{}}}],["this.handler.handleunsubscription(result",{"_index":644,"title":{},"body":{"classes/ZapProvider.html":{}}}],["this.networkid",{"_index":78,"title":{},"body":{"classes/BaseContract.html":{}}}],["this.part",{"_index":166,"title":{},"body":{"classes/Curve.html":{}}}],["this.parts.length",{"_index":182,"title":{},"body":{"classes/Curve.html":{}}}],["this.parts.map((item",{"_index":203,"title":{},"body":{"classes/Curve.html":{}}}],["this.piec",{"_index":168,"title":{},"body":{"classes/Curve.html":{}}}],["this.provid",{"_index":71,"title":{},"body":{"classes/BaseContract.html":{}}}],["this.providerown",{"_index":599,"title":{},"body":{"classes/ZapProvider.html":{}}}],["this.pubkey",{"_index":602,"title":{},"body":{"classes/ZapProvider.html":{}}}],["this.structur",{"_index":170,"title":{},"body":{"classes/Curve.html":{}}}],["this.subscriberown",{"_index":304,"title":{},"body":{"classes/Subscriber.html":{}}}],["this.titl",{"_index":601,"title":{},"body":{"classes/ZapProvider.html":{}}}],["this.web3",{"_index":80,"title":{},"body":{"classes/BaseContract.html":{}}}],["this.web3.eth.contract(artifact.abi,artifact.networks[this.networkid].address",{"_index":83,"title":{},"body":{"classes/BaseContract.html":{}}}],["this.zaparbit",{"_index":309,"title":{},"body":{"classes/Subscriber.html":{},"classes/ZapProvider.html":{}}}],["this.zaparbiter.listensubscriptionend",{"_index":645,"title":{},"body":{"classes/ZapProvider.html":{}}}],["this.zaparbiter.listensubscriptionstart",{"_index":639,"title":{},"body":{"classes/ZapProvider.html":{}}}],["this.zapbondag",{"_index":308,"title":{},"body":{"classes/Subscriber.html":{},"classes/ZapProvider.html":{}}}],["this.zapbondage.bond",{"_index":322,"title":{},"body":{"classes/Subscriber.html":{}}}],["this.zapbondage.calcbondr",{"_index":631,"title":{},"body":{"classes/ZapProvider.html":{}}}],["this.zapbondage.calczapfordots({provid",{"_index":336,"title":{},"body":{"classes/Subscriber.html":{},"classes/ZapProvider.html":{}}}],["this.zapbondage.contract._address",{"_index":318,"title":{},"body":{"classes/Subscriber.html":{}}}],["this.zapbondage.getbounddots({subscrib",{"_index":326,"title":{},"body":{"classes/Subscriber.html":{}}}],["this.zapbondage.getzapbound",{"_index":623,"title":{},"body":{"classes/ZapProvider.html":{}}}],["this.zapbondage.unbond({provid",{"_index":331,"title":{},"body":{"classes/Subscriber.html":{}}}],["this.zapdispatch",{"_index":307,"title":{},"body":{"classes/Subscriber.html":{},"classes/ZapProvider.html":{}}}],["this.zapdispatch.listenincom",{"_index":648,"title":{},"body":{"classes/ZapProvider.html":{}}}],["this.zapdispatch.respond({queryid",{"_index":650,"title":{},"body":{"classes/ZapProvider.html":{}}}],["this.zapregistri",{"_index":310,"title":{},"body":{"classes/Subscriber.html":{},"classes/ZapProvider.html":{}}}],["this.zapregistry.getprovidercurve(this.providerown",{"_index":620,"title":{},"body":{"classes/ZapProvider.html":{}}}],["this.zapregistry.getproviderpublickey(provid",{"_index":335,"title":{},"body":{"classes/Subscriber.html":{}}}],["this.zapregistry.getproviderpublickey(this.providerown",{"_index":618,"title":{},"body":{"classes/ZapProvider.html":{}}}],["this.zapregistry.getprovidertitle(this.providerown",{"_index":616,"title":{},"body":{"classes/ZapProvider.html":{}}}],["this.zapregistry.initiateprovid",{"_index":607,"title":{},"body":{"classes/ZapProvider.html":{}}}],["this.zapregistry.initiateprovidercurve({endpoint",{"_index":612,"title":{},"body":{"classes/ZapProvider.html":{}}}],["this.zaptoken",{"_index":306,"title":{},"body":{"classes/Subscriber.html":{}}}],["this.zaptoken.approv",{"_index":317,"title":{},"body":{"classes/Subscriber.html":{}}}],["this.zaptoken.balanceof(this.subscriberown",{"_index":338,"title":{},"body":{"classes/Subscriber.html":{}}}],["thisconst",{"_index":905,"title":{},"body":{"index.html":{}}}],["thisdivid",{"_index":907,"title":{},"body":{"index.html":{}}}],["thispart",{"_index":906,"title":{},"body":{"index.html":{}}}],["throw",{"_index":86,"title":{},"body":{"classes/BaseContract.html":{},"classes/Curve.html":{},"classes/ZapArbiter.html":{},"classes/ZapDispatch.html":{},"classes/ZapToken.html":{}}}],["titl",{"_index":228,"title":{},"body":{"interfaces/InitProvider.html":{},"interfaces/ProviderHandler.html":{},"classes/ZapProvider.html":{},"interfaces/ZapProviderType.html":{},"classes/ZapRegistry.html":{},"index.html":{}}}],["title:str",{"_index":596,"title":{},"body":{"classes/ZapProvider.html":{},"interfaces/ZapProviderType.html":{}}}],["toblock",{"_index":111,"title":{},"body":{"interfaces/BondArgs.html":{},"interfaces/BondageArgs.html":{},"interfaces/CalcBondRateType.html":{},"interfaces/Filter.html":{},"interfaces/InitProvider.html":{},"interfaces/ResponseArgs.html":{},"interfaces/SubscriptionEnd.html":{},"interfaces/SubscriptionInit.html":{},"interfaces/SubscriptionType.html":{},"interfaces/UnbondArgs.html":{},"classes/ZapArbiter.html":{},"classes/ZapDispatch.html":{},"interfaces/listenEvent.html":{}}}],["tobn(blocks)).send({from",{"_index":445,"title":{},"body":{"classes/ZapArbiter.html":{}}}],["tobn(index",{"_index":740,"title":{},"body":{"classes/ZapRegistry.html":{}}}],["tobn(pubkey",{"_index":444,"title":{},"body":{"classes/ZapArbiter.html":{}}}],["tobn(public_key",{"_index":711,"title":{},"body":{"classes/ZapRegistry.html":{}}}],["tobn,utf8tohex",{"_index":429,"title":{},"body":{"classes/ZapArbiter.html":{},"classes/ZapDispatch.html":{}}}],["tohex",{"_index":161,"title":{},"body":{"classes/Curve.html":{},"classes/Utils.html":{}}}],["tohex(item",{"_index":201,"title":{},"body":{"classes/Curve.html":{},"classes/ZapRegistry.html":{}}}],["tohex(str",{"_index":379,"title":{},"body":{"classes/Utils.html":{}}}],["tohex,utf8tohex,tobn",{"_index":702,"title":{},"body":{"classes/ZapRegistry.html":{}}}],["token",{"_index":11,"title":{},"body":{"classes/BaseContract.html":{},"classes/ZapProvider.html":{},"classes/ZapToken.html":{}}}],["tool",{"_index":854,"title":{},"body":{"index.html":{}}}],["total",{"_index":137,"title":{},"body":{"classes/Curve.html":{}}}],["totalbound",{"_index":153,"title":{},"body":{"classes/Curve.html":{}}}],["tozapbas",{"_index":359,"title":{},"body":{"classes/Utils.html":{}}}],["tozapbase(num",{"_index":381,"title":{},"body":{"classes/Utils.html":{}}}],["transact",{"_index":417,"title":{},"body":{"classes/ZapArbiter.html":{},"classes/ZapDispatch.html":{}}}],["transfer",{"_index":766,"title":{},"body":{"classes/ZapToken.html":{}}}],["transfertyp",{"_index":758,"title":{},"body":{"classes/ZapToken.html":{},"miscellaneous/typealiases.html":{}}}],["transfertype,address,txid",{"_index":767,"title":{},"body":{"classes/ZapToken.html":{}}}],["tri",{"_index":66,"title":{},"body":{"classes/BaseContract.html":{},"classes/ZapArbiter.html":{}}}],["triplet",{"_index":188,"title":{},"body":{"classes/Curve.html":{}}}],["truffl",{"_index":816,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["ts",{"_index":822,"title":{},"body":{"dependencies.html":{}}}],["tslint",{"_index":825,"title":{},"body":{"dependencies.html":{}}}],["turn",{"_index":156,"title":{},"body":{"classes/Curve.html":{}}}],["txid",{"_index":103,"title":{},"body":{"interfaces/BondArgs.html":{},"interfaces/BondageArgs.html":{},"interfaces/CalcBondRateType.html":{},"interfaces/Filter.html":{},"interfaces/InitProvider.html":{},"interfaces/ProviderHandler.html":{},"interfaces/ResponseArgs.html":{},"interfaces/SubscriptionEnd.html":{},"interfaces/SubscriptionInit.html":{},"interfaces/SubscriptionType.html":{},"interfaces/UnbondArgs.html":{},"classes/ZapArbiter.html":{},"classes/ZapDispatch.html":{},"classes/ZapProvider.html":{},"interfaces/listenEvent.html":{},"miscellaneous/typealiases.html":{}}}],["type",{"_index":32,"title":{},"body":{"classes/BaseContract.html":{},"interfaces/BaseContractType.html":{},"interfaces/BondArgs.html":{},"interfaces/BondageArgs.html":{},"interfaces/CalcBondRateType.html":{},"interfaces/ContractType.html":{},"classes/Curve.html":{},"interfaces/CurveTerm.html":{},"interfaces/CurveType.html":{},"interfaces/Filter.html":{},"interfaces/InitProvider.html":{},"interfaces/ProviderHandler.html":{},"interfaces/ResponseArgs.html":{},"classes/Subscriber.html":{},"interfaces/SubscriberHandler.html":{},"interfaces/SubscriptionEnd.html":{},"interfaces/SubscriptionInit.html":{},"interfaces/SubscriptionType.html":{},"interfaces/UnbondArgs.html":{},"classes/Utils.html":{},"classes/ZapArbiter.html":{},"classes/ZapDispatch.html":{},"classes/ZapProvider.html":{},"interfaces/ZapProviderType.html":{},"classes/ZapRegistry.html":{},"classes/ZapToken.html":{},"interfaces/listenEvent.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["type2docfx",{"_index":827,"title":{},"body":{"dependencies.html":{}}}],["typealias",{"_index":931,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typedoc",{"_index":829,"title":{},"body":{"dependencies.html":{}}}],["types/chai",{"_index":792,"title":{},"body":{"dependencies.html":{}}}],["types/mocha",{"_index":794,"title":{},"body":{"dependencies.html":{}}}],["typescript",{"_index":836,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["typescriptinstal",{"_index":877,"title":{},"body":{"index.html":{}}}],["unbond",{"_index":275,"title":{},"body":{"classes/Subscriber.html":{}}}],["unbond(undefin",{"_index":294,"title":{},"body":{"classes/Subscriber.html":{}}}],["unbond({provid",{"_index":323,"title":{},"body":{"classes/Subscriber.html":{}}}],["unbondarg",{"_index":104,"title":{"interfaces/UnbondArgs.html":{}},"body":{"interfaces/BondArgs.html":{},"interfaces/BondageArgs.html":{},"interfaces/CalcBondRateType.html":{},"interfaces/UnbondArgs.html":{},"interfaces/listenEvent.html":{}}}],["unbondtyp",{"_index":295,"title":{},"body":{"classes/Subscriber.html":{},"interfaces/SubscriberHandler.html":{},"miscellaneous/typealiases.html":{}}}],["unbound",{"_index":330,"title":{},"body":{"classes/Subscriber.html":{}}}],["undefin",{"_index":65,"title":{},"body":{"classes/BaseContract.html":{},"interfaces/BaseContractType.html":{},"interfaces/ContractType.html":{},"classes/ZapProvider.html":{}}}],["under",{"_index":925,"title":{},"body":{"index.html":{}}}],["unit",{"_index":883,"title":{},"body":{"index.html":{}}}],["unsubscrib",{"_index":407,"title":{},"body":{"classes/ZapArbiter.html":{},"classes/ZapProvider.html":{}}}],["unsubscribelisten",{"_index":249,"title":{},"body":{"interfaces/ProviderHandler.html":{},"classes/ZapProvider.html":{},"miscellaneous/typealiases.html":{}}}],["unsubscript",{"_index":454,"title":{},"body":{"classes/ZapArbiter.html":{},"classes/ZapProvider.html":{}}}],["unsubscription:ani",{"_index":453,"title":{},"body":{"classes/ZapArbiter.html":{}}}],["up",{"_index":864,"title":{},"body":{"index.html":{}}}],["us",{"_index":563,"title":{},"body":{"classes/ZapProvider.html":{},"index.html":{}}}],["usag",{"_index":889,"title":{},"body":{"index.html":{}}}],["utf8tohex(el",{"_index":722,"title":{},"body":{"classes/ZapRegistry.html":{}}}],["utf8tohex(endpoint",{"_index":443,"title":{},"body":{"classes/ZapArbiter.html":{},"classes/ZapDispatch.html":{},"classes/ZapRegistry.html":{}}}],["utf8tohex(endpoint_params[i",{"_index":441,"title":{},"body":{"classes/ZapArbiter.html":{}}}],["utf8tohex(endpointparams[i",{"_index":505,"title":{},"body":{"classes/ZapDispatch.html":{}}}],["utf8tohex(item",{"_index":709,"title":{},"body":{"classes/ZapRegistry.html":{}}}],["utf8tohex(titl",{"_index":712,"title":{},"body":{"classes/ZapRegistry.html":{}}}],["utf8tohex,tobn",{"_index":386,"title":{},"body":{"classes/Utils.html":{}}}],["util",{"_index":50,"title":{"classes/Utils.html":{}},"body":{"classes/BaseContract.html":{},"classes/Curve.html":{},"classes/Utils.html":{},"classes/ZapArbiter.html":{},"classes/ZapDispatch.html":{},"classes/ZapProvider.html":{},"classes/ZapRegistry.html":{},"classes/ZapToken.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["utils.fromzapbase(bal",{"_index":772,"title":{},"body":{"classes/ZapToken.html":{}}}],["utils.getartifacts(artifactsdir",{"_index":70,"title":{},"body":{"classes/BaseContract.html":{}}}],["utils.tozapbase(amount",{"_index":776,"title":{},"body":{"classes/ZapToken.html":{}}}],["val",{"_index":195,"title":{},"body":{"classes/Curve.html":{}}}],["valid",{"_index":174,"title":{},"body":{"classes/Curve.html":{}}}],["valu",{"_index":360,"title":{},"body":{"classes/Utils.html":{},"classes/ZapArbiter.html":{},"classes/ZapDispatch.html":{},"classes/ZapRegistry.html":{},"miscellaneous/variables.html":{}}}],["variabl",{"_index":935,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["void",{"_index":144,"title":{},"body":{"classes/Curve.html":{},"classes/ZapDispatch.html":{}}}],["watch",{"_index":463,"title":{},"body":{"classes/ZapArbiter.html":{}}}],["web3",{"_index":17,"title":{},"body":{"classes/BaseContract.html":{},"classes/Utils.html":{},"classes/ZapArbiter.html":{},"classes/ZapDispatch.html":{},"classes/ZapRegistry.html":{},"classes/ZapToken.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["web3(networkprovid",{"_index":81,"title":{},"body":{"classes/BaseContract.html":{}}}],["web3.providers.httpprovider('http://127.0.0.1:7545",{"_index":953,"title":{},"body":{"miscellaneous/variables.html":{}}}],["web3.providers.websocketprovider('ws://127.0.0.1:8545",{"_index":73,"title":{},"body":{"classes/BaseContract.html":{}}}],["web3/typ",{"_index":588,"title":{},"body":{"classes/ZapProvider.html":{}}}],["web3:ani",{"_index":53,"title":{},"body":{"classes/BaseContract.html":{}}}],["without",{"_index":460,"title":{},"body":{"classes/ZapArbiter.html":{}}}],["working_directori",{"_index":661,"title":{},"body":{"interfaces/ZapProviderType.html":{}}}],["workingdir",{"_index":943,"title":{},"body":{"miscellaneous/variables.html":{}}}],["x",{"_index":135,"title":{},"body":{"classes/Curve.html":{}}}],["zap",{"_index":565,"title":{},"body":{"classes/ZapProvider.html":{},"classes/ZapToken.html":{},"index.html":{}}}],["zap/arbit",{"_index":247,"title":{},"body":{"interfaces/ProviderHandler.html":{},"classes/Subscriber.html":{},"interfaces/SubscriberHandler.html":{},"classes/ZapProvider.html":{}}}],["zap/artifact",{"_index":49,"title":{},"body":{"classes/BaseContract.html":{}}}],["zap/basecontract",{"_index":427,"title":{},"body":{"classes/ZapArbiter.html":{},"classes/ZapDispatch.html":{},"classes/ZapRegistry.html":{},"classes/ZapToken.html":{}}}],["zap/bondag",{"_index":245,"title":{},"body":{"interfaces/ProviderHandler.html":{},"classes/Subscriber.html":{},"interfaces/SubscriberHandler.html":{},"classes/ZapProvider.html":{}}}],["zap/curv",{"_index":229,"title":{},"body":{"interfaces/InitProvider.html":{},"interfaces/ProviderHandler.html":{},"classes/ZapProvider.html":{},"interfaces/ZapProviderType.html":{},"classes/ZapRegistry.html":{}}}],["zap/dispatch",{"_index":241,"title":{},"body":{"interfaces/ProviderHandler.html":{},"classes/Subscriber.html":{},"interfaces/SubscriberHandler.html":{},"classes/ZapProvider.html":{}}}],["zap/provid",{"_index":897,"title":{},"body":{"index.html":{}}}],["zap/provider`class",{"_index":890,"title":{},"body":{"index.html":{}}}],["zap/registri",{"_index":243,"title":{},"body":{"interfaces/ProviderHandler.html":{},"classes/Subscriber.html":{},"interfaces/SubscriberHandler.html":{},"classes/ZapProvider.html":{}}}],["zap/util",{"_index":51,"title":{},"body":{"classes/BaseContract.html":{},"classes/ZapArbiter.html":{},"classes/ZapDispatch.html":{},"classes/ZapRegistry.html":{},"classes/ZapToken.html":{}}}],["zap/zaptoken",{"_index":299,"title":{},"body":{"classes/Subscriber.html":{},"interfaces/SubscriberHandler.html":{}}}],["zap_contract",{"_index":842,"title":{},"body":{"dependencies.html":{}}}],["zaparbit",{"_index":246,"title":{"classes/ZapArbiter.html":{}},"body":{"interfaces/ProviderHandler.html":{},"classes/Subscriber.html":{},"interfaces/SubscriberHandler.html":{},"classes/ZapArbiter.html":{},"classes/ZapProvider.html":{}}}],["zapbal",{"_index":337,"title":{},"body":{"classes/Subscriber.html":{}}}],["zapbondag",{"_index":244,"title":{},"body":{"interfaces/ProviderHandler.html":{},"classes/Subscriber.html":{},"interfaces/SubscriberHandler.html":{},"classes/ZapProvider.html":{}}}],["zapcontractdirnam",{"_index":944,"title":{},"body":{"miscellaneous/variables.html":{}}}],["zapdispatch",{"_index":240,"title":{"classes/ZapDispatch.html":{}},"body":{"interfaces/ProviderHandler.html":{},"classes/Subscriber.html":{},"interfaces/SubscriberHandler.html":{},"classes/ZapDispatch.html":{},"classes/ZapProvider.html":{}}}],["zapdispatch:zapdispatch",{"_index":258,"title":{},"body":{"interfaces/ProviderHandler.html":{},"interfaces/SubscriberHandler.html":{}}}],["zapnum",{"_index":102,"title":{},"body":{"interfaces/BondArgs.html":{},"interfaces/BondageArgs.html":{},"interfaces/CalcBondRateType.html":{},"classes/Subscriber.html":{},"interfaces/SubscriberHandler.html":{},"interfaces/UnbondArgs.html":{},"classes/ZapProvider.html":{},"interfaces/listenEvent.html":{}}}],["zapnum:numb",{"_index":629,"title":{},"body":{"classes/ZapProvider.html":{}}}],["zapnum}:bondtype):promis",{"_index":312,"title":{},"body":{"classes/Subscriber.html":{}}}],["zapnum}:{endpoint:str",{"_index":628,"title":{},"body":{"classes/ZapProvider.html":{}}}],["zapprovid",{"_index":538,"title":{"classes/ZapProvider.html":{}},"body":{"classes/ZapProvider.html":{},"index.html":{}}}],["zapprovider({owner:address,handler:new",{"_index":899,"title":{},"body":{"index.html":{}}}],["zapprovidertyp",{"_index":377,"title":{"interfaces/ZapProviderType.html":{}},"body":{"classes/Utils.html":{},"interfaces/ZapProviderType.html":{}}}],["zapregistri",{"_index":242,"title":{"classes/ZapRegistry.html":{}},"body":{"interfaces/ProviderHandler.html":{},"classes/Subscriber.html":{},"interfaces/SubscriberHandler.html":{},"classes/ZapProvider.html":{},"classes/ZapRegistry.html":{}}}],["zaprequir",{"_index":290,"title":{},"body":{"classes/Subscriber.html":{}}}],["zaptoken",{"_index":272,"title":{"classes/ZapToken.html":{}},"body":{"classes/Subscriber.html":{},"classes/ZapToken.html":{}}}],["zaptoken:zaptoken",{"_index":346,"title":{},"body":{"interfaces/SubscriberHandler.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/BaseContract.html":{"url":"classes/BaseContract.html","title":"class - BaseContract","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  BaseContract\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/BaseContract/src/index.ts\n        \n\n            \n                Description\n            \n            \n                Parent Class to Dispatch, Bondage, Arbiter, Token, Registry class\nProvide access to contract instance and web3 provider instance\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                contract\n                            \n                            \n                                networkId\n                            \n                            \n                                provider\n                            \n                            \n                                web3\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getContractOwner\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(undefined: BaseContractType)\n                    \n                \n                        \n                            \n                                Defined in packages/BaseContract/src/index.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                  \n                                                        \n                                                                    BaseContractType\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            contract\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        contract:     any\n\n                    \n                \n                    \n                        \n                            Type :     any\n\n                        \n                    \n                        \n                            \n                                    Defined in packages/BaseContract/src/index.ts:14\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            networkId\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        networkId:     number\n\n                    \n                \n                    \n                        \n                            Type :     number\n\n                        \n                    \n                        \n                            \n                                    Defined in packages/BaseContract/src/index.ts:15\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            provider\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        provider:     any\n\n                    \n                \n                    \n                        \n                            Type :     any\n\n                        \n                    \n                        \n                            \n                                    Defined in packages/BaseContract/src/index.ts:12\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            web3\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        web3:     any\n\n                    \n                \n                    \n                        \n                            Type :     any\n\n                        \n                    \n                        \n                            \n                                    Defined in packages/BaseContract/src/index.ts:13\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Async\n                            getContractOwner\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        getContractOwner()\n                    \n                \n\n\n                        \n                            \n                                    Defined in packages/BaseContract/src/index.ts:49\n                            \n                        \n\n\n                \n                    \n                            Get Contract owner address\n\n\n                            \n                            \n                            \n                                Returns :     Promise\n\n                            \n                                \n                                    owner's address of this contract instance\n\n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import * as assert from \"assert\";\nconst Web3 =require('web3');\nimport {Artifacts} from \"@zap/artifacts\";\nimport {BaseContractType} from \"./types\";\nimport {Utils} from \"@zap/utils\"\n\n/**\n * Parent Class to Dispatch, Bondage, Arbiter, Token, Registry class\n * Provide access to contract instance and web3 provider instance\n */\nexport class BaseContract{\n    provider : any;\n    web3:any;\n    contract:any;\n    networkId:number;\n\n    /**\n     * @param {string | null} artifactsDir\n     * @param {string} artifactName : contract's name\n     * @param {number | null} networkId\n     * @param {any | null} networkProvider\n     */\n    constructor({artifactsDir,artifactName,networkId,networkProvider}:BaseContractType) {\n        let artifact:any = undefined;\n        try {\n          if(!artifactsDir){\n            artifact = Artifacts[artifactName];\n          }\n          else{\n            let artifacts:any = Utils.getArtifacts(artifactsDir);\n            artifact = artifacts[artifactName];\n          }\n          this.provider = networkProvider ||\n              new Web3.providers.WebsocketProvider('ws://127.0.0.1:8545');\n          //network id default to mainnet\n          this.networkId = networkId || 1;\n          this.web3 = new Web3(networkProvider);\n          this.contract = new this.web3.eth.Contract(artifact.abi,artifact.networks[this.networkId].address)\n\n        } catch (err) {\n            throw err;\n        }\n    }\n\n    /**\n     * Get Contract owner address\n     * @returns {Promise} owner's address of this contract instance\n     */\n    async getContractOwner():Promise{\n        return await this.contract.methods.owner().call().valueOf()\n    }\n}\n\nexport * from \"./types\"\n\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/BaseContractType.html":{"url":"interfaces/BaseContractType.html","title":"interface - BaseContractType","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  BaseContractType\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/BaseContract/src/types.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        artifactName\n                                \n                                \n                                            Optional\n                                        artifactsDir\n                                \n                                \n                                            Optional\n                                        contract\n                                \n                                \n                                            Optional\n                                        networkId\n                                \n                                \n                                            Optional\n                                        networkProvider\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        artifactName\n                                    \n                                \n                                \n                                    \n                                        artifactName:     string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        artifactsDir\n                                    \n                                \n                                \n                                    \n                                        artifactsDir:     string | undefined\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string | undefined\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        contract\n                                    \n                                \n                                \n                                    \n                                        contract:     any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     any\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        networkId\n                                    \n                                \n                                \n                                    \n                                        networkId:     number | undefined\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number | undefined\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        networkProvider\n                                    \n                                \n                                \n                                    \n                                        networkProvider:     any | undefined\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     any | undefined\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface BaseContractType  {\n  \tartifactsDir ?:string|undefined,\n    artifactName: string,\n    networkId?: number|undefined,\n    networkProvider?: any|undefined,\n    contract ?: any\n}\n export interface ContractType {\n     artifactsDir ?:string|undefined,\n     networkId?: number|undefined,\n     networkProvider?: any|undefined\n }\n\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/BondArgs.html":{"url":"interfaces/BondArgs.html","title":"interface - BondArgs","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  BondArgs\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/Bondage/src/types.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        endpoint\n                                \n                                \n                                        from\n                                \n                                \n                                            Optional\n                                        gas\n                                \n                                \n                                        provider\n                                \n                                \n                                        zapNum\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        endpoint\n                                    \n                                \n                                \n                                    \n                                        endpoint:     string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        from\n                                    \n                                \n                                \n                                    \n                                        from:     address\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     address\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        gas\n                                    \n                                \n                                \n                                    \n                                        gas:     number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        provider\n                                    \n                                \n                                \n                                    \n                                        provider:     address\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     address\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        zapNum\n                                    \n                                \n                                \n                                    \n                                        zapNum:     number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export type address = string;\nexport type txid = string;\nexport interface BondArgs {\n    provider: address;\n    endpoint: string;\n    zapNum: number;\n    from: address;\n    gas ?: number;\n}\n\nexport interface UnbondArgs {\n\tprovider: address;\n    endpoint: string;\n    dots: number;\n    from: address;\n    gas ?: number;\n}\n\nexport interface BondageArgs {\n\tsubscriber ?: address;\n\tprovider: address;\n\tendpoint: string;\n\tdots ?: number ;\n\tzapNum ?: number;\n}\nexport interface CalcBondRateType {\n    provider: address;\n    endpoint: string;\n    zapNum: number;\n}\n\nexport interface Filter {\n    provider ?: address;\n    fromBlock ?: number;\n    toBlock ?: number;\n}\nexport interface listenEvent {\n    filter ?: Filter;\n    callback: Function;\n}\n\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/BondageArgs.html":{"url":"interfaces/BondageArgs.html","title":"interface - BondageArgs","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  BondageArgs\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/Bondage/src/types.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        dots\n                                \n                                \n                                        endpoint\n                                \n                                \n                                        provider\n                                \n                                \n                                            Optional\n                                        subscriber\n                                \n                                \n                                            Optional\n                                        zapNum\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        dots\n                                    \n                                \n                                \n                                    \n                                        dots:     number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        endpoint\n                                    \n                                \n                                \n                                    \n                                        endpoint:     string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        provider\n                                    \n                                \n                                \n                                    \n                                        provider:     address\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     address\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        subscriber\n                                    \n                                \n                                \n                                    \n                                        subscriber:     address\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     address\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        zapNum\n                                    \n                                \n                                \n                                    \n                                        zapNum:     number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export type address = string;\nexport type txid = string;\nexport interface BondArgs {\n    provider: address;\n    endpoint: string;\n    zapNum: number;\n    from: address;\n    gas ?: number;\n}\n\nexport interface UnbondArgs {\n\tprovider: address;\n    endpoint: string;\n    dots: number;\n    from: address;\n    gas ?: number;\n}\n\nexport interface BondageArgs {\n\tsubscriber ?: address;\n\tprovider: address;\n\tendpoint: string;\n\tdots ?: number ;\n\tzapNum ?: number;\n}\nexport interface CalcBondRateType {\n    provider: address;\n    endpoint: string;\n    zapNum: number;\n}\n\nexport interface Filter {\n    provider ?: address;\n    fromBlock ?: number;\n    toBlock ?: number;\n}\nexport interface listenEvent {\n    filter ?: Filter;\n    callback: Function;\n}\n\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/CalcBondRateType.html":{"url":"interfaces/CalcBondRateType.html","title":"interface - CalcBondRateType","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  CalcBondRateType\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/Bondage/src/types.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        endpoint\n                                \n                                \n                                        provider\n                                \n                                \n                                        zapNum\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        endpoint\n                                    \n                                \n                                \n                                    \n                                        endpoint:     string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        provider\n                                    \n                                \n                                \n                                    \n                                        provider:     address\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     address\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        zapNum\n                                    \n                                \n                                \n                                    \n                                        zapNum:     number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export type address = string;\nexport type txid = string;\nexport interface BondArgs {\n    provider: address;\n    endpoint: string;\n    zapNum: number;\n    from: address;\n    gas ?: number;\n}\n\nexport interface UnbondArgs {\n\tprovider: address;\n    endpoint: string;\n    dots: number;\n    from: address;\n    gas ?: number;\n}\n\nexport interface BondageArgs {\n\tsubscriber ?: address;\n\tprovider: address;\n\tendpoint: string;\n\tdots ?: number ;\n\tzapNum ?: number;\n}\nexport interface CalcBondRateType {\n    provider: address;\n    endpoint: string;\n    zapNum: number;\n}\n\nexport interface Filter {\n    provider ?: address;\n    fromBlock ?: number;\n    toBlock ?: number;\n}\nexport interface listenEvent {\n    filter ?: Filter;\n    callback: Function;\n}\n\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ContractType.html":{"url":"interfaces/ContractType.html","title":"interface - ContractType","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ContractType\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/BaseContract/src/types.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        artifactsDir\n                                \n                                \n                                            Optional\n                                        networkId\n                                \n                                \n                                            Optional\n                                        networkProvider\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        artifactsDir\n                                    \n                                \n                                \n                                    \n                                        artifactsDir:     string | undefined\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string | undefined\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        networkId\n                                    \n                                \n                                \n                                    \n                                        networkId:     number | undefined\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number | undefined\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        networkProvider\n                                    \n                                \n                                \n                                    \n                                        networkProvider:     any | undefined\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     any | undefined\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface BaseContractType  {\n  \tartifactsDir ?:string|undefined,\n    artifactName: string,\n    networkId?: number|undefined,\n    networkProvider?: any|undefined,\n    contract ?: any\n}\n export interface ContractType {\n     artifactsDir ?:string|undefined,\n     networkId?: number|undefined,\n     networkProvider?: any|undefined\n }\n\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Curve.html":{"url":"classes/Curve.html","title":"class - Curve","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  Curve\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/Curve/src/index.ts\n        \n\n            \n                Description\n            \n            \n                Calculate Curve functions\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                constants\n                            \n                            \n                                    Public\n                                dividers\n                            \n                            \n                                    Public\n                                parts\n                            \n                            \n                                    Public\n                                pieces\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                _calculatePolynomial\n                            \n                            \n                                    Public\n                                _calculateTerm\n                            \n                            \n                                    Public\n                                checkValidity\n                            \n                            \n                                    Public\n                                convertToBNArrays\n                            \n                            \n                                    Public\n                                getPrice\n                            \n                            \n                                    Public\n                                structurize\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(constants: number[], parts: number[], dividers: number[])\n                    \n                \n                        \n                            \n                                Defined in packages/Curve/src/index.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        constants\n                                                  \n                                                        \n                                                                    number[]\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                        parts\n                                                  \n                                                        \n                                                                    number[]\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                        dividers\n                                                  \n                                                        \n                                                                    number[]\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            constants\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        constants:     number[]\n\n                    \n                \n                    \n                        \n                            Type :     number[]\n\n                        \n                    \n                        \n                            \n                                    Defined in packages/Curve/src/index.ts:10\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            dividers\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        dividers:     number[]\n\n                    \n                \n                    \n                        \n                            Type :     number[]\n\n                        \n                    \n                        \n                            \n                                    Defined in packages/Curve/src/index.ts:12\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            parts\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        parts:     number[]\n\n                    \n                \n                    \n                        \n                            Type :     number[]\n\n                        \n                    \n                        \n                            \n                                    Defined in packages/Curve/src/index.ts:11\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            pieces\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        pieces:     any[]\n\n                    \n                \n                    \n                        \n                            Type :     any[]\n\n                        \n                    \n                        \n                            \n                                    Defined in packages/Curve/src/index.ts:13\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            _calculatePolynomial\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        _calculatePolynomial(terms: any, x: number)\n                    \n                \n\n\n                        \n                            \n                                    Defined in packages/Curve/src/index.ts:164\n                            \n                        \n\n\n                \n                    \n                            Calculate total of terms\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        terms\n                                                        \n                                                                    any\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        x\n                                                        \n                                                                    number\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     number\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            _calculateTerm\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        _calculateTerm(term: CurveTerm, x: number)\n                    \n                \n\n\n                        \n                            \n                                    Defined in packages/Curve/src/index.ts:119\n                            \n                        \n\n\n                \n                    \n                            Calculate a curve's term\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        term\n                                                        \n                                                                    CurveTerm\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        x\n                                                        \n                                                                    number\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     number\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            checkValidity\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        checkValidity()\n                    \n                \n\n\n                        \n                            \n                                    Defined in packages/Curve/src/index.ts:33\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            convertToBNArrays\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        convertToBNArrays()\n                    \n                \n\n\n                        \n                            \n                                    Defined in packages/Curve/src/index.ts:143\n                            \n                        \n\n\n                \n                    \n                            Convert this curve constants, parts, dividers into Array of Bignumbers\n\n\n                            \n                            \n                            \n                                Returns :     [][]\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            getPrice\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        getPrice(total: number)\n                    \n                \n\n\n                        \n                            \n                                    Defined in packages/Curve/src/index.ts:94\n                            \n                        \n\n\n                \n                    \n                            Get the price of a dot at a given totalBound\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        total\n                                                        \n                                                                    number\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                        \n                                                                bound dots\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     number\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            structurize\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        structurize()\n                    \n                \n\n\n                        \n                            \n                                    Defined in packages/Curve/src/index.ts:66\n                            \n                        \n\n\n                \n                    \n                            Turn constants, parts, dividers into curve's coef, power, fn, pieces\n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import {CurveTerm, CurveType} from \"./types\";\nconst {toHex}  = require(\"web3-utils\");\nimport {BigNumber} from \"bignumber.js\";\n\n/**\n * Calculate Curve functions\n */\nexport class Curve {\n    /**@member */\n    public constants: number[];\n    public parts: number[];\n    public dividers: number[];\n    public pieces: any[];\n\n    /**\n     * @constructor\n     * @param {Array} constants\n     * @param {Array} parts\n     * @param {Array} dividers\n     */\n    constructor(constants: number[], parts: number[], dividers: number[]) {\n        this.constants = constants;\n        this.parts = parts;\n        this.dividers = dividers;\n        this.pieces = Array();\n        this.checkValidity();\n        this.structurize();\n    }\n\n    /*\n     * Checks that the piecewise curve encoding is valid. Throws an error if not\n     */\n     public checkValidity(): void {\n        if (this.constants.length % 3 != 0) { throw new Error(\"Invalid number of constants arguments\"); }\n        for (let i = 0; i  1)) { throw new Error(\"Unknown function encoding\"); }\n        }\n        if (this.parts.length / 2 != this.dividers.length) { throw new Error(\"A range must be defined for each constants triplet\"); }\n\n        let prev = 0;\n        for (let i = 0; i  this.constants.length / 3) { throw new Error(\"Dividers refer to a non-existent piecewise term\"); }\n        }\n\n}\n\n    /**\n     * Turn constants, parts, dividers into curve's coef, power, fn, pieces\n     */\n     public structurize(): void {\n        let pStart = 0;\n\n        for (let i = 0; i  0) {\n            val = Math.pow(x, term.power);\n        }\n\n        return val * term.coef;\n    }\n\n    /**\n     * Convert this curve constants, parts, dividers into Array of Bignumbers\n     * @returns {Array>}\n     */\n     public convertToBNArrays(): BigNumber[][] {\n        const convertedConstants = this.constants.map((item: number) => {\n            return toHex(item);\n        });\n        const convertedParts = this.parts.map((item: number) => {\n            return toHex(item);\n        });\n        const convertedDividers = this.dividers.map((item: number) => {\n            return toHex(item);\n        });\n        return [convertedConstants, convertedParts, convertedDividers];\n\n    }\n\n    /**\n     * Calculate total of terms\n     * @param terms\n     * @param {number} x\n     * @returns {number}\n     * @private\n     */\n     public _calculatePolynomial(terms: any, x: number): number {\n        let sum = 0;\n\n        for (let i = 0; i \n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/CurveTerm.html":{"url":"interfaces/CurveTerm.html","title":"interface - CurveTerm","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  CurveTerm\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/Curve/src/types.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        coef\n                                \n                                \n                                        fn\n                                \n                                \n                                        power\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        coef\n                                    \n                                \n                                \n                                    \n                                        coef:     number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        fn\n                                    \n                                \n                                \n                                    \n                                        fn:     number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        power\n                                    \n                                \n                                \n                                    \n                                        power:     number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface CurveType {\n  constants: number[];\n  parts: number[];\n  dividers: number[];\n}\n\nexport interface CurveTerm {\n  fn: number;\n    power: number;\n    coef: number;\n}\n\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/CurveType.html":{"url":"interfaces/CurveType.html","title":"interface - CurveType","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  CurveType\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/Curve/src/types.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        constants\n                                \n                                \n                                        dividers\n                                \n                                \n                                        parts\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        constants\n                                    \n                                \n                                \n                                    \n                                        constants:     number[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dividers\n                                    \n                                \n                                \n                                    \n                                        dividers:     number[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        parts\n                                    \n                                \n                                \n                                    \n                                        parts:     number[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface CurveType {\n  constants: number[];\n  parts: number[];\n  dividers: number[];\n}\n\nexport interface CurveTerm {\n  fn: number;\n    power: number;\n    coef: number;\n}\n\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Filter.html":{"url":"interfaces/Filter.html","title":"interface - Filter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Filter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/Arbiter/src/types.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        fromBlock\n                                \n                                \n                                            Optional\n                                        provider\n                                \n                                \n                                            Optional\n                                        subscriber\n                                \n                                \n                                            Optional\n                                        terminator\n                                \n                                \n                                            Optional\n                                        toBlock\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        fromBlock\n                                    \n                                \n                                \n                                    \n                                        fromBlock:     number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        provider\n                                    \n                                \n                                \n                                    \n                                        provider:     address\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     address\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        subscriber\n                                    \n                                \n                                \n                                    \n                                        subscriber:     address\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     address\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        terminator\n                                    \n                                \n                                \n                                    \n                                        terminator:     address\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     address\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        toBlock\n                                    \n                                \n                                \n                                    \n                                        toBlock:     number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        const DEFAULT_GAS = 400000\n/** ethereum address */\nexport type address = string\nexport type txid = string\nexport interface SubscriptionInit {\n    provider:address,\n    endpoint :string,\n    endpoint_params: Array,\n    blocks : number,\n    pubkey:number,\n    from: address,\n    gas?: number\n}\n\nexport interface SubscriptionEnd {\n    provider?:address,\n    subscriber ?:address,\n    endpoint : string,\n    from: address,\n    gas?:number\n}\n\nexport interface Filter {\n    fromBlock ?: number,\n    toBlock ?: number,\n    provider ?: address,\n    subscriber ?:address,\n    terminator ?:address\n}\n\nexport interface SubscriptionType {\n    provider:address,\n    subscriber:address,\n    endpoint:string\n}\n\n\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/InitProvider.html":{"url":"interfaces/InitProvider.html","title":"interface - InitProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  InitProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/Registry/src/types.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        endpoint\n                                \n                                \n                                            Optional\n                                        endpoint_params\n                                \n                                \n                                        from\n                                \n                                \n                                            Optional\n                                        gas\n                                \n                                \n                                        public_key\n                                \n                                \n                                        title\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        endpoint\n                                    \n                                \n                                \n                                    \n                                        endpoint:     string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        endpoint_params\n                                    \n                                \n                                \n                                    \n                                        endpoint_params:     Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Array\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        from\n                                    \n                                \n                                \n                                    \n                                        from:     address\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     address\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        gas\n                                    \n                                \n                                \n                                    \n                                        gas:     BigNumber\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     BigNumber\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        public_key\n                                    \n                                \n                                \n                                    \n                                        public_key:     string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        title\n                                    \n                                \n                                \n                                    \n                                        title:     string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {CurveType} from \"@zap/curve\"\nimport BigNumber from 'bignumber.js';\n\nexport type address = string;\nexport type txid = string;\nexport interface InitProvider  {\n  public_key : string,\n  title :string,\n  endpoint: string,\n  endpoint_params ?: Array,\n  from: address,\n  gas ?: BigNumber\n}\n\n\nexport type InitCurve = {\n  endpoint:string,\n  curve:CurveType,\n  from: address,\n  gas ?: BigNumber\n}\n\n\nexport type NextEndpoint = {\n  provider:address,\n  endpoint: string,\n  index:number\n}\n\nexport type EndpointParams = {\n  endpoint:string,\n  endpoint_params: string[],\n  from: address,\n  gas ?: BigNumber\n}\nexport interface Filter  {\n  fromBlock ?: number,\n    toBlock ?: number,\n    provider ?: address\n\n}\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ProviderHandler.html":{"url":"interfaces/ProviderHandler.html","title":"interface - ProviderHandler","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ProviderHandler\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/Provider/src/types.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        handleIncoming\n                                \n                                \n                                        handleSubscription\n                                \n                                \n                                        handleUnsubscription\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        handleIncoming\n                                    \n                                \n                                \n                                    \n                                        handleIncoming:     Function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        handleSubscription\n                                    \n                                \n                                \n                                    \n                                        handleSubscription:     Function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        handleUnsubscription\n                                    \n                                \n                                \n                                    \n                                        handleUnsubscription:     Function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {CurveType} from \"@zap/curve\"\nimport {ZapDispatch} from \"@zap/dispatch\";\nimport {ZapRegistry} from \"@zap/registry\";\nimport {ZapBondage} from \"@zap/bondage\";\nimport {ZapArbiter} from \"@zap/arbiter\";\nexport type address = string;\nexport type txid = string|object;\nexport type InitProvider = {\n    public_key : string,\n    title :string,\n    endpoint: string,\n    endpoint_params ?: Array,\n    gas ?: number\n}\n\nexport type InitCurve = {\n    endpoint:string,\n    constants :number[],\n    parts: number[],\n    dividers: number[],\n    gas ?: number\n}\n\nexport type UnsubscribeListen = {\n    subscriber:address,\n    terminator : address,\n    fromBlock : number\n}\n\nexport type ListenQuery = {\n    queryId: string,\n    subscriber :address,\n    fromBlock : number\n}\n\nexport type Respond = {\n    queryId:string,\n    responseParams : string[],\n    dynamic:boolean\n}\n\nexport type ProviderConstructorType = {\n    owner:address,\n    zapDispatch:ZapDispatch,\n    zapBondage: ZapBondage,\n    zapArbiter: ZapArbiter,\n    zapRegistry: ZapRegistry,\n    handler : ProviderHandler\n}\n\nexport interface ProviderHandler{\n    handleIncoming : Function,\n    handleUnsubscription : Function,\n    handleSubscription : Function\n}\n\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ResponseArgs.html":{"url":"interfaces/ResponseArgs.html","title":"interface - ResponseArgs","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ResponseArgs\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/Dispatch/src/types.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        dynamic\n                                \n                                \n                                        from\n                                \n                                \n                                            Optional\n                                        gas\n                                \n                                \n                                        queryId\n                                \n                                \n                                        responseParams\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        dynamic\n                                    \n                                \n                                \n                                    \n                                        dynamic:     boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        from\n                                    \n                                \n                                \n                                    \n                                        from:     address\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     address\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        gas\n                                    \n                                \n                                \n                                    \n                                        gas:     BigNumber\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     BigNumber\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        queryId\n                                    \n                                \n                                \n                                    \n                                        queryId:     string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        responseParams\n                                    \n                                \n                                \n                                    \n                                        responseParams:     Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Array\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import BigNumber from 'bignumber.js';\nexport type address = string;\nexport type txid = string;\nexport type QueryArgs = {\n  provider:address,\n  endpoint: string,\n  query: string,\n  endpointParams : Array,\n  onchainProvider : boolean,\n  onchainSubscriber : boolean,\n    from:address,\n    gas: BigNumber\n}\n\nexport interface ResponseArgs {\n  queryId : string,\n  responseParams: Array,\n  dynamic : boolean,\n  from: address,\n    gas?:BigNumber\n}\n\nexport interface Filter{\n  fromBlock ?: number,\n    toBlock ?: number,\n    provider ?: address\n\n}\n\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Subscriber.html":{"url":"classes/Subscriber.html","title":"class - Subscriber","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  Subscriber\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/Subscriber/src/index.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                handler\n                            \n                            \n                                subscriberOwner\n                            \n                            \n                                zapArbiter\n                            \n                            \n                                zapBondage\n                            \n                            \n                                zapDispatch\n                            \n                            \n                                zapRegistry\n                            \n                            \n                                zapToken\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                bond\n                            \n                            \n                                    Async\n                                hasEnoughZap\n                            \n                            \n                                    Async\n                                subscribe\n                            \n                            \n                                    Async\n                                unBond\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(undefined: SubscriberConstructorType)\n                    \n                \n                        \n                            \n                                Defined in packages/Subscriber/src/index.ts:18\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                  \n                                                        \n                                                                    SubscriberConstructorType\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            handler\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        handler:     SubscriberHandler\n\n                    \n                \n                    \n                        \n                            Type :     SubscriberHandler\n\n                        \n                    \n                        \n                            \n                                    Defined in packages/Subscriber/src/index.ts:13\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            subscriberOwner\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        subscriberOwner:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                        \n                            \n                                    Defined in packages/Subscriber/src/index.ts:12\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            zapArbiter\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        zapArbiter:     ZapArbiter\n\n                    \n                \n                    \n                        \n                            Type :     ZapArbiter\n\n                        \n                    \n                        \n                            \n                                    Defined in packages/Subscriber/src/index.ts:16\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            zapBondage\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        zapBondage:     ZapBondage\n\n                    \n                \n                    \n                        \n                            Type :     ZapBondage\n\n                        \n                    \n                        \n                            \n                                    Defined in packages/Subscriber/src/index.ts:15\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            zapDispatch\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        zapDispatch:     ZapDispatch\n\n                    \n                \n                    \n                        \n                            Type :     ZapDispatch\n\n                        \n                    \n                        \n                            \n                                    Defined in packages/Subscriber/src/index.ts:14\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            zapRegistry\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        zapRegistry:     ZapRegistry\n\n                    \n                \n                    \n                        \n                            Type :     ZapRegistry\n\n                        \n                    \n                        \n                            \n                                    Defined in packages/Subscriber/src/index.ts:17\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            zapToken\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        zapToken:     ZapToken\n\n                    \n                \n                    \n                        \n                            Type :     ZapToken\n\n                        \n                    \n                        \n                            \n                                    Defined in packages/Subscriber/src/index.ts:18\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Async\n                            bond\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        bond(undefined: BondType)\n                    \n                \n\n\n                        \n                            \n                                    Defined in packages/Subscriber/src/index.ts:39\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        \n                                                                    BondType\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Promise\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Async\n                            hasEnoughZap\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        hasEnoughZap(zapRequired: number)\n                    \n                \n\n\n                        \n                            \n                                    Defined in packages/Subscriber/src/index.ts:103\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        zapRequired\n                                                        \n                                                                    number\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Promise\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Async\n                            subscribe\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        subscribe(undefined: SubscribeType)\n                    \n                \n\n\n                        \n                            \n                                    Defined in packages/Subscriber/src/index.ts:82\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        \n                                                                    SubscribeType\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Promise\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Async\n                            unBond\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        unBond(undefined: UnbondType)\n                    \n                \n\n\n                        \n                            \n                                    Defined in packages/Subscriber/src/index.ts:66\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        \n                                                                    UnbondType\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Promise\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        const assert = require('assert');\nimport {BondType,UnbondType,SubscribeType,SubscriberConstructorType,SubscriberHandler} from \"./types\";\nimport {ZapDispatch} from \"@zap/dispatch\";\nimport {ZapRegistry} from \"@zap/registry\";\nimport {ZapBondage} from \"@zap/bondage\";\nimport {ZapArbiter} from \"@zap/arbiter\";\nimport {ZapToken} from \"@zap/zaptoken\";\n\n\nexport class Subscriber  {\n    subscriberOwner:string;\n    handler : SubscriberHandler;\n    zapDispatch : ZapDispatch;\n    zapBondage : ZapBondage;\n    zapArbiter : ZapArbiter;\n    zapRegistry:  ZapRegistry;\n    zapToken: ZapToken;\n\n    constructor({owner,handler,zapToken,zapRegistry,zapDispatch,zapBondage,zapArbiter}:SubscriberConstructorType) {\n        assert(owner, 'owner address is required');\n        this.subscriberOwner = owner;\n        this.handler = handler || {};\n        this.zapToken = zapToken;\n        this.zapDispatch = zapDispatch;\n        this.zapBondage = zapBondage;\n        this.zapArbiter = zapArbiter;\n        this.zapRegistry = zapRegistry;\n    }\n\n\n    /**\n     *\n     * @param {string} provider\n     * @param {string} endpoint\n     * @param {number} zapNum\n     * @returns {Promise}\n     */\n    async bond({provider, endpoint, zapNum}:BondType):Promise{\n       // assert.ok(this.hasEnoughZap(zapNum), 'Insufficient Balance');\n        let approve = await this.zapToken.approve({\n            to: this.zapBondage.contract._address,\n            amount: zapNum, \n            from: this.subscriberOwner\n        });\n\n        //assert.ok(approve, 'fail to approve to Bondage');\n        const bonded = await this.zapBondage.bond({\n            provider: provider,\n            endpoint: endpoint,\n            zapNum: zapNum,\n            from: this.subscriberOwner\n        });\n    \n        // return bonded;\n        return bonded;\n    }\n\n    /**\n     *\n     * @param {string} provider\n     * @param {string} endpoint\n     * @param {number} dots\n     * @returns {Promise}\n     */\n    async unBond({provider, endpoint, dots}:UnbondType):Promise{\n        let boundDots = await this.zapBondage.getBoundDots({subscriber: this.subscriberOwner, provider, endpoint});\n        assert(boundDots >= dots, 'dots to unbond is less than requested');\n        let unBounded = await this.zapBondage.unbond({provider, endpoint, dots, from: this.subscriberOwner});\n        return unBounded;\n    }\n\n\n    /**\n     *\n     * @param {string} provider\n     * @param {string} endpoint\n     * @param {string[]} endpointParams\n     * @param {number} dots\n     * @returns {Promise}\n     */\n    async subscribe({provider, endpoint, endpointParams, dots}:SubscribeType):Promise {\n        let providerPubkey = await this.zapRegistry.getProviderPublicKey(provider);\n        let zapRequired = await this.zapBondage.calcZapForDots({provider, endpoint, dots});\n        let zapBalance = await this.zapToken.balanceOf(this.subscriberOwner);\n        if (zapBalance }\n     */\n    async hasEnoughZap(zapRequired:number):Promise{\n        let balance = await this.zapToken.balanceOf(this.subscriberOwner);\n        return balance > zapRequired;\n    }\n\n}\n\n\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SubscriberHandler.html":{"url":"interfaces/SubscriberHandler.html","title":"interface - SubscriberHandler","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  SubscriberHandler\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/Subscriber/src/types.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        handleResponse\n                                \n                                \n                                            Optional\n                                        handleSubscription\n                                \n                                \n                                            Optional\n                                        handleUnsubscription\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        handleResponse\n                                    \n                                \n                                \n                                    \n                                        handleResponse:     Function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        handleSubscription\n                                    \n                                \n                                \n                                    \n                                        handleSubscription:     Function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Function\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        handleUnsubscription\n                                    \n                                \n                                \n                                    \n                                        handleUnsubscription:     Function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Function\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {ZapDispatch} from \"@zap/dispatch\";\nimport{ZapToken} from '@zap/zaptoken';\nimport {ZapBondage} from \"@zap/bondage\";\nimport{ZapArbiter} from '@zap/arbiter';\nimport {ZapRegistry} from \"@zap/registry\";\n\nexport type BondType = {\n    provider:string,\n    endpoint:string,\n    zapNum :number\n}\nexport type UnbondType = {\n    provider:string,\n    endpoint:string,\n    dots :number\n}\n\nexport type SubscribeType= {\n    provider:string,\n    endpoint:string,\n    dots :number,\n    endpointParams : string[]\n}\nexport type SubscriberConstructorType = {\n  owner:string,\n  zapDispatch:ZapDispatch,\n  zapToken:ZapToken,\n  zapBondage: ZapBondage,\n  zapArbiter: ZapArbiter,\n  zapRegistry: ZapRegistry,\n  handler ?: any\n}\n\nexport interface SubscriberHandler{\n    handleResponse : Function,\n    handleUnsubscription ?: Function,\n    handleSubscription ?: Function\n}\n\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SubscriptionEnd.html":{"url":"interfaces/SubscriptionEnd.html","title":"interface - SubscriptionEnd","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  SubscriptionEnd\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/Arbiter/src/types.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        endpoint\n                                \n                                \n                                        from\n                                \n                                \n                                            Optional\n                                        gas\n                                \n                                \n                                            Optional\n                                        provider\n                                \n                                \n                                            Optional\n                                        subscriber\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        endpoint\n                                    \n                                \n                                \n                                    \n                                        endpoint:     string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        from\n                                    \n                                \n                                \n                                    \n                                        from:     address\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     address\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        gas\n                                    \n                                \n                                \n                                    \n                                        gas:     number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        provider\n                                    \n                                \n                                \n                                    \n                                        provider:     address\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     address\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        subscriber\n                                    \n                                \n                                \n                                    \n                                        subscriber:     address\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     address\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        const DEFAULT_GAS = 400000\n/** ethereum address */\nexport type address = string\nexport type txid = string\nexport interface SubscriptionInit {\n    provider:address,\n    endpoint :string,\n    endpoint_params: Array,\n    blocks : number,\n    pubkey:number,\n    from: address,\n    gas?: number\n}\n\nexport interface SubscriptionEnd {\n    provider?:address,\n    subscriber ?:address,\n    endpoint : string,\n    from: address,\n    gas?:number\n}\n\nexport interface Filter {\n    fromBlock ?: number,\n    toBlock ?: number,\n    provider ?: address,\n    subscriber ?:address,\n    terminator ?:address\n}\n\nexport interface SubscriptionType {\n    provider:address,\n    subscriber:address,\n    endpoint:string\n}\n\n\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SubscriptionInit.html":{"url":"interfaces/SubscriptionInit.html","title":"interface - SubscriptionInit","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  SubscriptionInit\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/Arbiter/src/types.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        blocks\n                                \n                                \n                                        endpoint\n                                \n                                \n                                        endpoint_params\n                                \n                                \n                                        from\n                                \n                                \n                                            Optional\n                                        gas\n                                \n                                \n                                        provider\n                                \n                                \n                                        pubkey\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        blocks\n                                    \n                                \n                                \n                                    \n                                        blocks:     number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        endpoint\n                                    \n                                \n                                \n                                    \n                                        endpoint:     string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        endpoint_params\n                                    \n                                \n                                \n                                    \n                                        endpoint_params:     Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Array\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        from\n                                    \n                                \n                                \n                                    \n                                        from:     address\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     address\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        gas\n                                    \n                                \n                                \n                                    \n                                        gas:     number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        provider\n                                    \n                                \n                                \n                                    \n                                        provider:     address\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     address\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        pubkey\n                                    \n                                \n                                \n                                    \n                                        pubkey:     number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        const DEFAULT_GAS = 400000\n/** ethereum address */\nexport type address = string\nexport type txid = string\nexport interface SubscriptionInit {\n    provider:address,\n    endpoint :string,\n    endpoint_params: Array,\n    blocks : number,\n    pubkey:number,\n    from: address,\n    gas?: number\n}\n\nexport interface SubscriptionEnd {\n    provider?:address,\n    subscriber ?:address,\n    endpoint : string,\n    from: address,\n    gas?:number\n}\n\nexport interface Filter {\n    fromBlock ?: number,\n    toBlock ?: number,\n    provider ?: address,\n    subscriber ?:address,\n    terminator ?:address\n}\n\nexport interface SubscriptionType {\n    provider:address,\n    subscriber:address,\n    endpoint:string\n}\n\n\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SubscriptionType.html":{"url":"interfaces/SubscriptionType.html","title":"interface - SubscriptionType","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  SubscriptionType\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/Arbiter/src/types.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        endpoint\n                                \n                                \n                                        provider\n                                \n                                \n                                        subscriber\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        endpoint\n                                    \n                                \n                                \n                                    \n                                        endpoint:     string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        provider\n                                    \n                                \n                                \n                                    \n                                        provider:     address\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     address\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        subscriber\n                                    \n                                \n                                \n                                    \n                                        subscriber:     address\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     address\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        const DEFAULT_GAS = 400000\n/** ethereum address */\nexport type address = string\nexport type txid = string\nexport interface SubscriptionInit {\n    provider:address,\n    endpoint :string,\n    endpoint_params: Array,\n    blocks : number,\n    pubkey:number,\n    from: address,\n    gas?: number\n}\n\nexport interface SubscriptionEnd {\n    provider?:address,\n    subscriber ?:address,\n    endpoint : string,\n    from: address,\n    gas?:number\n}\n\nexport interface Filter {\n    fromBlock ?: number,\n    toBlock ?: number,\n    provider ?: address,\n    subscriber ?:address,\n    terminator ?:address\n}\n\nexport interface SubscriptionType {\n    provider:address,\n    subscriber:address,\n    endpoint:string\n}\n\n\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/UnbondArgs.html":{"url":"interfaces/UnbondArgs.html","title":"interface - UnbondArgs","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  UnbondArgs\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/Bondage/src/types.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        dots\n                                \n                                \n                                        endpoint\n                                \n                                \n                                        from\n                                \n                                \n                                            Optional\n                                        gas\n                                \n                                \n                                        provider\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        dots\n                                    \n                                \n                                \n                                    \n                                        dots:     number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        endpoint\n                                    \n                                \n                                \n                                    \n                                        endpoint:     string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        from\n                                    \n                                \n                                \n                                    \n                                        from:     address\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     address\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        gas\n                                    \n                                \n                                \n                                    \n                                        gas:     number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        provider\n                                    \n                                \n                                \n                                    \n                                        provider:     address\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     address\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export type address = string;\nexport type txid = string;\nexport interface BondArgs {\n    provider: address;\n    endpoint: string;\n    zapNum: number;\n    from: address;\n    gas ?: number;\n}\n\nexport interface UnbondArgs {\n\tprovider: address;\n    endpoint: string;\n    dots: number;\n    from: address;\n    gas ?: number;\n}\n\nexport interface BondageArgs {\n\tsubscriber ?: address;\n\tprovider: address;\n\tendpoint: string;\n\tdots ?: number ;\n\tzapNum ?: number;\n}\nexport interface CalcBondRateType {\n    provider: address;\n    endpoint: string;\n    zapNum: number;\n}\n\nexport interface Filter {\n    provider ?: address;\n    fromBlock ?: number;\n    toBlock ?: number;\n}\nexport interface listenEvent {\n    filter ?: Filter;\n    callback: Function;\n}\n\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Utils.html":{"url":"classes/Utils.html","title":"class - Utils","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  Utils\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/Utils/src/index.ts\n        \n\n\n\n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                clearBuild\n                            \n                            \n                                    Static\n                                Constants\n                            \n                            \n                                    Static\n                                getArtifacts\n                            \n                            \n                                    Static\n                                migrateContracts\n                            \n                            \n                                    Static\n                                startGanacheServer\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                fromZapBase\n                            \n                            \n                                    Static\n                                getHexBuffer\n                            \n                            \n                                    Static\n                                getHexString\n                            \n                            \n                                    Static\n                                normalizeProvider\n                            \n                            \n                                    Static\n                                toHex\n                            \n                            \n                                    Static\n                                toZapBase\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            clearBuild\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        clearBuild:     \n\n                    \n                \n                    \n                        \n                            Default value : clearBuild\n                        \n                    \n                        \n                            \n                                    Defined in packages/Utils/src/index.ts:107\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            Constants\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        Constants:     \n\n                    \n                \n                    \n                        \n                            Default value : require(\"./constants\")\n                        \n                    \n                        \n                            \n                                    Defined in packages/Utils/src/index.ts:109\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            getArtifacts\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        getArtifacts:     \n\n                    \n                \n                    \n                        \n                            Default value : getArtifacts\n                        \n                    \n                        \n                            \n                                    Defined in packages/Utils/src/index.ts:105\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            migrateContracts\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        migrateContracts:     \n\n                    \n                \n                    \n                        \n                            Default value : migrateContracts\n                        \n                    \n                        \n                            \n                                    Defined in packages/Utils/src/index.ts:106\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            startGanacheServer\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        startGanacheServer:     \n\n                    \n                \n                    \n                        \n                            Default value : startGanacheServer\n                        \n                    \n                        \n                            \n                                    Defined in packages/Utils/src/index.ts:108\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            fromZapBase\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        fromZapBase(num: number | string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in packages/Utils/src/index.ts:71\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        num\n                                                        \n                                                                    number | string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     number\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            getHexBuffer\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        getHexBuffer(specifier: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in packages/Utils/src/index.ts:31\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        specifier\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     any\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            getHexString\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        getHexString(str: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in packages/Utils/src/index.ts:35\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        str\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     string\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            normalizeProvider\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        normalizeProvider(provider: ZapProviderType)\n                    \n                \n\n\n                        \n                            \n                                    Defined in packages/Utils/src/index.ts:80\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        provider\n                                                        \n                                                                    ZapProviderType\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     ZapProviderType\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            toHex\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        toHex(str: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in packages/Utils/src/index.ts:18\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        str\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     string\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            toZapBase\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        toZapBase(num: number)\n                    \n                \n\n\n                        \n                            \n                                    Defined in packages/Utils/src/index.ts:62\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        num\n                                                        \n                                                                    number\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     any\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import {readdirSync} from \"fs\";\nimport {ZapProviderType} from \"./types\";\nimport {clearBuild, getArtifacts, migrateContracts, startGanacheServer} from \"./migrations\";\nconst {utf8ToHex,toBN} = require(\"web3-utils\");\nconst Web3 = require('web3');\nconst web3 = new Web3();\n\n/**\n * @class\n * Utils\n */\nexport class Utils {\n    /**\n     *\n     * @param {string} str\n     * @returns {string}\n     */\n    static toHex(str: string) {\n        let hex = '';\n        for (let i = 0; i \n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ZapArbiter.html":{"url":"classes/ZapArbiter.html","title":"class - ZapArbiter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  ZapArbiter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/Arbiter/src/index.ts\n        \n\n\n            \n                Extends\n            \n            \n                    BaseContract\n            \n\n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                contract\n                            \n                            \n                                networkId\n                            \n                            \n                                provider\n                            \n                            \n                                web3\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                endSubscriptionProvider\n                            \n                            \n                                    Async\n                                endSubscriptionSubscriber\n                            \n                            \n                                    Async\n                                getSubscription\n                            \n                            \n                                    Async\n                                initiateSubscription\n                            \n                            \n                                listen\n                            \n                            \n                                listenSubscriptionEnd\n                            \n                            \n                                listenSubscriptionStart\n                            \n                            \n                                    Async\n                                getContractOwner\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(undefined: BaseContractType)\n                    \n                \n                        \n                            \n                                Defined in packages/Arbiter/src/index.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                  \n                                                        \n                                                                    BaseContractType\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            contract\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        contract:     any\n\n                    \n                \n                    \n                        \n                            Type :     any\n\n                        \n                    \n                            \n                                \n                                    Inherited from     BaseContract\n\n                                \n                            \n                        \n                            \n                                    Defined in BaseContract:14\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            networkId\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        networkId:     number\n\n                    \n                \n                    \n                        \n                            Type :     number\n\n                        \n                    \n                            \n                                \n                                    Inherited from     BaseContract\n\n                                \n                            \n                        \n                            \n                                    Defined in BaseContract:15\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            provider\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        provider:     any\n\n                    \n                \n                    \n                        \n                            Type :     any\n\n                        \n                    \n                            \n                                \n                                    Inherited from     BaseContract\n\n                                \n                            \n                        \n                            \n                                    Defined in BaseContract:12\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            web3\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        web3:     any\n\n                    \n                \n                    \n                        \n                            Type :     any\n\n                        \n                    \n                            \n                                \n                                    Inherited from     BaseContract\n\n                                \n                            \n                        \n                            \n                                    Defined in BaseContract:13\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Async\n                            endSubscriptionProvider\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        endSubscriptionProvider(undefined: SubscriptionEnd)\n                    \n                \n\n\n                        \n                            \n                                    Defined in packages/Arbiter/src/index.ts:92\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        \n                                                                    SubscriptionEnd\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Promise\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Async\n                            endSubscriptionSubscriber\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        endSubscriptionSubscriber(undefined: SubscriptionEnd)\n                    \n                \n\n\n                        \n                            \n                                    Defined in packages/Arbiter/src/index.ts:75\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        \n                                                                    SubscriptionEnd\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Promise\n\n                            \n                                \n                                    unsubscribe txid\n\n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Async\n                            getSubscription\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        getSubscription(undefined: SubscriptionType)\n                    \n                \n\n\n                        \n                            \n                                    Defined in packages/Arbiter/src/index.ts:60\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        \n                                                                    SubscriptionType\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     {}\n\n                            \n                                \n                                    Subscription Information\n\n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Async\n                            initiateSubscription\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        initiateSubscription(undefined: SubscriptionInit)\n                    \n                \n\n\n                        \n                            \n                                    Defined in packages/Arbiter/src/index.ts:35\n                            \n                        \n\n\n                \n                    \n                            Start subscription with a provider's endpoint\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        \n                                                                    SubscriptionInit\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Promise\n\n                            \n                                \n                                    txid of initiate transaction\n\n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            listen\n                            \n                            \n                        \n                    \n                \n                \n                    \nlisten(callback: Function)\n                    \n                \n\n\n                        \n                            \n                                    Defined in packages/Arbiter/src/index.ts:146\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        callback\n                                                        \n                                                                    Function\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     any\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            listenSubscriptionEnd\n                            \n                            \n                        \n                    \n                \n                \n                    \nlistenSubscriptionEnd(filters: Filter, callback: Function)\n                    \n                \n\n\n                        \n                            \n                                    Defined in packages/Arbiter/src/index.ts:106\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Default value\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        filters\n                                                        \n                                                                    Filter\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                        \n                                                                {}\n                                                        \n\n                                                        \n                                                                object\n\n                                                        \n                                                \n                                                \n                                                        callback\n                                                        \n                                                                    Function\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                        \n                                                        \n\n                                                        \n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     any\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            listenSubscriptionStart\n                            \n                            \n                        \n                    \n                \n                \n                    \nlistenSubscriptionStart(filters: Filter, callback: Function)\n                    \n                \n\n\n                        \n                            \n                                    Defined in packages/Arbiter/src/index.ts:126\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Default value\n                                            \n                                        \n                                        \n                                                \n                                                        filters\n                                                        \n                                                                    Filter\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                        \n                                                                {}\n                                                        \n\n                                                \n                                                \n                                                        callback\n                                                        \n                                                                    Function\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                        \n                                                        \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     any\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Async\n                            getContractOwner\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        getContractOwner()\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     BaseContract\n\n                                \n                            \n                        \n                            \n                                    Defined in BaseContract:49\n                            \n                        \n\n\n                \n                    \n                            Get Contract owner address\n\n\n                            \n                            \n                            \n                                Returns :     Promise\n\n                            \n                                \n                                    owner's address of this contract instance\n\n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import  {BaseContract,BaseContractType} from '@zap/basecontract';\nimport {SubscriptionInit,SubscriptionEnd,Filter,SubscriptionType,txid} from \"./types\"\nconst {toBN,utf8ToHex} = require ('web3-utils');\nimport {Utils} from \"@zap/utils\"\n\n/**\n * @class\n * Provides interface to  Arbiter contract for managing subscriptions activities\n */\nexport class ZapArbiter extends BaseContract {\n\n    /**\n     * @constructor\n     * @augments BaseContract\n     * @param {string} artifactsDir\n     * @param {string} networkId\n     * @param  networkProvider : Ethereum network provider\n     */\n    constructor({artifactsDir, networkId,networkProvider}:BaseContractType){\n        super({artifactsDir,artifactName:'Arbiter',networkId,networkProvider});\n    }\n\n\n    /**\n     *Start subscription with a provider's endpoint\n     * @param {address} provider\n     * @param {string} endpoint\n     * @param {Array} endpoint_params\n     * @param {number} blocks that subscription will last\n     * @param {number} provider's public key\n     * @param {address} from: subscriber\n     * @param {number} gas (optional)\n     * @returns {Promise} txid of initiate transaction\n     */\n    async initiateSubscription(\n        {provider, endpoint, endpoint_params, blocks, pubkey, from, gas=Utils.Constants.DEFAULT_GAS} : SubscriptionInit):Promise {\n        try {\n            for (let i in endpoint_params){\n                endpoint_params[i] = utf8ToHex(endpoint_params[i]);\n            }\n\n            return await this.contract.methods.initiateSubscription(\n                provider,\n                utf8ToHex(endpoint),\n                endpoint_params,\n                toBN(pubkey),\n                toBN(blocks)).send({from, gas});\n        } catch (err) {\n            throw err;\n        }\n    }\n\n    /**\n     * @func Get Subscription of a subscriber for a provider's endpoint\n     * @param {address} provider\n     * @param {address} subscriber\n     * @param {string} endpoint\n     * @returns {Promise} Subscription Information\n     */\n    async getSubscription({provider,subscriber,endpoint}:SubscriptionType){\n        let subscription = await this.contract.methods.getSubscription(provider,subscriber,utf8ToHex(endpoint)).call();\n        console.log(\"subscription result : \",subscription)\n         return subscription\n\n    }\n\n    /**\n     * @func Subscriber ends subscription for a provider's endpoint\n     * @param {address} provider\n     * @param {string} endpoint\n     * @param {address} from : subscriber\n     * @param {number} gas\n     * @returns {Promise} unsubscribe txid\n     */\n    async endSubscriptionSubscriber({provider, endpoint, from, gas=Utils.Constants.DEFAULT_GAS}:SubscriptionEnd) :Promise{\n        let unSubscription:any\n        unSubscription =  await this.contract.methods.endSubscriptionSubscriber(\n            provider,\n            utf8ToHex(endpoint))\n            .send({from, gas});\n        return unSubscription\n    }\n\n    /**\n     * @func Provider can end subscription of a subscriber\n     * @param {address} subscriber\n     * @param {string} endpoint\n     * @param {address} from : provider\n     * @param {number} gas\n     * @returns {Promise}\n     */\n    async endSubscriptionProvider({subscriber, endpoint, from, gas=Utils.Constants.DEFAULT_GAS}:SubscriptionEnd) :Promise{\n        let unSubscription:any;\n        unSubscription= await this.contract.methods.endSubscriptionProvider(\n            subscriber,\n            utf8ToHex(endpoint))\n            .send({from, gas});\n        return unSubscription;\n}\n\n    /**\n     *@func  Listen to unsubscribe events , with or without filters\n     * @param {Filter} filters object\n     * @param {Function} callback\n     */\n    listenSubscriptionEnd(filters:Filter={}, callback:Function){\n        try {\n            // Specify filters and watch Incoming event\n            let filter = this.contract.events\n                .DataSubscriptionEnd(\n                    filters,\n                    { fromBlock: filters.fromBlock ? filters.fromBlock : 0, toBlock: 'latest' },\n                    callback);\n\n            return filter;\n        } catch (err) {\n            throw err;\n        }\n    }\n\n    /**\n     * @func Listen to subscribe events, with or without filters\n     * @param {Filter} filters\n     * @param {Function} callback\n     */\n    listenSubscriptionStart(filters:Filter ={}, callback:Function){\n        try {\n            // Specify filters and watch Incoming event\n            let filter = this.contract.events.DataPurchase(\n                filters,\n                { fromBlock: filters.fromBlock ? filters.fromBlock : 0, toBlock: 'latest' }, \n                callback);\n\n            return filter;\n        } catch (err) {\n            throw err;\n        }\n    }\n\n\n    /**\n     * @func Listen to all Arbiter contract's events based on filters\n     * @param {Filter} filter\n     * @param {Function} callback\n     */\n    listen(callback:Function){\n        return this.contract.events.allEvents({fromBlock: 0, toBlock: 'latest'}, callback);\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ZapDispatch.html":{"url":"classes/ZapDispatch.html","title":"class - ZapDispatch","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  ZapDispatch\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/Dispatch/src/index.ts\n        \n\n            \n                Description\n            \n            \n                Provides interface to Dispatch contract\n\n            \n\n            \n                Extends\n            \n            \n                    BaseContract\n            \n\n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                contract\n                            \n                            \n                                networkId\n                            \n                            \n                                provider\n                            \n                            \n                                web3\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                listen\n                            \n                            \n                                listenFulfillQuery\n                            \n                            \n                                listenIncoming\n                            \n                            \n                                listenOffchainResponse\n                            \n                            \n                                    Async\n                                queryData\n                            \n                            \n                                    Async\n                                respond\n                            \n                            \n                                    Async\n                                getContractOwner\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(undefined: BaseContractType)\n                    \n                \n                        \n                            \n                                Defined in packages/Dispatch/src/index.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                  \n                                                        \n                                                                    BaseContractType\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            contract\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        contract:     any\n\n                    \n                \n                    \n                        \n                            Type :     any\n\n                        \n                    \n                            \n                                \n                                    Inherited from     BaseContract\n\n                                \n                            \n                        \n                            \n                                    Defined in BaseContract:14\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            networkId\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        networkId:     number\n\n                    \n                \n                    \n                        \n                            Type :     number\n\n                        \n                    \n                            \n                                \n                                    Inherited from     BaseContract\n\n                                \n                            \n                        \n                            \n                                    Defined in BaseContract:15\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            provider\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        provider:     any\n\n                    \n                \n                    \n                        \n                            Type :     any\n\n                        \n                    \n                            \n                                \n                                    Inherited from     BaseContract\n\n                                \n                            \n                        \n                            \n                                    Defined in BaseContract:12\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            web3\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        web3:     any\n\n                    \n                \n                    \n                        \n                            Type :     any\n\n                        \n                    \n                            \n                                \n                                    Inherited from     BaseContract\n\n                                \n                            \n                        \n                            \n                                    Defined in BaseContract:13\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            listen\n                            \n                            \n                        \n                    \n                \n                \n                    \nlisten(filters: Filter, callback: Function)\n                    \n                \n\n\n                        \n                            \n                                    Defined in packages/Dispatch/src/index.ts:104\n                            \n                        \n\n\n                \n                    \n                            Listen for all events with filters\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        filters\n                                                        \n                                                                    Filter\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        callback\n                                                        \n                                                                    Function\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            listenFulfillQuery\n                            \n                            \n                        \n                    \n                \n                \n                    \nlistenFulfillQuery(filters: object, callback: Function)\n                    \n                \n\n\n                        \n                            \n                                    Defined in packages/Dispatch/src/index.ts:125\n                            \n                        \n\n\n                \n                    \n                            Listen to FUlFill Query when providers respond\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Default value\n                                            \n                                        \n                                        \n                                                \n                                                        filters\n                                                        \n                                                                    object\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                        \n                                                                {}\n                                                        \n\n                                                \n                                                \n                                                        callback\n                                                        \n                                                                    Function\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                        \n                                                        \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            listenIncoming\n                            \n                            \n                        \n                    \n                \n                \n                    \nlistenIncoming(filters: object, callback: Function)\n                    \n                \n\n\n                        \n                            \n                                    Defined in packages/Dispatch/src/index.ts:116\n                            \n                        \n\n\n                \n                    \n                            Listen to Query Incoming events with filters\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Default value\n                                            \n                                        \n                                        \n                                                \n                                                        filters\n                                                        \n                                                                    object\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                        \n                                                                {}\n                                                        \n\n                                                \n                                                \n                                                        callback\n                                                        \n                                                                    Function\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                        \n                                                        \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            listenOffchainResponse\n                            \n                            \n                        \n                    \n                \n                \n                    \nlistenOffchainResponse(filters: object, callback: Function)\n                    \n                \n\n\n                        \n                            \n                                    Defined in packages/Dispatch/src/index.ts:134\n                            \n                        \n\n\n                \n                    \n                            Listen to Offchain responses from providers\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Default value\n                                            \n                                        \n                                        \n                                                \n                                                        filters\n                                                        \n                                                                    object\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                        \n                                                                {}\n                                                        \n\n                                                \n                                                \n                                                        callback\n                                                        \n                                                                    Function\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                        \n                                                        \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Async\n                            queryData\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        queryData(undefined: QueryArgs)\n                    \n                \n\n\n                        \n                            \n                                    Defined in packages/Dispatch/src/index.ts:30\n                            \n                        \n\n\n                \n                    \n                            Subscriber query data to a provider's endpoint\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        \n                                                                    QueryArgs\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Promise\n\n                            \n                                \n                                    txid of query transaction\n\n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Async\n                            respond\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        respond(undefined: ResponseArgs)\n                    \n                \n\n\n                        \n                            \n                                    Defined in packages/Dispatch/src/index.ts:58\n                            \n                        \n\n\n                \n                    \n                            Provider responds to a query it received\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        \n                                                                    ResponseArgs\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Promise\n\n                            \n                                \n                                    txid of respond method\n\n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Async\n                            getContractOwner\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        getContractOwner()\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     BaseContract\n\n                                \n                            \n                        \n                            \n                                    Defined in BaseContract:49\n                            \n                        \n\n\n                \n                    \n                            Get Contract owner address\n\n\n                            \n                            \n                            \n                                Returns :     Promise\n\n                            \n                                \n                                    owner's address of this contract instance\n\n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import {BaseContract,BaseContractType} from '@zap/basecontract';\nimport {QueryArgs,ResponseArgs,Filter,txid} from './types'\nimport {Utils} from \"@zap/utils\";\nconst {toBN,utf8ToHex} = require (\"web3-utils\");\n\n/**\n * Provides interface to Dispatch contract\n * @extends BaseContract\n * @param {string} artifactsDir\n * @param {number} networkId\n * @param networkProvider : Ethereum provider instance\n */\nexport class ZapDispatch extends BaseContract {\n    constructor({artifactsDir=undefined,networkId=undefined,networkProvider=undefined}:BaseContractType){\n        super({artifactsDir,artifactName:\"Dispatch\",networkId,networkProvider});\n    }\n\n    /**\n     * Subscriber query data to a provider's endpoint\n     * @param {address} provider\n     * @param {string} query\n     * @param {string} endpoint\n     * @param {Array} endpointParams\n     * @param {boolean} onchainProvider\n     * @param {boolean} onchainSubscriber\n     * @param {address} from\n     * @param {BigNumber} gas\n     * @returns {Promise} txid of query transaction\n     */\n    async queryData({provider, query, endpoint, endpointParams, onchainProvider, onchainSubscriber,from,gas=Utils.Constants.DEFAULT_GAS}:QueryArgs):Promise{\n        if(endpointParams.length > 0) {\n            for (let i in endpointParams) {\n                if (!endpointParams[i].startsWith('0x')) {\n                    endpointParams[i] = utf8ToHex(endpointParams[i]);\n                }\n            }\n        }\n      \n        return  await this.contract.methods.query(\n            provider,\n            query,\n            utf8ToHex(endpoint),\n            endpointParams, // endpoint-specific endpointParams\n            onchainProvider,\n            onchainSubscriber).send({from, gas});\n    }\n\n\n    /**\n     * Provider responds to a query it received\n     * @param {string} queryId\n     * @param {Array} responseParams\n     * @param {boolean} dynamic number of responses string\n     * @param {address} from : provider\n     * @param {BigNumber} gas\n     * @returns {Promise} txid of respond method\n     */\n    async respond({queryId, responseParams, dynamic, from,gas=Utils.Constants.DEFAULT_GAS}:ResponseArgs) :Promise{\n        if (dynamic){\n            return this.contract.methods.respondBytes32Array(\n                queryId,\n                responseParams).send({from,gas});\n        }\n        switch (responseParams.length) {\n            case 1: {\n                return this.contract.methods.respond1(\n                    queryId,\n                    responseParams[0]).send({ from,gas});\n            }\n            case 2: {\n                return this.contract.methods.respond2(\n                    queryId,\n                    responseParams[0],\n                    responseParams[1]).send({ from,gas });\n            }\n            case 3: {\n                return this.contract.methods.respond3(\n                    queryId,\n                    responseParams[0],\n                    responseParams[1],\n                    responseParams[2]).send({ from,gas });\n            }\n            case 4: {\n                return this.contract.methods.respond4(\n                    queryId,\n                    responseParams[0],\n                    responseParams[1],\n                    responseParams[2],\n                    responseParams[3]).send({ from,gas });\n            }\n            default: {\n                throw new Error('Invalid number of response parameters');\n            }\n        }\n    }\n\n    // === Events ===//\n\n    /**\n     * Listen for all events with filters\n     * @param {Filter} filters\n     * @param {Function} callback\n     */\n    listen(filters :Filter, callback:Function):void {\n        this.contract.events.allEvents(\n            filters,\n            { fromBlock: filters.fromBlock ? filters.fromBlock : 0, toBlock: 'latest' },\n            callback);\n    }\n\n    /**\n     * Listen to Query Incoming events with filters\n     * @param {object} filters\n     * @param {Function} callback\n     */\n    listenIncoming(filters:object ={}, callback:Function):void{\n        this.contract.events.Incoming(filters, callback);\n    }\n\n    /**\n     * Listen to FUlFill Query when providers respond\n     * @param {object} filters\n     * @param {Function} callback\n     */\n    listenFulfillQuery(filters:object={}, callback:Function):void{\n        this.contract.events.FulfillQuery(filters, callback);\n    }\n\n    /**\n     * Listen to Offchain responses from providers\n     * @param {object} filters\n     * @param {Function} callback\n     */\n    listenOffchainResponse(filters:object={}, callback:Function):void{\n        this.contract.events.OffchainResponse(filters, callback);\n    }\n\n}\n\nexport * from \"./types\"\n\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ZapProvider.html":{"url":"classes/ZapProvider.html","title":"class - ZapProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  ZapProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/Provider/src/index.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                curve\n                            \n                            \n                                handler\n                            \n                            \n                                providerOwner\n                            \n                            \n                                pubkey\n                            \n                            \n                                title\n                            \n                            \n                                zapArbiter\n                            \n                            \n                                zapBondage\n                            \n                            \n                                zapDispatch\n                            \n                            \n                                zapRegistry\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                calcDotsForZap\n                            \n                            \n                                    Async\n                                getCurve\n                            \n                            \n                                    Async\n                                getPubkey\n                            \n                            \n                                    Async\n                                getTitle\n                            \n                            \n                                    Async\n                                getZapBound\n                            \n                            \n                                    Async\n                                getZapRequired\n                            \n                            \n                                    Async\n                                initiateProvider\n                            \n                            \n                                    Async\n                                initiateProviderCurve\n                            \n                            \n                                    Async\n                                listenQueries\n                            \n                            \n                                    Async\n                                listenSubscribes\n                            \n                            \n                                    Async\n                                listenUnsubscribes\n                            \n                            \n                                    Async\n                                respond\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(undefined: ProviderConstructorType)\n                    \n                \n                        \n                            \n                                Defined in packages/Provider/src/index.ts:23\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                  \n                                                        \n                                                                    ProviderConstructorType\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            curve\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        curve:     CurveType | undefined\n\n                    \n                \n                    \n                        \n                            Type :     CurveType | undefined\n\n                        \n                    \n                        \n                            \n                                    Defined in packages/Provider/src/index.ts:21\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            handler\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        handler:     ProviderHandler\n\n                    \n                \n                    \n                        \n                            Type :     ProviderHandler\n\n                        \n                    \n                        \n                            \n                                    Defined in packages/Provider/src/index.ts:16\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            providerOwner\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        providerOwner:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                        \n                            \n                                    Defined in packages/Provider/src/index.ts:15\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            pubkey\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        pubkey:     number | string\n\n                    \n                \n                    \n                        \n                            Type :     number | string\n\n                        \n                    \n                        \n                            \n                                    Defined in packages/Provider/src/index.ts:23\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            title\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        title:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                        \n                            \n                                    Defined in packages/Provider/src/index.ts:22\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            zapArbiter\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        zapArbiter:     ZapArbiter\n\n                    \n                \n                    \n                        \n                            Type :     ZapArbiter\n\n                        \n                    \n                        \n                            \n                                    Defined in packages/Provider/src/index.ts:19\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            zapBondage\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        zapBondage:     ZapBondage\n\n                    \n                \n                    \n                        \n                            Type :     ZapBondage\n\n                        \n                    \n                        \n                            \n                                    Defined in packages/Provider/src/index.ts:18\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            zapDispatch\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        zapDispatch:     ZapDispatch\n\n                    \n                \n                    \n                        \n                            Type :     ZapDispatch\n\n                        \n                    \n                        \n                            \n                                    Defined in packages/Provider/src/index.ts:17\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            zapRegistry\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        zapRegistry:     ZapRegistry\n\n                    \n                \n                    \n                        \n                            Type :     ZapRegistry\n\n                        \n                    \n                        \n                            \n                                    Defined in packages/Provider/src/index.ts:20\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Async\n                            calcDotsForZap\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        calcDotsForZap(undefined: literal type)\n                    \n                \n\n\n                        \n                            \n                                    Defined in packages/Provider/src/index.ts:138\n                            \n                        \n\n\n                \n                    \n                            Calculate number of dots that subscriber can use for inquired number of Zap Tokens\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        \n                                                                    literal type\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Promise\n\n                            \n                                \n                                    number of dots subscriber can get\n\n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Async\n                            getCurve\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        getCurve(endpoint: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in packages/Provider/src/index.ts:102\n                            \n                        \n\n\n                \n                    \n                            Get Curve of an owned endpoint\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        endpoint\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Promise\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Async\n                            getPubkey\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        getPubkey()\n                    \n                \n\n\n                        \n                            \n                                    Defined in packages/Provider/src/index.ts:89\n                            \n                        \n\n\n                \n                    \n                            Get public key of this provider from Registry contract\n\n\n                            \n                            \n                            \n                                Returns :     Promise\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Async\n                            getTitle\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        getTitle()\n                    \n                \n\n\n                        \n                            \n                                    Defined in packages/Provider/src/index.ts:76\n                            \n                        \n\n\n                \n                    \n                            Get title of this provider from Registry contract\n\n\n                            \n                            \n                            \n                                Returns :     Promise\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Async\n                            getZapBound\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        getZapBound(endpoint: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in packages/Provider/src/index.ts:115\n                            \n                        \n\n\n                \n                    \n                            Get amount Zap bound to an owned endpoint\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        endpoint\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Promise\n\n                            \n                                \n                                    number of Zap Token bound\n\n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Async\n                            getZapRequired\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        getZapRequired(undefined: literal type)\n                    \n                \n\n\n                        \n                            \n                                    Defined in packages/Provider/src/index.ts:127\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        \n                                                                    literal type\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Promise\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Async\n                            initiateProvider\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        initiateProvider(undefined: InitProvider)\n                    \n                \n\n\n                        \n                            \n                                    Defined in packages/Provider/src/index.ts:48\n                            \n                        \n\n\n                \n                    \n                            Call ZapRegistry to create a new provider in Registry contract\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        \n                                                                    InitProvider\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Promise\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Async\n                            initiateProviderCurve\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        initiateProviderCurve(undefined: InitCurve)\n                    \n                \n\n\n                        \n                            \n                                    Defined in packages/Provider/src/index.ts:62\n                            \n                        \n\n\n                \n                    \n                            Initiate Curve for an endpoint\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        \n                                                                    InitCurve\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Promise\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Async\n                            listenQueries\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        listenQueries(undefined: ListenQuery)\n                    \n                \n\n\n                        \n                            \n                                    Defined in packages/Provider/src/index.ts:195\n                            \n                        \n\n\n                \n                    \n                            Listen to Queries events, managed by Dispatch contract\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        \n                                                                    ListenQuery\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Promise\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Async\n                            listenSubscribes\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        listenSubscribes(undefined: literal type)\n                    \n                \n\n\n                        \n                            \n                                    Defined in packages/Provider/src/index.ts:153\n                            \n                        \n\n\n                \n                    \n                            listen to new subscription events to this provider, managed by Arbiter contract\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        \n                                                                    literal type\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Promise\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Async\n                            listenUnsubscribes\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        listenUnsubscribes(undefined: UnsubscribeListen)\n                    \n                \n\n\n                        \n                            \n                                    Defined in packages/Provider/src/index.ts:174\n                            \n                        \n\n\n                \n                    \n                            Listen to unsubscription events to this provider, managed by Arbiter contract\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        \n                                                                    UnsubscribeListen\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Promise\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Async\n                            respond\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        respond(undefined: Respond)\n                    \n                \n\n\n                        \n                            \n                                    Defined in packages/Provider/src/index.ts:216\n                            \n                        \n\n\n                \n                    \n                            Respond to a query\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        \n                                                                    Respond\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Promise\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import {Provider} from \"web3/types\";\n\nconst assert = require(\"assert\");\nimport {Curve,CurveType} from \"@zap/curve\"\nimport {InitProvider, InitCurve, UnsubscribeListen, ListenQuery, Respond, ProviderConstructorType,ProviderHandler,address,txid} from \"./types\";\nimport {ZapDispatch} from \"@zap/dispatch\";\nimport {ZapRegistry} from \"@zap/registry\";\nimport {ZapBondage} from \"@zap/bondage\";\nimport {ZapArbiter} from \"@zap/arbiter\";\nconst {hexToUtf8} = require(\"web3-utils\");\nconst EventEmitter = require('events');\n\n\nexport class ZapProvider  {\n    providerOwner:string;\n    handler : ProviderHandler;\n    zapDispatch : ZapDispatch;\n    zapBondage : ZapBondage;\n    zapArbiter : ZapArbiter;\n    zapRegistry:  ZapRegistry;\n    curve : CurveType | undefined;\n    title:string;\n    pubkey:number|string\n\n    constructor({owner,handler,zapRegistry,zapDispatch,zapBondage,zapArbiter}:ProviderConstructorType) {\n        assert(owner, 'owner address is required');\n        this.providerOwner = owner;\n        this.handler = handler;\n        this.zapDispatch = zapDispatch;\n        this.zapBondage = zapBondage;\n        this.zapArbiter = zapArbiter;\n        this.zapRegistry = zapRegistry;\n        this.curve = undefined;\n        this.title = \"\";\n        this.pubkey = '';\n\n    }\n\n\n    /**\n     *Call ZapRegistry to create a new provider in Registry contract\n     * @param {string} public_key\n     * @param {string} title\n     * @param {string} endpoint\n     * @param {Array} endpoint_params\n     * @returns {Promise}\n     */\n    async initiateProvider({public_key, title, endpoint, endpoint_params}:InitProvider):Promise {\n        assert(Array.isArray(endpoint_params), 'endpointParams need to be an array');\n        return await this.zapRegistry.initiateProvider(\n            {public_key, title, endpoint, endpoint_params, from:this.providerOwner});\n    }\n\n    /**\n     * Initiate Curve for an endpoint\n     * @param {string} endpoint\n     * @param {number[]} constants\n     * @param {number[]} parts\n     * @param {number[]} dividers\n     * @returns {Promise}\n     */\n    async initiateProviderCurve({endpoint, constants, parts, dividers}: InitCurve) :Promise{\n        let curve = new Curve(constants, parts, dividers)\n        // console.log(\"converted : \", convertedConstants);\n        let txid = await this.zapRegistry.initiateProviderCurve({endpoint, curve, from: this.providerOwner});\n        assert(txid, 'fail to init curve ');\n        this.curve = new Curve(constants, parts, dividers);\n        return txid;\n\n    }\n\n    /**\n     * Get title of this provider from Registry contract\n     * @returns {Promise}\n     */\n    async getTitle():Promise {\n        let title:string;\n        if (this.title) return this.title;\n        title = await this.zapRegistry.getProviderTitle(this.providerOwner);\n        this.title = title;\n        return title;\n        }\n\n\n    /**\n     * Get public key of this provider from Registry contract\n     * @returns {Promise}\n     */\n    async getPubkey():Promise {\n            if (this.pubkey) return this.pubkey;\n            let pubkey = await this.zapRegistry.getProviderPublicKey(this.providerOwner);\n            this.pubkey = pubkey;\n            return pubkey;\n    }\n\n\n    /**\n     * Get Curve of an owned endpoint\n     * @param {string} endpoint\n     * @returns {Promise}\n     */\n    async getCurve(endpoint:string):Promise {\n        if (this.curve) return this.curve;\n        let curve = await this.zapRegistry.getProviderCurve(this.providerOwner, endpoint);\n        this.curve = curve;\n        return curve;\n    }\n\n\n    /**\n     * Get amount Zap bound to an owned endpoint\n     * @param {string} endpoint\n     * @returns {Promise} number of Zap Token bound\n     */\n    async getZapBound(endpoint:string):Promise {\n        assert(endpoint, 'endpoint required');\n        return await this.zapBondage.getZapBound({\n            provider: this.providerOwner, endpoint:endpoint});\n    }\n\n    /**\n     *\n     * @param endpoint\n     * @param dots\n     * @returns {Promise}\n     */\n    async getZapRequired({endpoint, dots}:{endpoint:string,dots:number}):Promise {\n        return await this.zapBondage.calcZapForDots({provider: this.providerOwner, endpoint, dots});\n    }\n\n\n    /**\n     * Calculate number of dots that subscriber can use for inquired number of Zap Tokens\n     * @param {string} endpoint\n     * @param {number} zapNum\n     * @returns {Promise} number of dots subscriber can get\n     */\n    async calcDotsForZap({endpoint, zapNum}:{endpoint:string, zapNum:number}): Promise {\n        let res = await this.zapBondage.calcBondRate({\n            provider: this.providerOwner,\n            endpoint,\n            zapNum});\n        return res;\n    }\n\n\n    /**\n     * listen to new subscription events to this provider, managed by Arbiter contract\n     * @param {string} subscriber\n     * @param {number} fromBlock\n     * @returns {Promise}\n     */\n    async listenSubscribes({subscriber, fromBlock}:{subscriber:string, fromBlock: number}):Promise {\n        let callback = (error:any, result:string) => {\n            if (error) {\n                console.error(error);\n            } else {\n                return this.handler.handleSubscription(result);\n            }\n        };\n\n        return this.zapArbiter.listenSubscriptionStart(\n            {provider: this.providerOwner, subscriber},\n            callback);\n    }\n\n    /**\n     *Listen to unsubscription events to this provider, managed by Arbiter contract\n     * @param {string} subscriber\n     * @param {string} terminator : address that call unsubscribe, this can be subscriber or provider\n     * @param {number} fromBlock\n     * @returns {Promise}\n     */\n    async listenUnsubscribes({subscriber, terminator, fromBlock}:UnsubscribeListen) :Promise{\n        let callback = (error:Error, result:string) => {\n            if (error) {\n                console.log(error);\n            } else {\n                return this.handler.handleUnsubscription(result);\n            }\n        };\n\n        return this.zapArbiter.listenSubscriptionEnd(\n            {provider: this.providerOwner, subscriber, terminator, fromBlock},\n            callback);\n    }\n\n    /**\n     * Listen to Queries events, managed by Dispatch contract\n     * @param {string} queryId\n     * @param {address} subscriber\n     * @param {number} fromBlock\n     * @returns {Promise}\n     */\n    async listenQueries({fromBlock}:ListenQuery) :Promise {\n        let callback = (error:any, result:string) => {\n            if (error) {\n                console.error(error);\n            } else {\n                return this.handler.handleIncoming(result);\n            }\n        };\n\n        return this.zapDispatch.listenIncoming(\n            {provider: this.providerOwner, fromBlock},\n            callback);\n    }\n\n    /**\n     * Respond to a query\n     * @param {string} queryId\n     * @param {string[]} responseParams\n     * @param {boolean} dynamic number of responses or not\n     * @returns {Promise}\n     */\n    async respond({queryId, responseParams, dynamic}:Respond):Promise{\n        return await this.zapDispatch.respond({queryId, responseParams, dynamic, from: this.providerOwner});\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ZapProviderType.html":{"url":"interfaces/ZapProviderType.html","title":"interface - ZapProviderType","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ZapProviderType\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/Utils/src/types.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        curve\n                                \n                                \n                                        endpoint\n                                \n                                \n                                        endpoint_params\n                                \n                                \n                                        provider\n                                \n                                \n                                        pubkey\n                                \n                                \n                                        title\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        curve\n                                    \n                                \n                                \n                                    \n                                        curve:     Curve\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Curve\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        endpoint\n                                    \n                                \n                                \n                                    \n                                        endpoint:     string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        endpoint_params\n                                    \n                                \n                                \n                                    \n                                        endpoint_params:     Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Array\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        provider\n                                    \n                                \n                                \n                                    \n                                        provider:     string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        pubkey\n                                    \n                                \n                                \n                                    \n                                        pubkey:     number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        title\n                                    \n                                \n                                \n                                    \n                                        title:     string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {Curve} from \"@zap/curve\";\nexport type serverOptionsType = {\n    network: string ,\n    network_id: number,\n    hostname: string,\n    port: number,\n    gas: number,\n    gasPrice: number\n}\n\nexport type buildOptionsType = {\n    logger: any,\n    contracts_build_directory: string,\n    contracts_directory:string,\n    working_directory: string,\n    migrations_directory: string,\n}\n\nexport interface ZapProviderType {\n    provider: string,\n    pubkey:number,\n    title:string,\n    endpoint: string,\n    endpoint_params:Array,\n    curve: Curve\n}\n\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ZapRegistry.html":{"url":"classes/ZapRegistry.html","title":"class - ZapRegistry","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  ZapRegistry\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/Registry/src/index.ts\n        \n\n            \n                Description\n            \n            \n                Manage Providers and Curves registration\n\n            \n\n            \n                Extends\n            \n            \n                    BaseContract\n            \n\n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                contract\n                            \n                            \n                                contract\n                            \n                            \n                                networkId\n                            \n                            \n                                provider\n                            \n                            \n                                web3\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getNextEndpointParams\n                            \n                            \n                                    Async\n                                getNextProvider\n                            \n                            \n                                    Async\n                                getProviderCurve\n                            \n                            \n                                    Async\n                                getProviderPublicKey\n                            \n                            \n                                    Async\n                                getProviderTitle\n                            \n                            \n                                    Async\n                                initiateProvider\n                            \n                            \n                                    Async\n                                initiateProviderCurve\n                            \n                            \n                                    Async\n                                listen\n                            \n                            \n                                    Async\n                                listenNewCurve\n                            \n                            \n                                    Async\n                                listenNewProvider\n                            \n                            \n                                    Async\n                                setEndpointParams\n                            \n                            \n                                    Async\n                                getContractOwner\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(undefined: BaseContractType)\n                    \n                \n                        \n                            \n                                Defined in packages/Registry/src/index.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                  \n                                                        \n                                                                    BaseContractType\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            contract\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        contract:     any\n\n                    \n                \n                    \n                        \n                            Type :     any\n\n                        \n                    \n                        \n                            \n                                    Defined in packages/Registry/src/index.ts:15\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            contract\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        contract:     any\n\n                    \n                \n                    \n                        \n                            Type :     any\n\n                        \n                    \n                            \n                                \n                                    Inherited from     BaseContract\n\n                                \n                            \n                        \n                            \n                                    Defined in BaseContract:14\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            networkId\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        networkId:     number\n\n                    \n                \n                    \n                        \n                            Type :     number\n\n                        \n                    \n                            \n                                \n                                    Inherited from     BaseContract\n\n                                \n                            \n                        \n                            \n                                    Defined in BaseContract:15\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            provider\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        provider:     any\n\n                    \n                \n                    \n                        \n                            Type :     any\n\n                        \n                    \n                            \n                                \n                                    Inherited from     BaseContract\n\n                                \n                            \n                        \n                            \n                                    Defined in BaseContract:12\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            web3\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        web3:     any\n\n                    \n                \n                    \n                        \n                            Type :     any\n\n                        \n                    \n                            \n                                \n                                    Inherited from     BaseContract\n\n                                \n                            \n                        \n                            \n                                    Defined in BaseContract:13\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Async\n                            getNextEndpointParams\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        getNextEndpointParams(undefined: NextEndpoint)\n                    \n                \n\n\n                        \n                            \n                                    Defined in packages/Registry/src/index.ts:137\n                            \n                        \n\n\n                \n                    \n                            Get endpoint params at index of a provider's endpoint\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        \n                                                                    NextEndpoint\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Promise\n\n                            \n                                \n                                    endpoint's param at index\n\n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Async\n                            getNextProvider\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        getNextProvider(index: number)\n                    \n                \n\n\n                        \n                            \n                                    Defined in packages/Registry/src/index.ts:125\n                            \n                        \n\n\n                \n                    \n                            Get provider in index +1 in Registry contract\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        index\n                                                        \n                                                                    number\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                        \n                                                                of next provider\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Promise\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Async\n                            getProviderCurve\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        getProviderCurve(provider: string, endpoint: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in packages/Registry/src/index.ts:112\n                            \n                        \n\n\n                \n                    \n                            Get a provider's endpoint's curve from Registry contract\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        provider\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        endpoint\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Promise\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Async\n                            getProviderPublicKey\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        getProviderPublicKey(provider: address)\n                    \n                \n\n\n                        \n                            \n                                    Defined in packages/Registry/src/index.ts:90\n                            \n                        \n\n\n                \n                    \n                            Get a provider's public key from Registry contract\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        provider\n                                                        \n                                                                    address\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Promise\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Async\n                            getProviderTitle\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        getProviderTitle(provider: address)\n                    \n                \n\n\n                        \n                            \n                                    Defined in packages/Registry/src/index.ts:100\n                            \n                        \n\n\n                \n                    \n                            Get a provider's title from Registry contract\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        provider\n                                                        \n                                                                    address\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Promise\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Async\n                            initiateProvider\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        initiateProvider(undefined: InitProvider)\n                    \n                \n\n\n                        \n                            \n                                    Defined in packages/Registry/src/index.ts:31\n                            \n                        \n\n\n                \n                    \n                            Add a brand new provider in Registry contract, distinguished by provider's address\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        \n                                                                    InitProvider\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Promise\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Async\n                            initiateProviderCurve\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        initiateProviderCurve(undefined: InitCurve)\n                    \n                \n\n\n                        \n                            \n                                    Defined in packages/Registry/src/index.ts:52\n                            \n                        \n\n\n                \n                    \n                            Set Curve for a provider's endpoint\nCurve can only be set once per endpoint\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        \n                                                                    InitCurve\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Promise\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Async\n                            listen\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        listen(filters: Filter, callback: Function)\n                    \n                \n\n\n                        \n                            \n                                    Defined in packages/Registry/src/index.ts:156\n                            \n                        \n\n\n                \n                    \n                            Listen to all Registry contract events with filters\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Default value\n                                            \n                                        \n                                        \n                                                \n                                                        filters\n                                                        \n                                                                    Filter\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                        \n                                                                {}\n                                                        \n\n                                                \n                                                \n                                                        callback\n                                                        \n                                                                    Function\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                        \n                                                        \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Promise\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Async\n                            listenNewCurve\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        listenNewCurve(provider: address, callback: Function)\n                    \n                \n\n\n                        \n                            \n                                    Defined in packages/Registry/src/index.ts:174\n                            \n                        \n\n\n                \n                    \n                            Listen to Registry contract's events for new providers' curve\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        provider\n                                                        \n                                                                    address\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        callback\n                                                        \n                                                                    Function\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Promise\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Async\n                            listenNewProvider\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        listenNewProvider(filters: Filter, callback: Function)\n                    \n                \n\n\n                        \n                            \n                                    Defined in packages/Registry/src/index.ts:165\n                            \n                        \n\n\n                \n                    \n                            Listen to Registry contracts events for new providers\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Default value\n                                            \n                                        \n                                        \n                                                \n                                                        filters\n                                                        \n                                                                    Filter\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                        \n                                                                {}\n                                                        \n\n                                                \n                                                \n                                                        callback\n                                                        \n                                                                    Function\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                        \n                                                        \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Promise\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Async\n                            setEndpointParams\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        setEndpointParams(undefined: EndpointParams)\n                    \n                \n\n\n                        \n                            \n                                    Defined in packages/Registry/src/index.ts:78\n                            \n                        \n\n\n                \n                    \n                            Provider can set endpoint params for owned endpoint\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        \n                                                                    EndpointParams\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Promise\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Async\n                            getContractOwner\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        getContractOwner()\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     BaseContract\n\n                                \n                            \n                        \n                            \n                                    Defined in BaseContract:49\n                            \n                        \n\n\n                \n                    \n                            Get Contract owner address\n\n\n                            \n                            \n                            \n                                Returns :     Promise\n\n                            \n                                \n                                    owner's address of this contract instance\n\n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        const {toHex,utf8ToHex,toBN, hexToUtf8} = require(\"web3-utils\");\nimport {BaseContract,BaseContractType} from \"@zap/basecontract\";\nimport {Curve,CurveType} from \"@zap/curve\";\nimport {Utils} from \"@zap/utils\"\nimport {InitProvider, InitCurve, NextEndpoint, EndpointParams,txid,address,Filter} from \"./types\"\n\n/**\n * Manage Providers and Curves registration\n * @extends BaseContract\n * @param {any} artifactsDir\n * @param {any} networkId\n * @param {any} networkProvider\n */\nexport class ZapRegistry extends BaseContract {\n    contract:any;\n\n    constructor({artifactsDir=undefined,networkId=undefined,networkProvider=undefined}:BaseContractType){\n        super({artifactsDir,artifactName:\"Registry\",networkId,networkProvider});\n    }\n\n    /**\n     * Add a brand new provider in Registry contract, distinguished by provider's address\n     * @param {string} provider's public_key\n     * @param {string} provider's title\n     * @param {string} endpoint\n     * @param {Array} endpoint_params\n     * @param {address} from : provider's address\n     * @param {BigNumber} gas\n     * @returns {Promise}\n     */\n    async initiateProvider({public_key, title, endpoint, endpoint_params, from, gas=Utils.Constants.DEFAULT_GAS}:InitProvider): Promise{\n        let params:Array;\n        if(!endpoint_params) params = []\n        else params = endpoint_params.map((item:string) =>{return utf8ToHex(item)});\n        return await this.contract.methods.initiateProvider(\n            toBN(public_key),\n            utf8ToHex(title),\n            utf8ToHex(endpoint),\n            params)\n            .send({from,gas});\n    }\n\n    /**\n     * Set Curve for a provider's endpoint\n     * Curve can only be set once per endpoint\n     * @param {string} endpoint\n     * @param {CurveType} curve\n     * @param {address} from : provider\n     * @param {BigNumber} gas\n     * @returns {Promise}\n     */\n    async initiateProviderCurve({endpoint, curve, from, gas=Utils.Constants.DEFAULT_GAS}:InitCurve):Promise {\n        let convertedConstants = curve.constants.map((item:number) => {\n            return toHex(item);\n        });\n        let convertedParts = curve.parts.map((item:number)=> {\n            return toHex(item);\n        });\n        let convertedDividers = curve.dividers.map((item:number) => {\n            return toHex(item);\n        });\n        return await this.contract.methods.initiateProviderCurve(\n            utf8ToHex(endpoint),\n            convertedConstants,\n            convertedParts,\n            convertedDividers)\n            .send({from, gas});\n    }\n\n    /**\n     * Provider can set endpoint params for owned endpoint\n     * @param {string} endpoint\n     * @param {string[]} endpoint_params\n     * @param {address} from : provider\n     * @param {BigNumber} gas\n     * @returns {Promise}\n     */\n    async setEndpointParams({endpoint, endpoint_params, from, gas=Utils.Constants.DEFAULT_GAS}:EndpointParams) :Promise{\n      let params = endpoint_params ? endpoint_params.map(el =>{return utf8ToHex(el)}) : [];\n        return await this.contract.methods.setEndpointParams(\n            utf8ToHex(endpoint),\n            params).send({from, gas});\n    }\n\n    /**\n     * Get a provider's public key from Registry contract\n     * @param {address} provider\n     * @returns {Promise}\n     */\n    async getProviderPublicKey(provider:address):Promise{\n        let pubKey:string =  await this.contract.methods.getProviderPublicKey(provider).call();\n        return Number(pubKey.valueOf());\n    }\n\n    /**\n     * Get a provider's title from Registry contract\n     * @param {address} provider\n     * @returns {Promise}\n     */\n    async getProviderTitle(provider:address):Promise{\n        let title = await this.contract.methods.getProviderTitle(provider).call();\n        return hexToUtf8(title)\n    }\n\n\n    /**\n     * Get a provider's endpoint's curve from Registry contract\n     * @param {string} provider\n     * @param {string} endpoint\n     * @returns {Promise}\n     */\n    async getProviderCurve(provider:string,endpoint:string):Promise{\n        let curve =  await this.contract.methods.getProviderCurve(\n            provider,\n            utf8ToHex(endpoint)\n        ).call();\n        return new Curve(curve['0'].map((i:string)=>parseInt(i)),curve['1'].map((i:string)=>parseInt(i)),curve['2'].map((i:string)=>parseInt(i)))\n    }\n\n    /**\n     * Get provider in index +1 in Registry contract\n     * @param index of next provider\n     * @returns {Promise}\n     */\n    async getNextProvider(index:number):Promise{\n        return await this.contract.methods.getNextProvider(index).call();\n    }\n\n\n    /**\n     * Get endpoint params at index of a provider's endpoint\n     * @param {address} provider\n     * @param {string} endpoint\n     * @param {number} index\n     * @returns {Promise} endpoint's param at index\n     */\n    async getNextEndpointParams({provider, endpoint, index}:NextEndpoint):Promise{\n        let params = await  this.contract.methods.getNextEndpointParam(\n            provider,\n            utf8ToHex(endpoint),\n            toBN(index)\n        ).call();\n        let endpointParams = params.endpointParam;\n        console.log(hexToUtf8(endpointParams));\n        return hexToUtf8(endpointParams)\n    }\n\n    // ==== Events ====//\n\n    /**\n     * Listen to all Registry contract events with filters\n     * @param {Filter} filters\n     * @param {Function} callback\n     * @returns {Promise}\n     */\n    async listen(filters:Filter={}, callback:Function):Promise{\n        this.contract.events.allEvents(filters, callback);\n    }\n\n    /**\n     * Listen to Registry contracts events for new providers\n     * @param {Filter} filters\n     * @param {Promise} callback\n     */\n    async listenNewProvider(filters:Filter={}, callback:Function):Promise{\n        this.contract.events.NewProvider(filters, callback);\n    }\n\n    /**\n     * Listen to Registry contract's events for new providers' curve\n     * @param {address} provider\n     * @param {Promise} callback\n     */\n    async listenNewCurve(provider:address, callback:Function):Promise{\n        this.contract.events.NewCurve(provider, callback);\n    }\n\n}\n\nexport * from \"./types\" ;\n\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ZapToken.html":{"url":"classes/ZapToken.html","title":"class - ZapToken","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  ZapToken\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/ZapToken/src/index.ts\n        \n\n            \n                Description\n            \n            \n                ERC20 Tokens methods for Zap Tokens\n\n            \n\n            \n                Extends\n            \n            \n                    BaseContract\n            \n\n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                contract\n                            \n                            \n                                networkId\n                            \n                            \n                                provider\n                            \n                            \n                                web3\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                allocate\n                            \n                            \n                                    Async\n                                approve\n                            \n                            \n                                    Async\n                                balanceOf\n                            \n                            \n                                    Async\n                                send\n                            \n                            \n                                    Async\n                                getContractOwner\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(undefined: BaseContractType)\n                    \n                \n                        \n                            \n                                Defined in packages/ZapToken/src/index.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                  \n                                                        \n                                                                    BaseContractType\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            contract\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        contract:     any\n\n                    \n                \n                    \n                        \n                            Type :     any\n\n                        \n                    \n                            \n                                \n                                    Inherited from     BaseContract\n\n                                \n                            \n                        \n                            \n                                    Defined in BaseContract:14\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            networkId\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        networkId:     number\n\n                    \n                \n                    \n                        \n                            Type :     number\n\n                        \n                    \n                            \n                                \n                                    Inherited from     BaseContract\n\n                                \n                            \n                        \n                            \n                                    Defined in BaseContract:15\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            provider\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        provider:     any\n\n                    \n                \n                    \n                        \n                            Type :     any\n\n                        \n                    \n                            \n                                \n                                    Inherited from     BaseContract\n\n                                \n                            \n                        \n                            \n                                    Defined in BaseContract:12\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            web3\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        web3:     any\n\n                    \n                \n                    \n                        \n                            Type :     any\n\n                        \n                    \n                            \n                                \n                                    Inherited from     BaseContract\n\n                                \n                            \n                        \n                            \n                                    Defined in BaseContract:13\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Async\n                            allocate\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        allocate(undefined: TransferType)\n                    \n                \n\n\n                        \n                            \n                                    Defined in packages/ZapToken/src/index.ts:52\n                            \n                        \n\n\n                \n                    \n                            Allocate Zap Token from Zap contract owner to an address\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        \n                                                                    TransferType\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Promise\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Async\n                            approve\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        approve(undefined: TransferType)\n                    \n                \n\n\n                        \n                            \n                                    Defined in packages/ZapToken/src/index.ts:65\n                            \n                        \n\n\n                \n                    \n                            Approve Zap Token to an address\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        \n                                                                    TransferType\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Promise\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Async\n                            balanceOf\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        balanceOf(address: address)\n                    \n                \n\n\n                        \n                            \n                                    Defined in packages/ZapToken/src/index.ts:26\n                            \n                        \n\n\n                \n                    \n                            Get Zap Token balance of address\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        address\n                                                        \n                                                                    address\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Promise\n\n                            \n                                \n                                    Zap balance\n\n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Async\n                            send\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        send(undefined: TransferType)\n                    \n                \n\n\n                        \n                            \n                                    Defined in packages/ZapToken/src/index.ts:39\n                            \n                        \n\n\n                \n                    \n                            Transfer Zap Token\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        \n                                                                    TransferType\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Promise\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Async\n                            getContractOwner\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        getContractOwner()\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     BaseContract\n\n                                \n                            \n                        \n                            \n                                    Defined in BaseContract:49\n                            \n                        \n\n\n                \n                    \n                            Get Contract owner address\n\n\n                            \n                            \n                            \n                                Returns :     Promise\n\n                            \n                                \n                                    owner's address of this contract instance\n\n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import {BaseContract,BaseContractType} from \"@zap/basecontract\";\nimport {Utils} from \"@zap/utils\";\nimport {TransferType,address,txid} from \"./types\";\n\n/**\n * ERC20 Tokens methods for Zap Tokens\n * @extends BaseContract\n * @param {?string} artifactsDir\n * @param {string} artifactName\n * @param {?string} networkId\n * @param {?string} networkProvider\n\n */\nexport class ZapToken extends BaseContract {\n\n\n    constructor({artifactsDir=undefined,artifactName=undefined,networkId=undefined,networkProvider=undefined}:BaseContractType){\n        super({artifactsDir,artifactName:\"ZapToken\",networkId,networkProvider});\n    }\n\n    /**\n     * Get Zap Token balance of address\n     * @param {address} address\n     * @returns {Promise} Zap balance\n     */\n    async balanceOf(address:address) :Promise{\n        let balance = await this.contract.methods.balanceOf(address).call();\n        return Utils.fromZapBase(balance);\n    }\n\n    /**\n     * Transfer Zap Token\n     * @param {address} to\n     * @param {number} amount\n     * @param {address} from\n     * @param {number} gas\n     * @returns {Promise}\n     */\n    async send({to, amount, from,gas=Utils.Constants.DEFAULT_GAS}:TransferType) :Promise{\n        let bigAmount = Utils.toZapBase(amount);\n        return await this.contract.methods.transfer(to, bigAmount).send({from,gas});\n    }\n\n    /**\n     * Allocate Zap Token from Zap contract owner to an address\n     * @param {address} to\n     * @param {number} amount\n     * @param {address} from\n     * @param {number} gas\n     * @returns {Promise}\n     */\n    async allocate({to, amount, from,gas=Utils.Constants.DEFAULT_GAS}:TransferType):Promise {\n        let bigAmount = Utils.toZapBase(amount)\n        return await this.contract.methods.allocate(to, bigAmount).send({from,gas});\n    }\n\n    /**\n     * Approve Zap Token to an address\n     * @param {address} to\n     * @param {number} amount\n     * @param {address} from\n     * @param {number} gas\n     * @returns {Promise}\n     */\n    async approve({to, amount, from, gas=Utils.Constants.DEFAULT_GAS}:TransferType):Promise {\n        const success = await this.contract.methods.approve(to, amount).send({from,gas});\n        if (!success) {\n            throw new Error('Failed to approve Bondage transfer');\n        }\n        return success;\n    }\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @compodoc/compodoc : ^1.1.3\n        \n            @types/chai : ^4.1.4\n        \n            @types/mocha : ^5.2.4\n        \n            bignumber.js : ^7.2.1\n        \n            chai : ^4.1.2\n        \n            chai-as-promised : ^7.1.1\n        \n            chai-bignumber : ^2.0.2\n        \n            documentation : ^8.0.1\n        \n            ganache-core : ^2.1.5\n        \n            mocha : ^5.2.0\n        \n            npm-run-all : ^4.1.3\n        \n            path : ^0.12.7\n        \n            prettier : ^1.13.7\n        \n            require-all : ^3.0.0\n        \n            truffle-artifactor : ^3.0.7\n        \n            truffle-migrate : ^2.0.8\n        \n            truffle-resolver : ^4.0.4\n        \n            ts-node : ^7.0.0\n        \n            tslint : ^5.10.0\n        \n            type2docfx : ^0.9.100\n        \n            typedoc : ^0.11.1\n        \n            typedoc-clarity-theme : ^1.1.0\n        \n            typedoc-markdown-theme : 0.0.4\n        \n            typescript : ^2.9.2\n        \n            typescript-docs : ^1.0.1\n        \n            web3 : ^1.0.0-beta.34\n        \n            web3-utils : ^1.0.0-beta.34\n        \n            zap_contracts : git+https://github.com/zapproject/zap-ethereum-api.git\n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            getArtifacts   (packages/.../index.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    packages/Artifacts/src/index.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            getArtifacts\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetArtifacts()\n                    \n                \n\n\n\n\n                \n                    \n                            Get Artifacts in this package\n\n\n                            \n                            \n                    \n                \n            \n        \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nZAP\nZAP Oracles (introduction here)\nZAP-Monorepo\nThis repository provides Interface to Zap contracts and tools to use Zap platform with Javascript projects\nEach package is a public npm module that serve developer's needs to intergrate Zap platform\nGetting Started\nThese instructions will get you a copy of the project up and running on your local machine for development and testing purposes\nPrerequisites\nWhat things you need to install the software and how to install them\n- Nodejs and npm>=6.1.11\n- Lerna \n- TypescriptInstalling\nnpm install -g lerna typescript\nnpm i\nBootstrap lerna with --hoist option\n\nlerna bootstrap --hoistRunning build and tests\n\nRunning build for all packages\n\nlerna run build\nRunning mocha unit tests for all packages\n\nlerna run testRunning build and tests for a package\n\nDevelop in single package\n\ncd packages/{package_name}\nnpm run build\nnpm run test\nRunning build and test \n\nnpm run run_testPackages\nUsage\nCreate a Zap Provider\nnpm install `@zap/provider`class myHandler implements ProviderHander{\n    handleIncoming(res:any){\n    }\n\n    handleSubscription(res:any) {\n    }\n\n    handleUnsubscription (res:string){\n    }\n}import {ZapProvider, ProviderHandler} from '@zap/provider';\n\nlet myZapProvider = new ZapProvider({owner:address,handler:new myHandler()})\n\n\nawait myZapProvider.initiateProvider({\n    public_key:111,\n    title: \"testTitle\",\n    endpoint: \"testEndpoint\",\n    endpoint_params : [\"p1\",\"p2\"]\n})\n\nconst thisConstants = []\nconst thisParts = []\nconst thisDividers = []\nawait myZapProvider.initiateProviderCurve({\n    endpoint :\"testEndpoint\",\n    constants : thisConstants,\n    parts : thisParts,\n    dividers : thisDividers\n})\n\n\nBuilt With\n\nLerna - The tool to manage monorepo project\nTypescript \nMocha \nTruffle\n[Ganache] (https://truffleframework.com/ganache)\n\nContributing\nPlease read CONTRIBUTING.md for details on our code of conduct, and the process for submitting pull requests to us.\nSee also the list of contributors\nLicense\nThis project is licensed under the MIT License - see the LICENSE.md file for details\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/listenEvent.html":{"url":"interfaces/listenEvent.html","title":"interface - listenEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  listenEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/Bondage/src/types.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        callback\n                                \n                                \n                                            Optional\n                                        filter\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        callback\n                                    \n                                \n                                \n                                    \n                                        callback:     Function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        filter\n                                    \n                                \n                                \n                                    \n                                        filter:     Filter\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Filter\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export type address = string;\nexport type txid = string;\nexport interface BondArgs {\n    provider: address;\n    endpoint: string;\n    zapNum: number;\n    from: address;\n    gas ?: number;\n}\n\nexport interface UnbondArgs {\n\tprovider: address;\n    endpoint: string;\n    dots: number;\n    from: address;\n    gas ?: number;\n}\n\nexport interface BondageArgs {\n\tsubscriber ?: address;\n\tprovider: address;\n\tendpoint: string;\n\tdots ?: number ;\n\tzapNum ?: number;\n}\nexport interface CalcBondRateType {\n    provider: address;\n    endpoint: string;\n    zapNum: number;\n}\n\nexport interface Filter {\n    provider ?: address;\n    fromBlock ?: number;\n    toBlock ?: number;\n}\nexport interface listenEvent {\n    filter ?: Filter;\n    callback: Function;\n}\n\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n\n    \n            \n                \n                    \n                        \n                        10 classes\n                    \n                \n            \n            \n                \n                    \n                        \n                        21 interfaces\n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            address   (packages/.../types.ts)\n                        \n                        \n                            address   (packages/.../types.ts)\n                        \n                        \n                            address   (packages/.../types.ts)\n                        \n                        \n                            address   (packages/.../types.ts)\n                        \n                        \n                            address   (packages/.../types.ts)\n                        \n                        \n                            address   (packages/.../types.ts)\n                        \n                        \n                            BondType   (packages/.../types.ts)\n                        \n                        \n                            buildOptionsType   (packages/.../types.ts)\n                        \n                        \n                            EndpointParams   (packages/.../types.ts)\n                        \n                        \n                            InitCurve   (packages/.../types.ts)\n                        \n                        \n                            InitCurve   (packages/.../types.ts)\n                        \n                        \n                            InitProvider   (packages/.../types.ts)\n                        \n                        \n                            ListenQuery   (packages/.../types.ts)\n                        \n                        \n                            NextEndpoint   (packages/.../types.ts)\n                        \n                        \n                            ProviderConstructorType   (packages/.../types.ts)\n                        \n                        \n                            QueryArgs   (packages/.../types.ts)\n                        \n                        \n                            Respond   (packages/.../types.ts)\n                        \n                        \n                            serverOptionsType   (packages/.../types.ts)\n                        \n                        \n                            SubscriberConstructorType   (packages/.../types.ts)\n                        \n                        \n                            SubscribeType   (packages/.../types.ts)\n                        \n                        \n                            TransferType   (packages/.../types.ts)\n                        \n                        \n                            txid   (packages/.../types.ts)\n                        \n                        \n                            txid   (packages/.../types.ts)\n                        \n                        \n                            txid   (packages/.../types.ts)\n                        \n                        \n                            txid   (packages/.../types.ts)\n                        \n                        \n                            txid   (packages/.../types.ts)\n                        \n                        \n                            txid   (packages/.../types.ts)\n                        \n                        \n                            UnbondType   (packages/.../types.ts)\n                        \n                        \n                            UnsubscribeListen   (packages/.../types.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    packages/Arbiter/src/types.ts\n    \n        \n            \n                \n                    \n                        \n                        address\n                    \n                \n                    \n                        \n                            ethereum address \n\n                        \n                    \n                \n                    \n                        address:     string\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        txid\n                    \n                \n                \n                    \n                        txid:     string\n\n                    \n                \n            \n        \n\n    packages/ZapToken/src/types.ts\n    \n        \n            \n                \n                    \n                        \n                        address\n                    \n                \n                \n                    \n                        address:     string\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        TransferType\n                    \n                \n                \n                    \n                        TransferType:     literal type\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        txid\n                    \n                \n                \n                    \n                        txid:     string | object\n\n                    \n                \n            \n        \n\n    packages/Dispatch/src/types.ts\n    \n        \n            \n                \n                    \n                        \n                        address\n                    \n                \n                \n                    \n                        address:     string\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        QueryArgs\n                    \n                \n                \n                    \n                        QueryArgs:     literal type\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        txid\n                    \n                \n                \n                    \n                        txid:     string\n\n                    \n                \n            \n        \n\n    packages/Provider/src/types.ts\n    \n        \n            \n                \n                    \n                        \n                        address\n                    \n                \n                \n                    \n                        address:     string\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        InitCurve\n                    \n                \n                \n                    \n                        InitCurve:     literal type\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        InitProvider\n                    \n                \n                \n                    \n                        InitProvider:     literal type\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        ListenQuery\n                    \n                \n                \n                    \n                        ListenQuery:     literal type\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        ProviderConstructorType\n                    \n                \n                \n                    \n                        ProviderConstructorType:     literal type\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        Respond\n                    \n                \n                \n                    \n                        Respond:     literal type\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        txid\n                    \n                \n                \n                    \n                        txid:     string | object\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        UnsubscribeListen\n                    \n                \n                \n                    \n                        UnsubscribeListen:     literal type\n\n                    \n                \n            \n        \n\n    packages/Bondage/src/types.ts\n    \n        \n            \n                \n                    \n                        \n                        address\n                    \n                \n                \n                    \n                        address:     string\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        txid\n                    \n                \n                \n                    \n                        txid:     string\n\n                    \n                \n            \n        \n\n    packages/Registry/src/types.ts\n    \n        \n            \n                \n                    \n                        \n                        address\n                    \n                \n                \n                    \n                        address:     string\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        EndpointParams\n                    \n                \n                \n                    \n                        EndpointParams:     literal type\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        InitCurve\n                    \n                \n                \n                    \n                        InitCurve:     literal type\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        NextEndpoint\n                    \n                \n                \n                    \n                        NextEndpoint:     literal type\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        txid\n                    \n                \n                \n                    \n                        txid:     string\n\n                    \n                \n            \n        \n\n    packages/Subscriber/src/types.ts\n    \n        \n            \n                \n                    \n                        \n                        BondType\n                    \n                \n                \n                    \n                        BondType:     literal type\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        SubscriberConstructorType\n                    \n                \n                \n                    \n                        SubscriberConstructorType:     literal type\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        SubscribeType\n                    \n                \n                \n                    \n                        SubscribeType:     literal type\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        UnbondType\n                    \n                \n                \n                    \n                        UnbondType:     literal type\n\n                    \n                \n            \n        \n\n    packages/Utils/src/types.ts\n    \n        \n            \n                \n                    \n                        \n                        buildOptionsType\n                    \n                \n                \n                    \n                        buildOptionsType:     literal type\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        serverOptionsType\n                    \n                \n                \n                    \n                        serverOptionsType:     literal type\n\n                    \n                \n            \n        \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            Artifacts   (packages/.../index.ts)\n                        \n                        \n                            assert   (packages/.../index.ts)\n                        \n                        \n                            assert   (packages/.../index.ts)\n                        \n                        \n                            assert   (packages/.../index.ts)\n                        \n                        \n                            asyncMigrate   (packages/.../index.ts)\n                        \n                        \n                            contractsDir   (packages/.../constants.ts)\n                        \n                        \n                            DEFAULT_GAS   (packages/.../types.ts)\n                        \n                        \n                            DEFAULT_GAS   (packages/.../constants.ts)\n                        \n                        \n                            EventEmitter   (packages/.../index.ts)\n                        \n                        \n                            ganacheProvider   (packages/.../constants.ts)\n                        \n                        \n                            GAS_PRICE   (packages/.../constants.ts)\n                        \n                        \n                            migrate   (packages/.../constants.ts)\n                        \n                        \n                            migrationDir   (packages/.../constants.ts)\n                        \n                        \n                            NETWORK   (packages/.../constants.ts)\n                        \n                        \n                            requireAll   (packages/.../constants.ts)\n                        \n                        \n                               (packages/.../index.ts)\n                        \n                        \n                               (packages/.../index.ts)\n                        \n                        \n                               (packages/.../index.ts)\n                        \n                        \n                               (packages/.../index.ts)\n                        \n                        \n                               (packages/.../index.ts)\n                        \n                        \n                               (packages/.../index.ts)\n                        \n                        \n                               (packages/.../index.ts)\n                        \n                        \n                               (packages/.../index.ts)\n                        \n                        \n                               (packages/.../index.ts)\n                        \n                        \n                               (packages/.../index.ts)\n                        \n                        \n                               (packages/.../constants.ts)\n                        \n                        \n                            web3   (packages/.../index.ts)\n                        \n                        \n                            Web3   (packages/.../index.ts)\n                        \n                        \n                            Web3   (packages/.../index.ts)\n                        \n                        \n                            Web3   (packages/.../constants.ts)\n                        \n                        \n                            workingDir   (packages/.../constants.ts)\n                        \n                        \n                            zapContractDirName   (packages/.../constants.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    packages/Artifacts/src/index.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            Artifacts\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        Artifacts:     any\n\n                    \n                \n                    \n                        \n                            Type :     any\n\n                        \n                    \n                    \n                        \n                            Default value : getArtifacts()\n                        \n                    \n\n\n            \n        \n\n    packages/Provider/src/index.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            assert\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        assert:     \n\n                    \n                \n                    \n                        \n                            Default value : require(\"assert\")\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            EventEmitter\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        EventEmitter:     \n\n                    \n                \n                    \n                        \n                            Default value : require('events')\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            \n                            \n                            \n                        \n                    \n                \n                \n                    \n                        :     \n\n                    \n                \n                    \n                        \n                            Default value : require(\"web3-utils\")\n                        \n                    \n\n\n            \n        \n\n    packages/Subscriber/src/index.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            assert\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        assert:     \n\n                    \n                \n                    \n                        \n                            Default value : require('assert')\n                        \n                    \n\n\n            \n        \n\n    packages/Bondage/src/index.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            assert\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        assert:     \n\n                    \n                \n                    \n                        \n                            Default value : require(\"assert\")\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            \n                            \n                            \n                        \n                    \n                \n                \n                    \n                        :     \n\n                    \n                \n                    \n                        \n                            Default value : require(\"web3-utils\")\n                        \n                    \n\n\n            \n        \n\n    packages/Utils/src/migrations/index.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            asyncMigrate\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        asyncMigrate:     \n\n                    \n                \n                    \n                        \n                            Default value : promisify(migrate.run)\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            \n                            \n                            \n                        \n                    \n                \n                \n                    \n                        :     \n\n                    \n                \n                    \n                        \n                            Default value : require('ganache-core')\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            \n                            \n                            \n                        \n                    \n                \n                \n                    \n                        :     \n\n                    \n                \n                    \n                        \n                            Default value : require('fs')\n                        \n                    \n\n\n            \n        \n\n    packages/Utils/src/constants.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            contractsDir\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        contractsDir:     \n\n                    \n                \n                    \n                        \n                            Default value : join(zapContractDirName,\"contracts\")\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            DEFAULT_GAS\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        DEFAULT_GAS:     number\n\n                    \n                \n                    \n                        \n                            Type :     number\n\n                        \n                    \n                    \n                        \n                            Default value : 6000000\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            ganacheProvider\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        ganacheProvider:     \n\n                    \n                \n                    \n                        \n                            Default value : new Web3.providers.HttpProvider('http://127.0.0.1:7545')\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            GAS_PRICE\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        GAS_PRICE:     number\n\n                    \n                \n                    \n                        \n                            Type :     number\n\n                        \n                    \n                    \n                        \n                            Default value : 40000000\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            migrate\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        migrate:     \n\n                    \n                \n                    \n                        \n                            Default value : require(\"truffle-core/lib/commands/migrate.js\")\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            migrationDir\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        migrationDir:     \n\n                    \n                \n                    \n                        \n                            Default value : join(zapContractDirName,\"migrations\")\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            NETWORK\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        NETWORK:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                    \n                        \n                            Default value : \"ganache-gui\"\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            requireAll\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        requireAll:     \n\n                    \n                \n                    \n                        \n                            Default value : require(\"require-all\")\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            \n                            \n                            \n                        \n                    \n                \n                \n                    \n                        :     \n\n                    \n                \n                    \n                        \n                            Default value : require('ganache-core')\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            Web3\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        Web3:     \n\n                    \n                \n                    \n                        \n                            Default value : require('web3')\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            workingDir\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        workingDir:     \n\n                    \n                \n                    \n                        \n                            Default value : zapContractDirName\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            zapContractDirName\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        zapContractDirName:     \n\n                    \n                \n                    \n                        \n                            Default value : dirname(require.resolve(\"zap_contracts/truffle-config.js\"))\n                        \n                    \n\n\n            \n        \n\n    packages/Arbiter/src/types.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            DEFAULT_GAS\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        DEFAULT_GAS:     number\n\n                    \n                \n                    \n                        \n                            Type :     number\n\n                        \n                    \n                    \n                        \n                            Default value : 400000\n                        \n                    \n\n\n            \n        \n\n    packages/Registry/src/index.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            \n                            \n                            \n                        \n                    \n                \n                \n                    \n                        :     \n\n                    \n                \n                    \n                        \n                            Default value : require(\"web3-utils\")\n                        \n                    \n\n\n            \n        \n\n    packages/Utils/src/migrations/contracts/index.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            \n                            \n                            \n                        \n                    \n                \n                \n                    \n                        :     \n\n                    \n                \n                    \n                        \n                            Default value : require(\"path\")\n                        \n                    \n\n\n            \n        \n\n    packages/Utils/src/index.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            \n                            \n                            \n                        \n                    \n                \n                \n                    \n                        :     \n\n                    \n                \n                    \n                        \n                            Default value : require(\"web3-utils\")\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            web3\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        web3:     \n\n                    \n                \n                    \n                        \n                            Default value : new Web3()\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            Web3\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        Web3:     \n\n                    \n                \n                    \n                        \n                            Default value : require('web3')\n                        \n                    \n\n\n            \n        \n\n    packages/Curve/src/index.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            \n                            \n                            \n                        \n                    \n                \n                \n                    \n                        :     \n\n                    \n                \n                    \n                        \n                            Default value : require(\"web3-utils\")\n                        \n                    \n\n\n            \n        \n\n    packages/Arbiter/src/index.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            \n                            \n                            \n                        \n                    \n                \n                \n                    \n                        :     \n\n                    \n                \n                    \n                        \n                            Default value : require ('web3-utils')\n                        \n                    \n\n\n            \n        \n\n    packages/Dispatch/src/index.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            \n                            \n                            \n                        \n                    \n                \n                \n                    \n                        :     \n\n                    \n                \n                    \n                        \n                            Default value : require (\"web3-utils\")\n                        \n                    \n\n\n            \n        \n\n    packages/BaseContract/src/index.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            Web3\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        Web3:     \n\n                    \n                \n                    \n                        \n                            Default value : require('web3')\n                        \n                    \n\n\n            \n        \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
