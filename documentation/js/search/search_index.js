var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.2.0","fields":["title","body"],"fieldVectors":[["title/classes/BaseContract.html",[0,0.394,1,1.433]],["body/classes/BaseContract.html",[0,0.711,1,1.989,2,0.306,3,0.306,4,0.306,5,2.646,6,1.628,7,3.566,8,2.722,9,2.722,10,2.722,11,2.722,12,2.722,13,1.161,14,3.566,15,2.262,16,2.857,17,2.148,18,0.093,19,0.413,20,2.287,21,1.506,22,2.25,23,2.482,24,1.343,25,1.476,26,2.047,27,2.148,28,4.299,29,1.118,30,0.036,31,1.65,32,0.387,33,0.515,34,3.189,35,0.329,36,3.189,37,3.189,38,3.189,39,1.81,40,1.038,41,1.704,42,1.65,43,2.195,44,1.263,45,2.722,46,0.932,47,2.287,48,3.079,49,3.189,50,1.021,51,1.806,52,0.413,53,3.189,54,2.646,55,3.189,56,1.823,57,0.413,58,4.033,59,1.343,60,1.806,61,2.02,62,1.81,63,3.189,64,3.189,65,2.02,66,2.646,67,3.189,68,4.299,69,3.189,70,3.189,71,3.189,72,1.866,73,3.189,74,1.806,75,3.189,76,1.628,77,3.189,78,3.189,79,1.806,80,3.189,81,3.189,82,3.189,83,3.189,84,2.646,85,3.566,86,1.806,87,3.189,88,1.476,89,3.189,90,0.024,91,0.024]],["title/interfaces/BaseContractType.html",[26,1.303,92,0.017]],["body/interfaces/BaseContractType.html",[2,0.395,3,0.395,4,0.395,15,2.199,18,0.119,19,0.486,20,2.476,26,2.132,30,0.036,32,0.398,33,0.989,35,0.342,52,0.486,57,0.565,59,2.476,60,3.244,62,2.476,65,3.793,90,0.028,91,0.028,92,0.03,93,3.411,94,4.201,95,4.201,96,4.201,97,2.949]],["title/interfaces/ContractType.html",[92,0.017,97,2.221]],["body/interfaces/ContractType.html",[2,0.407,3,0.407,4,0.407,15,1.625,18,0.123,19,0.495,20,2.497,26,1.782,30,0.036,32,0.376,33,0.973,35,0.349,52,0.495,57,0.534,59,2.497,60,2.398,62,2.497,65,3.819,90,0.029,91,0.029,92,0.03,93,3.512,94,4.277,95,4.277,96,4.277,97,3.698]],["title/classes/Curve.html",[0,0.394,98,1.581]],["body/classes/Curve.html",[0,0.455,2,0.236,3,0.236,4,0.236,6,1.828,18,0.071,19,0.344,21,1.255,24,1.507,27,2.219,29,1.626,30,0.036,31,1.781,32,0.375,33,0.749,35,0.401,41,2.045,44,0.869,46,0.718,50,0.787,52,0.236,56,1.728,72,1.781,79,1.392,86,2.793,90,0.02,91,0.02,98,2.713,99,2.039,100,3.537,101,1.48,102,2.979,103,2.979,104,2.979,105,4.091,106,3.58,107,3.58,108,4.223,109,3.503,110,2.97,111,3.849,112,2.458,113,1.654,114,3.58,115,2.458,116,2.458,117,2.458,118,2.458,119,4.932,120,2.458,121,3.503,122,5.314,123,2.458,124,2.675,125,2.458,126,3.503,127,2.458,128,3.029,129,2.458,130,2.97,131,1.954,132,2.458,133,2.458,134,2.039,135,1.828,136,2.039,137,2.039,138,1.763,139,2.458,140,2.97,141,2.267,142,2.267,143,2.267,144,0.943,145,2.039,146,1.392,147,1.556,148,2.458,149,2.458,150,2.458,151,2.458,152,2.458,153,2.458,154,2.458,155,2.458,156,2.458,157,2.458,158,3.58,159,3.58,160,2.458,161,2.039,162,2.458,163,2.458,164,2.039,165,3.365,166,2.458,167,2.458,168,3.58,169,3.58,170,2.458,171,2.458,172,2.039,173,2.458,174,2.458,175,2.458,176,2.458,177,2.458,178,2.458,179,2.458,180,2.458,181,2.458,182,2.458,183,2.458,184,2.458,185,2.458,186,3.58,187,2.458,188,2.458,189,2.458,190,2.458,191,2.568,192,2.458,193,3.503,194,2.97,195,2.458,196,2.97,197,2.458,198,2.458,199,2.458,200,2.458,201,2.458]],["title/interfaces/CurveTerm.html",[92,0.017,124,1.961]],["body/interfaces/CurveTerm.html",[2,0.422,3,0.422,4,0.422,18,0.128,19,0.506,30,0.036,32,0.382,35,0.426,52,0.506,90,0.03,91,0.03,92,0.031,103,2.242,104,2.242,124,3.338,141,3.709,142,3.709,143,3.709,144,1.686,202,3.643,203,3.643]],["title/interfaces/CurveType.html",[92,0.017,144,1.188]],["body/interfaces/CurveType.html",[2,0.422,3,0.422,4,0.422,18,0.128,19,0.506,30,0.036,32,0.382,35,0.426,52,0.506,90,0.03,91,0.03,92,0.031,102,2.883,103,2.99,104,2.99,124,2.781,141,2.781,142,2.781,143,2.781,144,2.023,202,3.643,203,3.643]],["title/interfaces/Filter.html",[92,0.017,204,0.991]],["body/interfaces/Filter.html",[2,0.356,3,0.356,4,0.356,13,1.199,18,0.108,19,0.456,30,0.036,32,0.413,33,0.942,35,0.42,40,1.228,52,0.577,57,0.56,90,0.027,91,0.027,92,0.026,101,1.3,135,2.423,204,1.766,205,3.077,206,1.766,207,2.323,208,1.084,209,3.077,210,1.339,211,2.964,212,1.265,213,3.077,214,3.077,215,1.187,216,3.077,217,3.077,218,1.894]],["title/interfaces/InitProvider.html",[92,0.017,219,1.581]],["body/interfaces/InitProvider.html",[2,0.358,3,0.358,4,0.358,13,0.744,18,0.108,19,0.457,30,0.036,32,0.417,33,0.892,35,0.322,40,1.185,44,1.156,52,0.57,57,0.598,90,0.027,91,0.027,92,0.028,113,1.399,131,2.704,144,1.432,147,2.362,204,1.194,206,1.194,207,1.57,208,1.09,210,1.387,212,1.558,219,2.432,220,3.094,221,2.002,222,3.132,223,2.823,224,2.112,225,2.112,226,2.432,227,3.73,228,2.675,229,2.112,230,3.73,231,1.432]],["title/interfaces/ProviderHandler.html",[92,0.017,232,2.221]],["body/interfaces/ProviderHandler.html",[2,0.345,3,0.345,4,0.345,18,0.104,19,0.446,30,0.036,32,0.414,35,0.398,40,1.029,44,1.37,52,0.579,57,0.555,90,0.026,91,0.026,92,0.025,101,2.113,102,1.832,103,1.832,104,1.832,113,0.957,144,1.378,206,1.488,208,1.049,210,0.871,212,1.239,215,1.149,219,1.832,221,1.258,222,2.033,223,1.832,224,2.033,225,2.033,226,1.832,232,3.696,233,2.977,234,5.451,235,4.522,236,4.522,237,1.661,238,2.273,239,2.385,240,2.273,241,2.919,242,2.273,243,2.385,244,2.273,245,3.589,246,2.574,247,2.273,248,1.832,249,2.273,250,2.033,251,2.033,252,3.589,253,2.033,254,3.589,255,2.574,256,3.589,257,2.977,258,2.273]],["title/interfaces/ResponseArgs.html",[92,0.017,259,2.221]],["body/interfaces/ResponseArgs.html",[2,0.379,3,0.379,4,0.379,13,0.787,18,0.115,19,0.474,30,0.036,32,0.411,33,0.796,35,0.334,40,1.159,44,0.957,52,0.558,57,0.577,90,0.028,91,0.028,92,0.029,113,1.504,131,2.611,147,2.497,204,1.262,206,1.262,207,1.66,208,1.152,210,0.957,212,1.504,229,2.233,231,1.513,250,3.196,253,3.196,259,3.538,260,3.27,261,3.574,262,3.679,263,2.827,264,2.497,265,2.827,266,2.827,267,3.943,268,3.943]],["title/classes/Subscriber.html",[0,0.394,215,0.991]],["body/classes/Subscriber.html",[0,0.466,2,0.244,3,0.244,4,0.244,9,1.608,13,1.039,18,0.074,19,0.352,21,1.285,22,2.692,24,1.069,25,1.175,27,2.233,29,1.751,30,0.036,31,1.918,32,0.397,33,0.806,35,0.338,39,1.543,40,0.507,41,2.017,42,2.06,44,1.263,45,1.608,46,1.071,52,0.244,56,1.992,57,0.538,88,2.543,90,0.021,91,0.021,135,2.658,210,1.397,211,2.668,215,1.508,231,1.407,237,2.59,238,1.608,239,2.59,240,1.608,241,3.17,242,1.608,243,2.59,244,1.608,258,3.164,269,2.106,270,4.302,271,3.545,272,4.144,273,3.041,274,3.568,275,2.629,276,3.666,277,3.085,278,2.539,279,2.539,280,2.539,281,2.539,282,2.539,283,2.539,284,2.539,285,2.629,286,2.539,287,2.539,288,2.539,289,3.568,290,2.539,291,2.629,292,2.539,293,2.539,294,2.629,295,2.539,296,2.106,297,2.539,298,2.106,299,2.539,300,2.539,301,2.106,302,1.175,303,4.996,304,2.106,305,2.539,306,2.106,307,2.106,308,2.106,309,2.106,310,2.539,311,2.539,312,2.539,313,2.539,314,3.085,315,2.629,316,2.539,317,2.539,318,1.608,319,2.539,320,2.106,321,2.539,322,2.539,323,2.539,324,2.539,325,2.539,326,2.539,327,2.539,328,2.539,329,3.666,330,2.539,331,2.539,332,2.539,333,2.539,334,2.539,335,2.106,336,3.666,337,3.666,338,2.539]],["title/interfaces/SubscriberHandler.html",[92,0.017,277,2.221]],["body/interfaces/SubscriberHandler.html",[2,0.377,3,0.377,4,0.377,18,0.114,19,0.473,30,0.036,32,0.406,33,0.909,35,0.363,44,1.305,52,0.557,57,0.377,90,0.028,91,0.028,92,0.027,101,2.148,135,2.513,211,2.224,226,2.744,231,1.507,235,4.674,236,4.674,237,1.817,238,2.487,239,2.487,240,2.487,241,3.044,242,2.487,243,2.277,244,2.487,257,3.257,258,2.487,275,2.816,277,3.53,285,2.816,291,2.816,294,2.816,298,3.257,339,3.257,340,5.635,341,3.927,342,3.927,343,5.375,344,3.927,345,3.927]],["title/interfaces/SubscriptionEnd.html",[92,0.017,346,1.753]],["body/interfaces/SubscriptionEnd.html",[2,0.368,3,0.368,4,0.368,13,1.115,18,0.111,19,0.466,30,0.036,32,0.404,33,0.95,35,0.398,40,1.251,46,1.121,52,0.565,57,0.565,90,0.027,91,0.027,92,0.031,113,1.023,204,1.228,206,1.228,207,1.615,208,1.121,210,1.399,212,1.489,215,1.845,221,1.345,226,1.959,229,2.747,247,2.43,248,1.959,346,2.747,347,2.173,348,2.43,349,2.43,350,1.615,351,2.173,352,2.173,353,2.43,354,2.752,355,2.752,356,2.173]],["title/interfaces/SubscriptionInit.html",[92,0.017,351,1.753]],["body/interfaces/SubscriptionInit.html",[2,0.362,3,0.362,4,0.362,13,1.107,18,0.109,19,0.46,30,0.036,32,0.411,33,0.773,35,0.414,40,1.238,46,1.1,52,0.563,57,0.563,90,0.027,91,0.027,92,0.031,113,1.405,204,1.205,206,1.205,207,1.585,208,1.1,210,1.391,212,1.479,215,1.534,221,1.945,226,1.922,229,2.714,247,2.384,248,1.922,346,2.132,347,2.132,348,2.384,349,2.384,350,1.585,351,2.714,352,3.142,353,2.384,354,2.7,355,2.7,356,2.132,357,3.338]],["title/interfaces/SubscriptionType.html",[92,0.017,356,1.753]],["body/interfaces/SubscriptionType.html",[2,0.381,3,0.381,4,0.381,13,1.129,18,0.115,19,0.476,30,0.036,32,0.393,35,0.382,40,1.246,46,1.159,52,0.57,57,0.57,90,0.028,91,0.028,92,0.032,113,1.057,204,1.269,206,1.269,207,1.67,208,1.159,210,1.413,212,1.057,215,1.863,221,1.39,226,2.025,229,2.804,247,2.512,248,2.025,346,2.246,347,2.246,348,2.512,349,2.512,350,1.67,351,2.246,352,2.246,353,2.512,354,2.844,355,2.844,356,2.804]],["title/classes/Utils.html",[0,0.394,50,0.991]],["body/classes/Utils.html",[0,0.616,2,0.304,3,0.304,4,0.304,13,0.631,17,1.859,18,0.092,19,0.411,21,1.498,27,2.303,29,1.957,30,0.036,31,2.143,32,0.386,33,0.901,35,0.366,41,2,44,1.175,46,1.415,47,2.269,50,1.66,52,0.304,56,1.109,57,0.584,72,1.215,76,2.766,90,0.024,91,0.024,102,2.472,145,3.547,146,1.792,165,2.004,358,2.625,359,1.792,360,6.294,361,5.417,362,3.431,363,5.417,364,5.417,365,4.276,366,4.276,367,4.276,368,4.276,369,4.276,370,3.068,371,3.164,372,3.164,373,3.164,374,3.164,375,3.164,376,3.164,377,3.164,378,3.164,379,4.276,380,3.164,381,3.164,382,2.625,383,3.164,384,3.164,385,4.843,386,3.164,387,3.72,388,3.164,389,4.276,390,3.164,391,3.164,392,3.164,393,3.164,394,3.164,395,2.269,396,3.164,397,3.164]],["title/classes/ZapArbiter.html",[0,0.394,243,1.433]],["body/classes/ZapArbiter.html",[0,0.471,1,2.36,2,0.19,3,0.19,4,0.19,6,1.008,10,1.924,13,1.115,15,1.82,16,1.008,17,1.596,18,0.057,19,0.292,20,1.751,21,1.065,22,2.613,23,1.891,24,1.279,25,0.913,26,1.279,27,2.144,29,1.787,30,0.036,31,1.957,32,0.378,33,0.844,35,0.334,39,0.831,40,1.066,41,2.015,42,2.05,43,1.008,44,0.899,46,0.577,50,0.972,51,1.118,52,0.19,56,2.125,57,0.455,59,0.831,61,1.25,62,0.831,66,1.637,74,1.118,76,1.891,84,1.637,85,2.52,86,1.118,88,1.924,90,0.021,91,0.017,92,0.011,101,1.833,113,0.526,128,2.982,165,2.345,204,1.922,206,0.972,207,1.559,208,1.215,210,1.319,212,1.264,215,1.674,218,2.671,221,1.457,243,1.406,302,0.913,346,2.355,350,0.831,351,1.72,352,1.72,356,1.72,357,1.25,359,1.118,370,2.097,382,2.52,398,1.637,399,1.72,400,2.52,401,2.52,402,2.52,403,3.072,404,2.543,405,2.52,406,2.52,407,1.974,408,2.843,409,1.25,410,1.25,411,1.25,412,1.25,413,1.974,414,1.974,415,1.974,416,1.974,417,2.656,418,1.974,419,1.974,420,3.955,421,2.52,422,1.974,423,1.974,424,2.178,425,2.843,426,2.178,427,2.178,428,1.415,429,1.974,430,1.974,431,1.974,432,1.924,433,1.974,434,1.974,435,1.25,436,1.25,437,1.25,438,1.974,439,1.637,440,1.25,441,1.637,442,1.974,443,1.974,444,1.974,445,1.974,446,1.637,447,1.25,448,1.25,449,1.974,450,1.974,451,1.974,452,1.974,453,1.974,454,2.656,455,1.974,456,1.974,457,4.742,458,1.974,459,1.974,460,1.974,461,3.038,462,1.974,463,3.038,464,3.038,465,2.982,466,1.974,467,2.52,468,1.974,469,1.974,470,2.543,471,3.038,472,1.974,473,2.52,474,3.038,475,2.178,476,1.974,477,1.974,478,3.072,479,2.52,480,3.038,481,1.974,482,1.974,483,1.974,484,1.974,485,1.974,486,1.974,487,1.974,488,1.974]],["title/classes/ZapDispatch.html",[0,0.394,237,1.433]],["body/classes/ZapDispatch.html",[0,0.396,1,2.386,2,0.196,3,0.196,4,0.196,6,1.043,8,1.975,13,1.145,15,1.919,16,1.592,17,1.625,18,0.059,19,0.299,20,1.782,21,1.483,22,2.386,23,1.931,24,0.86,25,0.945,26,1.313,27,2.134,29,1.807,30,0.036,31,1.919,32,0.38,33,0.807,35,0.308,39,0.86,40,0.91,41,2.011,42,1.845,43,1.043,44,0.918,46,0.597,50,0.998,51,1.156,52,0.299,56,2.113,57,0.438,59,0.86,62,0.86,72,0.784,76,2.161,79,1.156,86,1.156,88,0.945,90,0.017,91,0.017,92,0.017,101,1.948,113,0.831,128,3.036,131,1.443,164,1.694,165,1.975,172,1.694,204,1.865,206,0.654,207,0.86,208,1.237,210,1.107,212,1.008,215,0.998,218,2.953,231,1.75,237,1.443,250,2.722,251,2.919,253,1.766,259,2.236,261,2.395,262,2.395,263,2.236,264,3.563,265,2.713,266,1.464,302,0.945,350,0.86,359,1.156,370,2.142,399,2.142,404,3.052,408,2.887,409,1.293,410,1.293,411,1.293,412,1.293,425,1.975,427,2.236,428,2.236,432,3.346,435,1.293,436,1.293,437,1.293,439,1.694,454,1.464,470,2.582,473,3.511,475,2.236,478,2.586,479,1.694,489,1.694,490,2.586,491,2.586,492,2.586,493,2.586,494,2.042,495,2.042,496,2.042,497,2.042,498,2.586,499,2.042,500,2.042,501,2.042,502,2.042,503,2.586,504,3.036,505,2.042,506,2.042,507,2.586,508,1.694,509,2.042,510,2.586,511,2.042,512,1.694,513,2.042,514,2.042,515,2.042,516,2.042,517,2.042,518,2.042,519,2.042,520,2.042,521,2.042,522,1.694,523,2.042,524,2.042,525,2.042,526,2.042,527,2.042,528,4.233,529,2.042,530,2.042,531,4.233,532,2.042,533,3.782,534,2.042,535,2.042,536,3.118,537,2.042,538,2.042,539,2.042,540,2.042,541,2.042,542,2.042,543,2.042,544,2.042,545,2.042,546,2.042,547,2.042,548,2.042,549,2.042]],["title/classes/ZapProvider.html",[0,0.394,550,2.221]],["body/classes/ZapProvider.html",[0,0.306,2,0.141,3,0.141,4,0.141,8,1.525,10,2.234,11,2.234,12,2.643,13,1.092,15,1.962,18,0.043,19,0.231,21,0.844,22,2.781,24,0.62,25,0.682,27,2.185,29,1.755,30,0.036,31,1.923,32,0.395,33,0.808,35,0.373,39,1.014,40,0.609,41,2.121,42,2.251,44,1.069,45,0.933,46,0.892,50,0.471,52,0.141,56,2.028,57,0.55,65,2.234,72,1.602,88,2.2,90,0.014,91,0.014,98,2.696,100,1.727,102,1.229,103,1.801,104,1.801,113,0.642,135,2.131,138,2.53,144,1.172,146,0.834,161,2.533,191,1.056,206,1.336,208,0.704,210,1.363,211,1.364,215,1.636,218,2.131,219,1.559,221,0.844,222,1.364,223,2.497,224,0.834,225,1.997,231,0.565,232,2.19,237,2.2,238,0.933,239,2.318,240,0.933,241,2.693,242,0.933,243,2.2,244,0.933,246,2.19,248,1.559,249,2.463,250,1.364,251,2.494,253,1.729,255,1.727,258,2.463,261,1.525,262,0.933,264,2.234,301,1.222,302,1.114,304,1.222,306,1.222,307,1.222,308,1.222,309,1.222,318,1.525,320,1.222,335,1.222,357,2.463,404,2.364,417,1.056,420,1.727,426,1.727,440,2.643,447,1.525,448,1.525,465,1.727,470,2.364,504,1.056,508,1.222,522,1.222,550,1.727,551,1.222,552,3.054,553,1.997,554,1.997,555,2.533,556,2.533,557,1.997,558,1.997,559,1.727,560,1.727,561,1.997,562,1.997,563,2.408,564,1.473,565,1.473,566,1.473,567,1.473,568,1.473,569,1.473,570,1.473,571,1.473,572,1.473,573,3.462,574,1.473,575,1.997,576,1.997,577,2.993,578,1.473,579,1.473,580,2.53,581,1.473,582,1.473,583,1.473,584,1.473,585,1.473,586,1.473,587,1.222,588,1.473,589,2.19,590,1.997,591,1.222,592,1.473,593,1.473,594,1.473,595,1.473,596,1.473,597,1.473,598,1.473,599,1.473,600,1.473,601,1.222,602,1.222,603,1.473,604,1.222,605,1.222,606,1.222,607,1.473,608,1.997,609,1.473,610,1.473,611,4.755,612,3.889,613,3.527,614,3.527,615,1.222,616,1.473,617,1.473,618,1.473,619,1.473,620,1.473,621,1.222,622,2.408,623,1.473,624,1.473,625,1.473,626,1.222,627,1.473,628,1.473,629,1.222,630,1.473,631,1.473,632,1.473,633,1.473,634,1.473,635,1.473,636,1.473,637,1.473,638,1.473,639,1.473,640,1.473,641,1.473,642,1.473,643,1.473,644,2.408,645,1.473,646,1.473,647,1.473,648,1.473,649,2.408,650,3.054,651,2.408,652,1.473,653,1.473,654,1.473,655,1.473,656,1.473,657,1.473,658,1.473,659,1.473,660,1.473,661,1.473,662,1.473,663,1.473,664,1.473,665,1.473]],["title/interfaces/ZapProviderType.html",[92,0.017,387,2.221]],["body/interfaces/ZapProviderType.html",[2,0.383,3,0.383,4,0.383,13,1.131,18,0.116,19,0.477,30,0.036,32,0.412,35,0.402,44,0.968,52,0.52,57,0.603,74,2.259,90,0.028,91,0.028,92,0.027,98,3.111,113,1.325,210,1.375,212,1.063,221,1.897,223,2.764,224,2.259,353,2.527,357,3.429,387,3.565,608,3.309,666,3.309,667,3.309,668,3.99,669,3.99,670,3.99,671,3.99,672,3.309,673,3.99,674,3.99,675,3.99,676,3.99,677,3.99,678,3.99]],["title/classes/ZapRegistry.html",[0,0.394,239,1.433]],["body/classes/ZapRegistry.html",[0,0.328,1,2.196,2,0.154,3,0.154,4,0.154,6,1.316,12,3.494,13,1.192,15,2.216,16,0.818,17,1.242,18,0.146,19,0.248,20,1.56,21,0.904,22,2.801,23,1.651,24,0.675,25,0.742,26,1.085,27,2.157,29,1.834,30,0.036,31,2.009,32,0.383,33,0.845,35,0.275,39,0.675,40,1.121,41,2.116,42,2.25,43,0.818,44,0.9,46,0.468,50,0.825,51,0.908,52,0.248,54,1.329,56,2.15,57,0.511,59,0.675,61,1.633,62,0.675,72,1.751,76,1.316,79,1.46,88,2.196,90,0.014,91,0.014,98,2.715,101,1.599,113,0.427,131,1.497,144,0.615,146,0.908,191,1.849,193,2.683,194,2.139,196,2.139,204,1.675,210,1.393,212,1.083,218,2.672,219,1.651,221,1.424,222,0.908,223,2.074,224,0.908,225,1.832,228,2.32,231,1.242,239,1.193,359,0.908,370,1.46,399,1.832,404,2.687,408,2.572,409,1.015,410,1.015,411,1.015,412,1.015,425,3.456,428,1.149,435,1.015,436,1.015,437,1.015,440,1.633,447,1.633,448,1.633,454,2.913,467,1.329,470,2.584,512,1.329,559,1.849,560,1.849,580,1.849,587,1.329,589,1.849,591,1.329,602,1.329,604,1.329,615,1.329,621,1.329,629,1.329,679,1.329,680,2.139,681,2.139,682,2.139,683,2.139,684,2.139,685,2.139,686,2.139,687,2.139,688,2.139,689,2.578,690,1.603,691,1.603,692,3.075,693,1.603,694,1.603,695,2.139,696,1.603,697,1.603,698,1.603,699,1.603,700,1.603,701,1.603,702,1.603,703,2.139,704,2.139,705,2.139,706,1.603,707,3.6,708,2.139,709,2.139,710,1.603,711,1.603,712,1.603,713,1.603,714,1.603,715,1.603,716,1.603,717,1.603,718,1.603,719,1.603,720,1.603,721,1.603,722,1.603,723,1.603,724,1.603,725,1.603,726,1.603,727,1.603,728,1.603,729,1.603,730,1.603,731,1.603,732,1.603,733,1.603,734,1.603,735,1.603,736,1.603,737,1.603,738,1.603,739,1.603,740,1.603,741,1.603,742,1.603,743,1.603,744,1.603,745,1.603,746,1.603,747,1.603,748,1.603,749,1.603,750,1.603,751,1.603,752,1.603,753,1.603,754,1.603,755,1.603,756,1.603,757,1.603,758,1.603,759,3.235,760,1.603,761,1.603,762,1.603,763,1.603,764,1.603]],["title/classes/ZapToken.html",[0,0.394,271,1.961]],["body/classes/ZapToken.html",[0,0.473,1,2.557,2,0.249,3,0.249,4,0.249,6,1.323,9,1.641,11,3.698,13,0.868,15,2.073,16,1.323,17,1.67,18,0.075,19,0.357,20,2.002,21,1.667,22,2.747,23,2.222,24,1.091,25,1.199,26,1.566,27,2.192,29,1.765,30,0.036,31,1.933,32,0.386,33,0.813,35,0.373,39,1.832,40,1.216,41,2.065,42,2.219,43,1.323,44,1.056,46,0.757,50,0.829,51,1.467,52,0.249,56,2.117,57,0.457,59,1.091,60,1.467,62,1.091,72,0.995,86,1.467,88,2.201,90,0.021,91,0.021,212,1.16,271,2.356,314,3.612,315,3.612,318,3.32,359,1.467,399,2.464,408,3.189,409,1.641,410,1.641,411,1.641,412,1.641,435,1.641,436,1.641,437,1.641,577,4.257,765,2.591,766,3.086,767,3.945,768,3.086,769,3.086,770,2.591,771,2.591,772,4.348,773,2.591,774,2.591,775,2.591,776,2.591,777,2.591,778,2.591,779,2.591,780,3.61,781,2.591,782,2.591,783,2.591,784,2.591,785,2.591,786,2.591,787,2.591,788,2.591,789,3.72,790,3.72,791,2.591,792,3.72,793,2.591,794,2.591,795,2.591,796,2.591,797,2.591,798,4.352,799,2.591,800,2.591,801,2.591]],["title/dependencies.html",[802,1.859,803,3.086]],["body/dependencies.html",[17,1.91,30,0.036,42,1.534,50,1.28,90,0.028,91,0.028,131,1.85,147,2.532,302,1.85,350,1.683,395,2.867,803,3.316,804,3.998,805,3.998,806,3.998,807,3.998,808,3.998,809,3.998,810,3.998,811,5.419,812,3.998,813,3.998,814,3.998,815,3.998,816,3.998,817,3.316,818,3.316,819,3.998,820,3.998,821,3.998,822,3.998,823,3.998,824,3.998,825,3.998,826,3.998,827,3.998,828,5.419,829,3.998,830,3.998,831,3.998,832,3.998,833,3.998,834,3.998,835,3.998,836,3.998,837,3.998,838,3.998,839,3.998,840,3.998,841,5.419,842,3.998,843,3.998,844,4.977,845,3.998,846,3.998,847,3.998,848,4.977,849,3.998,850,3.998,851,3.998,852,4.977,853,4.977,854,3.998,855,3.998,856,3.998]],["title/miscellaneous/functions.html",[101,1.304,857,1.323]],["body/miscellaneous/functions.html",[18,0.142,30,0.031,48,3.086,90,0.031,91,0.031,101,1.707,362,3.735,802,3.494,857,2.488,858,4.042,859,4.042]],["title/index.html",[18,0.075,424,1.859,860,2.592]],["body/index.html",[0,0.276,1,1.927,7,1.077,8,1.769,9,2.067,10,2.067,11,3.366,12,3.115,13,1.216,14,1.077,15,2.119,16,1.854,17,0.498,18,0.105,20,1.652,21,0.76,23,1.108,29,2.179,30,0.032,33,0.35,35,0.411,39,0.913,40,1.21,41,2.129,42,2.208,43,1.108,48,1.374,56,0.979,57,0.586,58,2.318,59,1.652,60,1.582,61,1.374,62,1.652,72,1.394,74,1.228,79,0.735,90,0.012,91,0.012,92,0.012,98,2.455,100,2.004,101,1.758,102,1.427,103,1.427,104,1.427,105,1.077,109,1.799,110,1.799,111,1.799,113,0.346,121,1.077,126,1.077,130,1.077,131,1.816,134,1.799,135,2.858,136,1.077,137,1.077,138,3.131,140,1.077,141,0.822,142,0.822,143,0.822,144,0.498,204,1.85,206,0.894,208,0.954,210,1.467,211,1.849,212,1.337,215,1.814,218,2.646,221,1.144,222,1.228,223,1.666,231,0.833,237,1.004,239,1.293,241,1.228,243,1.004,248,0.663,249,1.374,250,1.582,251,2.472,253,1.228,261,1.374,262,2.067,264,2.765,265,0.931,266,0.931,271,1.374,272,3.763,273,1.799,274,3.255,289,1.077,302,1.293,314,1.556,315,2.341,318,2.485,350,1.176,352,0.735,362,1.374,399,2.056,400,1.799,401,1.799,402,1.799,403,1.799,404,3.17,405,1.799,406,1.799,417,1.556,420,2.604,421,1.077,424,0.931,425,3.326,426,0.931,427,1.556,432,2.067,440,2.485,441,1.799,446,1.077,447,1.769,448,1.769,465,0.931,470,2.841,475,0.931,490,1.799,491,1.799,492,1.799,493,1.799,498,1.077,503,1.077,504,2.004,507,1.077,510,1.077,550,1.556,553,1.799,554,1.799,555,1.799,556,1.799,557,2.708,558,1.799,559,2.341,560,2.341,561,1.799,562,1.799,575,3.012,576,3.255,577,3.926,580,2.004,589,1.556,590,1.077,626,1.077,680,1.077,681,1.799,682,1.799,683,1.799,684,1.799,685,1.799,686,1.799,687,1.799,688,1.799,692,1.799,695,1.799,703,1.077,704,1.077,705,1.077,707,2.318,708,1.077,709,1.077,766,1.077,767,2.318,768,1.799,769,1.799,780,1.077,802,0.931,861,1.298,862,1.298,863,2.169,864,2.169,865,2.169,866,2.169,867,2.169,868,2.169,869,2.169,870,2.169,871,2.169,872,4.165,873,5.866,874,4.366,875,2.794,876,4.809,877,1.298,878,1.298,879,1.298,880,1.298,881,1.298,882,1.298,883,2.169,884,1.298,885,1.298,886,1.298,887,2.794,888,1.298]],["title/modules.html",[889,3.495]],["body/modules.html",[30,0.032,90,0.032,91,0.032,889,4.132]],["title/overview.html",[890,3.495]],["body/overview.html",[0,0.627,30,0.032,90,0.032,91,0.032,92,0.027,890,4.091,891,4.932,892,4.932]],["title/miscellaneous/typealiases.html",[857,1.323,893,3.721]],["body/miscellaneous/typealiases.html",[18,0.095,30,0.03,32,0.427,40,1.249,57,0.584,90,0.025,91,0.025,205,2.719,208,1.824,209,4.089,213,4.089,214,4.089,216,4.089,217,4.089,219,2.517,220,2.719,225,3.194,228,3.536,231,1.892,233,2.719,246,3.536,249,3.122,251,2.792,255,3.536,260,2.719,263,3.536,275,3.536,285,3.536,291,3.536,294,3.536,339,2.719,347,1.856,350,1.38,432,2.773,573,5.227,666,2.719,667,4.089,672,4.089,772,4.089,857,1.674,894,3.278,895,5.309,896,3.278]],["title/miscellaneous/variables.html",[857,1.323,897,3.086]],["body/miscellaneous/variables.html",[5,2.422,17,2.334,18,0.085,30,0.036,32,0.356,35,0.368,45,3.662,47,3.331,48,2.941,50,1.788,57,0.389,72,1.553,74,2.63,76,3.237,90,0.023,91,0.023,99,2.422,146,2.982,269,2.422,296,2.422,302,1.873,347,1.653,348,3.451,349,1.849,358,2.422,362,1.849,370,3.591,395,3.331,398,2.422,489,2.422,551,2.422,601,3.357,605,3.852,606,2.422,679,2.422,817,2.422,818,3.357,857,1.491,858,5.128,859,2.422,895,2.422,897,2.422,898,4.644,899,4.644,900,5.966,901,4.644,902,4.644,903,4.644,904,4.644,905,4.644,906,5.015,907,2.92,908,2.92,909,2.92,910,4.047,911,2.92,912,2.92,913,2.92,914,2.92,915,2.92,916,2.92,917,2.92,918,2.92,919,2.92,920,2.92,921,2.92,922,2.92,923,2.92,924,2.92,925,2.92]]],"invertedIndex":[["",{"_index":30,"title":{},"body":{"classes/BaseContract.html":{},"interfaces/BaseContractType.html":{},"interfaces/ContractType.html":{},"classes/Curve.html":{},"interfaces/CurveTerm.html":{},"interfaces/CurveType.html":{},"interfaces/Filter.html":{},"interfaces/InitProvider.html":{},"interfaces/ProviderHandler.html":{},"interfaces/ResponseArgs.html":{},"classes/Subscriber.html":{},"interfaces/SubscriberHandler.html":{},"interfaces/SubscriptionEnd.html":{},"interfaces/SubscriptionInit.html":{},"interfaces/SubscriptionType.html":{},"classes/Utils.html":{},"classes/ZapArbiter.html":{},"classes/ZapDispatch.html":{},"classes/ZapProvider.html":{},"interfaces/ZapProviderType.html":{},"classes/ZapRegistry.html":{},"classes/ZapToken.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":165,"title":{},"body":{"classes/Curve.html":{},"classes/Utils.html":{},"classes/ZapArbiter.html":{},"classes/ZapDispatch.html":{}}}],["0.0.4",{"_index":847,"title":{},"body":{"dependencies.html":{}}}],["0.11.1",{"_index":842,"title":{},"body":{"dependencies.html":{}}}],["0.12.7",{"_index":826,"title":{},"body":{"dependencies.html":{}}}],["0.9.100",{"_index":840,"title":{},"body":{"dependencies.html":{}}}],["1",{"_index":79,"title":{},"body":{"classes/BaseContract.html":{},"classes/Curve.html":{},"classes/ZapDispatch.html":{},"classes/ZapRegistry.html":{},"index.html":{}}}],["1.0.0",{"_index":852,"title":{},"body":{"dependencies.html":{}}}],["1.0.1",{"_index":851,"title":{},"body":{"dependencies.html":{}}}],["1.1.0",{"_index":845,"title":{},"body":{"dependencies.html":{}}}],["1.1.3",{"_index":805,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":891,"title":{},"body":{"overview.html":{}}}],["16",{"_index":892,"title":{},"body":{"overview.html":{}}}],["2",{"_index":172,"title":{},"body":{"classes/Curve.html":{},"classes/ZapDispatch.html":{}}}],["2.0.2",{"_index":814,"title":{},"body":{"dependencies.html":{}}}],["2.0.8",{"_index":831,"title":{},"body":{"dependencies.html":{}}}],["2.1.5",{"_index":819,"title":{},"body":{"dependencies.html":{}}}],["2.9.2",{"_index":849,"title":{},"body":{"dependencies.html":{}}}],["3",{"_index":164,"title":{},"body":{"classes/Curve.html":{},"classes/ZapDispatch.html":{}}}],["3.0.0",{"_index":827,"title":{},"body":{"dependencies.html":{}}}],["3.0.7",{"_index":830,"title":{},"body":{"dependencies.html":{}}}],["4",{"_index":538,"title":{},"body":{"classes/ZapDispatch.html":{}}}],["4.0.4",{"_index":833,"title":{},"body":{"dependencies.html":{}}}],["4.1.2",{"_index":812,"title":{},"body":{"dependencies.html":{}}}],["4.1.3",{"_index":824,"title":{},"body":{"dependencies.html":{}}}],["4.1.4",{"_index":807,"title":{},"body":{"dependencies.html":{}}}],["400000",{"_index":349,"title":{},"body":{"interfaces/SubscriptionEnd.html":{},"interfaces/SubscriptionInit.html":{},"interfaces/SubscriptionType.html":{},"miscellaneous/variables.html":{}}}],["40000000",{"_index":916,"title":{},"body":{"miscellaneous/variables.html":{}}}],["5.10.0",{"_index":838,"title":{},"body":{"dependencies.html":{}}}],["5.2.0",{"_index":821,"title":{},"body":{"dependencies.html":{}}}],["5.2.4",{"_index":809,"title":{},"body":{"dependencies.html":{}}}],["6000000",{"_index":914,"title":{},"body":{"miscellaneous/variables.html":{}}}],["7.0.0",{"_index":836,"title":{},"body":{"dependencies.html":{}}}],["7.1.1",{"_index":813,"title":{},"body":{"dependencies.html":{}}}],["7.2.1",{"_index":810,"title":{},"body":{"dependencies.html":{}}}],["8.0.1",{"_index":816,"title":{},"body":{"dependencies.html":{}}}],["_a",{"_index":873,"title":{},"body":{"index.html":{}}}],["_calculatepolynomi",{"_index":106,"title":{},"body":{"classes/Curve.html":{}}}],["_calculatepolynomial(term",{"_index":118,"title":{},"body":{"classes/Curve.html":{}}}],["_calculatepolynomial(terms:ani",{"_index":199,"title":{},"body":{"classes/Curve.html":{}}}],["_calculateterm",{"_index":107,"title":{},"body":{"classes/Curve.html":{}}}],["_calculateterm(term",{"_index":123,"title":{},"body":{"classes/Curve.html":{}}}],["access",{"_index":14,"title":{},"body":{"classes/BaseContract.html":{},"index.html":{}}}],["activ",{"_index":441,"title":{},"body":{"classes/ZapArbiter.html":{},"index.html":{}}}],["add",{"_index":703,"title":{},"body":{"classes/ZapRegistry.html":{},"index.html":{}}}],["address",{"_index":40,"title":{},"body":{"classes/BaseContract.html":{},"interfaces/Filter.html":{},"interfaces/InitProvider.html":{},"interfaces/ProviderHandler.html":{},"interfaces/ResponseArgs.html":{},"classes/Subscriber.html":{},"interfaces/SubscriptionEnd.html":{},"interfaces/SubscriptionInit.html":{},"interfaces/SubscriptionType.html":{},"classes/ZapArbiter.html":{},"classes/ZapDispatch.html":{},"classes/ZapProvider.html":{},"classes/ZapRegistry.html":{},"classes/ZapToken.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["alias",{"_index":894,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["alloc",{"_index":767,"title":{},"body":{"classes/ZapToken.html":{},"index.html":{}}}],["allocate(undefin",{"_index":771,"title":{},"body":{"classes/ZapToken.html":{}}}],["allocate({to",{"_index":793,"title":{},"body":{"classes/ZapToken.html":{}}}],["amount",{"_index":318,"title":{},"body":{"classes/Subscriber.html":{},"classes/ZapProvider.html":{},"classes/ZapToken.html":{},"index.html":{}}}],["amount).send({from,ga",{"_index":800,"title":{},"body":{"classes/ZapToken.html":{}}}],["any|undefin",{"_index":96,"title":{},"body":{"interfaces/BaseContractType.html":{},"interfaces/ContractType.html":{}}}],["api.git",{"_index":856,"title":{},"body":{"dependencies.html":{}}}],["approv",{"_index":315,"title":{},"body":{"classes/Subscriber.html":{},"classes/ZapToken.html":{},"index.html":{}}}],["approve(undefin",{"_index":774,"title":{},"body":{"classes/ZapToken.html":{}}}],["approve({to",{"_index":796,"title":{},"body":{"classes/ZapToken.html":{}}}],["arbit",{"_index":10,"title":{},"body":{"classes/BaseContract.html":{},"classes/ZapArbiter.html":{},"classes/ZapProvider.html":{},"index.html":{}}}],["argument",{"_index":167,"title":{},"body":{"classes/Curve.html":{}}}],["array",{"_index":113,"title":{},"body":{"classes/Curve.html":{},"interfaces/InitProvider.html":{},"interfaces/ProviderHandler.html":{},"interfaces/ResponseArgs.html":{},"interfaces/SubscriptionEnd.html":{},"interfaces/SubscriptionInit.html":{},"interfaces/SubscriptionType.html":{},"classes/ZapArbiter.html":{},"classes/ZapDispatch.html":{},"classes/ZapProvider.html":{},"interfaces/ZapProviderType.html":{},"classes/ZapRegistry.html":{},"index.html":{}}}],["arrayarray",{"_index":886,"title":{},"body":{"index.html":{}}}],["arraynumb",{"_index":887,"title":{},"body":{"index.html":{}}}],["arraystr",{"_index":874,"title":{},"body":{"index.html":{}}}],["artifact",{"_index":48,"title":{},"body":{"classes/BaseContract.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["artifact:ani",{"_index":64,"title":{},"body":{"classes/BaseContract.html":{}}}],["artifactnam",{"_index":60,"title":{},"body":{"classes/BaseContract.html":{},"interfaces/BaseContractType.html":{},"interfaces/ContractType.html":{},"classes/ZapToken.html":{},"index.html":{}}}],["artifactor",{"_index":829,"title":{},"body":{"dependencies.html":{}}}],["artifacts:ani",{"_index":69,"title":{},"body":{"classes/BaseContract.html":{}}}],["artifacts[artifactnam",{"_index":68,"title":{},"body":{"classes/BaseContract.html":{}}}],["artifactsdir",{"_index":59,"title":{},"body":{"classes/BaseContract.html":{},"interfaces/BaseContractType.html":{},"interfaces/ContractType.html":{},"classes/ZapArbiter.html":{},"classes/ZapDispatch.html":{},"classes/ZapRegistry.html":{},"classes/ZapToken.html":{},"index.html":{}}}],["assert",{"_index":45,"title":{},"body":{"classes/BaseContract.html":{},"classes/Subscriber.html":{},"classes/ZapProvider.html":{},"miscellaneous/variables.html":{}}}],["assert(array.isarray(endpoint_param",{"_index":617,"title":{},"body":{"classes/ZapProvider.html":{}}}],["assert(bounddot",{"_index":326,"title":{},"body":{"classes/Subscriber.html":{}}}],["assert(endpoint",{"_index":636,"title":{},"body":{"classes/ZapProvider.html":{}}}],["assert(own",{"_index":301,"title":{},"body":{"classes/Subscriber.html":{},"classes/ZapProvider.html":{}}}],["assert(txid",{"_index":625,"title":{},"body":{"classes/ZapProvider.html":{}}}],["assert.ok(approv",{"_index":319,"title":{},"body":{"classes/Subscriber.html":{}}}],["assert.ok(this.hasenoughzap(zapnum",{"_index":312,"title":{},"body":{"classes/Subscriber.html":{}}}],["async",{"_index":22,"title":{},"body":{"classes/BaseContract.html":{},"classes/Subscriber.html":{},"classes/ZapArbiter.html":{},"classes/ZapDispatch.html":{},"classes/ZapProvider.html":{},"classes/ZapRegistry.html":{},"classes/ZapToken.html":{}}}],["asyncmigr",{"_index":898,"title":{},"body":{"miscellaneous/variables.html":{}}}],["augment",{"_index":442,"title":{},"body":{"classes/ZapArbiter.html":{}}}],["await",{"_index":88,"title":{},"body":{"classes/BaseContract.html":{},"classes/Subscriber.html":{},"classes/ZapArbiter.html":{},"classes/ZapDispatch.html":{},"classes/ZapProvider.html":{},"classes/ZapRegistry.html":{},"classes/ZapToken.html":{}}}],["balanc",{"_index":314,"title":{},"body":{"classes/Subscriber.html":{},"classes/ZapToken.html":{},"index.html":{}}}],["balanceof",{"_index":768,"title":{},"body":{"classes/ZapToken.html":{},"index.html":{}}}],["balanceof(address",{"_index":776,"title":{},"body":{"classes/ZapToken.html":{}}}],["balanceof(address:address",{"_index":784,"title":{},"body":{"classes/ZapToken.html":{}}}],["base",{"_index":483,"title":{},"body":{"classes/ZapArbiter.html":{}}}],["basecontract",{"_index":1,"title":{"classes/BaseContract.html":{}},"body":{"classes/BaseContract.html":{},"classes/ZapArbiter.html":{},"classes/ZapDispatch.html":{},"classes/ZapRegistry.html":{},"classes/ZapToken.html":{},"index.html":{}}}],["basecontract,basecontracttyp",{"_index":436,"title":{},"body":{"classes/ZapArbiter.html":{},"classes/ZapDispatch.html":{},"classes/ZapRegistry.html":{},"classes/ZapToken.html":{}}}],["basecontract:12",{"_index":411,"title":{},"body":{"classes/ZapArbiter.html":{},"classes/ZapDispatch.html":{},"classes/ZapRegistry.html":{},"classes/ZapToken.html":{}}}],["basecontract:13",{"_index":412,"title":{},"body":{"classes/ZapArbiter.html":{},"classes/ZapDispatch.html":{},"classes/ZapRegistry.html":{},"classes/ZapToken.html":{}}}],["basecontract:14",{"_index":409,"title":{},"body":{"classes/ZapArbiter.html":{},"classes/ZapDispatch.html":{},"classes/ZapRegistry.html":{},"classes/ZapToken.html":{}}}],["basecontract:15",{"_index":410,"title":{},"body":{"classes/ZapArbiter.html":{},"classes/ZapDispatch.html":{},"classes/ZapRegistry.html":{},"classes/ZapToken.html":{}}}],["basecontract:49",{"_index":435,"title":{},"body":{"classes/ZapArbiter.html":{},"classes/ZapDispatch.html":{},"classes/ZapRegistry.html":{},"classes/ZapToken.html":{}}}],["basecontracttyp",{"_index":26,"title":{"interfaces/BaseContractType.html":{}},"body":{"classes/BaseContract.html":{},"interfaces/BaseContractType.html":{},"interfaces/ContractType.html":{},"classes/ZapArbiter.html":{},"classes/ZapDispatch.html":{},"classes/ZapRegistry.html":{},"classes/ZapToken.html":{}}}],["beta.34",{"_index":853,"title":{},"body":{"dependencies.html":{}}}],["bigamount",{"_index":789,"title":{},"body":{"classes/ZapToken.html":{}}}],["bigamount).send({from,ga",{"_index":792,"title":{},"body":{"classes/ZapToken.html":{}}}],["bignumb",{"_index":131,"title":{},"body":{"classes/Curve.html":{},"interfaces/InitProvider.html":{},"interfaces/ResponseArgs.html":{},"classes/ZapDispatch.html":{},"classes/ZapRegistry.html":{},"dependencies.html":{},"index.html":{}}}],["bignumber.j",{"_index":147,"title":{},"body":{"classes/Curve.html":{},"interfaces/InitProvider.html":{},"interfaces/ResponseArgs.html":{},"dependencies.html":{}}}],["block",{"_index":352,"title":{},"body":{"interfaces/SubscriptionEnd.html":{},"interfaces/SubscriptionInit.html":{},"interfaces/SubscriptionType.html":{},"classes/ZapArbiter.html":{},"index.html":{}}}],["bond",{"_index":272,"title":{},"body":{"classes/Subscriber.html":{},"index.html":{}}}],["bond'",{"_index":877,"title":{},"body":{"index.html":{}}}],["bond(undefin",{"_index":284,"title":{},"body":{"classes/Subscriber.html":{}}}],["bond({provid",{"_index":310,"title":{},"body":{"classes/Subscriber.html":{}}}],["bondag",{"_index":9,"title":{},"body":{"classes/BaseContract.html":{},"classes/Subscriber.html":{},"classes/ZapToken.html":{},"index.html":{}}}],["bondagearg",{"_index":214,"title":{},"body":{"interfaces/Filter.html":{},"miscellaneous/typealiases.html":{}}}],["bondarg",{"_index":209,"title":{},"body":{"interfaces/Filter.html":{},"miscellaneous/typealiases.html":{}}}],["bondtyp",{"_index":285,"title":{},"body":{"classes/Subscriber.html":{},"interfaces/SubscriberHandler.html":{},"miscellaneous/typealiases.html":{}}}],["bondtype,unbondtype,subscribetype,subscriberconstructortype,subscriberhandl",{"_index":297,"title":{},"body":{"classes/Subscriber.html":{}}}],["boolean",{"_index":262,"title":{},"body":{"interfaces/ResponseArgs.html":{},"classes/ZapDispatch.html":{},"classes/ZapProvider.html":{},"index.html":{}}}],["bound",{"_index":138,"title":{},"body":{"classes/Curve.html":{},"classes/ZapProvider.html":{},"index.html":{}}}],["bounddot",{"_index":324,"title":{},"body":{"classes/Subscriber.html":{}}}],["brand",{"_index":704,"title":{},"body":{"classes/ZapRegistry.html":{},"index.html":{}}}],["buildoptionstyp",{"_index":672,"title":{},"body":{"interfaces/ZapProviderType.html":{},"miscellaneous/typealiases.html":{}}}],["calcbondr",{"_index":865,"title":{},"body":{"index.html":{}}}],["calcbondratetyp",{"_index":216,"title":{},"body":{"interfaces/Filter.html":{},"miscellaneous/typealiases.html":{}}}],["calcdotsforzap",{"_index":553,"title":{},"body":{"classes/ZapProvider.html":{},"index.html":{}}}],["calcdotsforzap(undefin",{"_index":572,"title":{},"body":{"classes/ZapProvider.html":{}}}],["calcdotsforzap({endpoint",{"_index":641,"title":{},"body":{"classes/ZapProvider.html":{}}}],["calcul",{"_index":100,"title":{},"body":{"classes/Curve.html":{},"classes/ZapProvider.html":{},"index.html":{}}}],["calczapfordot",{"_index":864,"title":{},"body":{"index.html":{}}}],["call",{"_index":589,"title":{},"body":{"classes/ZapProvider.html":{},"classes/ZapRegistry.html":{},"index.html":{}}}],["callback",{"_index":218,"title":{},"body":{"interfaces/Filter.html":{},"classes/ZapArbiter.html":{},"classes/ZapDispatch.html":{},"classes/ZapProvider.html":{},"classes/ZapRegistry.html":{},"index.html":{}}}],["callback:funct",{"_index":485,"title":{},"body":{"classes/ZapArbiter.html":{}}}],["callback:function):promis",{"_index":759,"title":{},"body":{"classes/ZapRegistry.html":{}}}],["callback:function):void",{"_index":473,"title":{},"body":{"classes/ZapArbiter.html":{},"classes/ZapDispatch.html":{}}}],["case",{"_index":528,"title":{},"body":{"classes/ZapDispatch.html":{}}}],["catch",{"_index":84,"title":{},"body":{"classes/BaseContract.html":{},"classes/ZapArbiter.html":{}}}],["chai",{"_index":811,"title":{},"body":{"dependencies.html":{}}}],["check",{"_index":157,"title":{},"body":{"classes/Curve.html":{}}}],["checkvalid",{"_index":108,"title":{},"body":{"classes/Curve.html":{}}}],["checkvalidity():void",{"_index":162,"title":{},"body":{"classes/Curve.html":{}}}],["clariti",{"_index":843,"title":{},"body":{"dependencies.html":{}}}],["class",{"_index":0,"title":{"classes/BaseContract.html":{},"classes/Curve.html":{},"classes/Subscriber.html":{},"classes/Utils.html":{},"classes/ZapArbiter.html":{},"classes/ZapDispatch.html":{},"classes/ZapProvider.html":{},"classes/ZapRegistry.html":{},"classes/ZapToken.html":{}},"body":{"classes/BaseContract.html":{},"classes/Curve.html":{},"classes/Subscriber.html":{},"classes/Utils.html":{},"classes/ZapArbiter.html":{},"classes/ZapDispatch.html":{},"classes/ZapProvider.html":{},"classes/ZapRegistry.html":{},"classes/ZapToken.html":{},"index.html":{},"overview.html":{}}}],["clearbuild",{"_index":361,"title":{},"body":{"classes/Utils.html":{}}}],["coef",{"_index":141,"title":{},"body":{"classes/Curve.html":{},"interfaces/CurveTerm.html":{},"interfaces/CurveType.html":{},"index.html":{}}}],["compodoc/compodoc",{"_index":804,"title":{},"body":{"dependencies.html":{}}}],["config.j",{"_index":923,"title":{},"body":{"miscellaneous/variables.html":{}}}],["console.error(error",{"_index":651,"title":{},"body":{"classes/ZapProvider.html":{}}}],["console.log(\"convert",{"_index":623,"title":{},"body":{"classes/ZapProvider.html":{}}}],["console.log(\"subscript",{"_index":460,"title":{},"body":{"classes/ZapArbiter.html":{}}}],["console.log(error",{"_index":657,"title":{},"body":{"classes/ZapProvider.html":{}}}],["console.log(hextoutf8(endpointparam",{"_index":756,"title":{},"body":{"classes/ZapRegistry.html":{}}}],["const",{"_index":46,"title":{},"body":{"classes/BaseContract.html":{},"classes/Curve.html":{},"classes/Subscriber.html":{},"interfaces/SubscriptionEnd.html":{},"interfaces/SubscriptionInit.html":{},"interfaces/SubscriptionType.html":{},"classes/Utils.html":{},"classes/ZapArbiter.html":{},"classes/ZapDispatch.html":{},"classes/ZapProvider.html":{},"classes/ZapRegistry.html":{},"classes/ZapToken.html":{}}}],["constant",{"_index":102,"title":{},"body":{"classes/Curve.html":{},"interfaces/CurveType.html":{},"interfaces/ProviderHandler.html":{},"classes/Utils.html":{},"classes/ZapProvider.html":{},"index.html":{}}}],["constants:numb",{"_index":203,"title":{},"body":{"interfaces/CurveTerm.html":{},"interfaces/CurveType.html":{}}}],["constructor",{"_index":24,"title":{},"body":{"classes/BaseContract.html":{},"classes/Curve.html":{},"classes/Subscriber.html":{},"classes/ZapArbiter.html":{},"classes/ZapDispatch.html":{},"classes/ZapProvider.html":{},"classes/ZapRegistry.html":{},"classes/ZapToken.html":{}}}],["constructor(const",{"_index":112,"title":{},"body":{"classes/Curve.html":{}}}],["constructor(constants:array",{"_index":150,"title":{},"body":{"classes/Curve.html":{}}}],["constructor(undefin",{"_index":25,"title":{},"body":{"classes/BaseContract.html":{},"classes/Subscriber.html":{},"classes/ZapArbiter.html":{},"classes/ZapDispatch.html":{},"classes/ZapProvider.html":{},"classes/ZapRegistry.html":{},"classes/ZapToken.html":{}}}],["constructor({artifactsdir",{"_index":443,"title":{},"body":{"classes/ZapArbiter.html":{}}}],["constructor({artifactsdir,artifactname,networkid,networkprovider}:basecontracttyp",{"_index":63,"title":{},"body":{"classes/BaseContract.html":{}}}],["constructor({artifactsdir=undefined,artifactname=undefined,networkid=undefined,networkprovider=undefined}:basecontracttyp",{"_index":782,"title":{},"body":{"classes/ZapToken.html":{}}}],["constructor({artifactsdir=undefined,networkid=undefined,networkprovider=undefined}:basecontracttyp",{"_index":512,"title":{},"body":{"classes/ZapDispatch.html":{},"classes/ZapRegistry.html":{}}}],["constructor({owner,handler,zapregistry,zapdispatch,zapbondage,zaparbiter}:providerconstructortyp",{"_index":610,"title":{},"body":{"classes/ZapProvider.html":{}}}],["constructor({owner,handler,zaptoken,zapregistry,zapdispatch,zapbondage,zaparbiter}:subscriberconstructortyp",{"_index":300,"title":{},"body":{"classes/Subscriber.html":{}}}],["content",{"_index":862,"title":{},"body":{"index.html":{}}}],["contract",{"_index":15,"title":{},"body":{"classes/BaseContract.html":{},"interfaces/BaseContractType.html":{},"interfaces/ContractType.html":{},"classes/ZapArbiter.html":{},"classes/ZapDispatch.html":{},"classes/ZapProvider.html":{},"classes/ZapRegistry.html":{},"classes/ZapToken.html":{},"index.html":{}}}],["contract'",{"_index":61,"title":{},"body":{"classes/BaseContract.html":{},"classes/ZapArbiter.html":{},"classes/ZapRegistry.html":{},"index.html":{}}}],["contract:ani",{"_index":54,"title":{},"body":{"classes/BaseContract.html":{},"classes/ZapRegistry.html":{}}}],["contracts_build_directori",{"_index":674,"title":{},"body":{"interfaces/ZapProviderType.html":{}}}],["contracts_directory:str",{"_index":675,"title":{},"body":{"interfaces/ZapProviderType.html":{}}}],["contractsdir",{"_index":899,"title":{},"body":{"miscellaneous/variables.html":{}}}],["contracttyp",{"_index":97,"title":{"interfaces/ContractType.html":{}},"body":{"interfaces/BaseContractType.html":{},"interfaces/ContractType.html":{}}}],["convert",{"_index":130,"title":{},"body":{"classes/Curve.html":{},"index.html":{}}}],["convertedconst",{"_index":191,"title":{},"body":{"classes/Curve.html":{},"classes/ZapProvider.html":{},"classes/ZapRegistry.html":{}}}],["converteddivid",{"_index":196,"title":{},"body":{"classes/Curve.html":{},"classes/ZapRegistry.html":{}}}],["convertedpart",{"_index":194,"title":{},"body":{"classes/Curve.html":{},"classes/ZapRegistry.html":{}}}],["converttobnarray",{"_index":109,"title":{},"body":{"classes/Curve.html":{},"index.html":{}}}],["converttobnarrays():array",{"_index":190,"title":{},"body":{"classes/Curve.html":{}}}],["core",{"_index":818,"title":{},"body":{"dependencies.html":{},"miscellaneous/variables.html":{}}}],["core/lib/commands/migrate.j",{"_index":918,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cost",{"_index":881,"title":{},"body":{"index.html":{}}}],["creat",{"_index":590,"title":{},"body":{"classes/ZapProvider.html":{},"index.html":{}}}],["currentcostofdot",{"_index":866,"title":{},"body":{"index.html":{}}}],["curv",{"_index":98,"title":{"classes/Curve.html":{}},"body":{"classes/Curve.html":{},"classes/ZapProvider.html":{},"interfaces/ZapProviderType.html":{},"classes/ZapRegistry.html":{},"index.html":{}}}],["curve'",{"_index":126,"title":{},"body":{"classes/Curve.html":{},"index.html":{}}}],["curve(const",{"_index":622,"title":{},"body":{"classes/ZapProvider.html":{}}}],["curve(curve['0'].map((i:string)=>parseint(i)),curve['1'].map((i:string)=>parseint(i)),curve['2'].map((i:string)=>parseint(i",{"_index":748,"title":{},"body":{"classes/ZapRegistry.html":{}}}],["curve,curvetyp",{"_index":602,"title":{},"body":{"classes/ZapProvider.html":{},"classes/ZapRegistry.html":{}}}],["curve.constants.map((item:numb",{"_index":730,"title":{},"body":{"classes/ZapRegistry.html":{}}}],["curve.dividers.map((item:numb",{"_index":732,"title":{},"body":{"classes/ZapRegistry.html":{}}}],["curve.parts.map((item:numb",{"_index":731,"title":{},"body":{"classes/ZapRegistry.html":{}}}],["curve:curvetyp",{"_index":227,"title":{},"body":{"interfaces/InitProvider.html":{}}}],["curveterm",{"_index":124,"title":{"interfaces/CurveTerm.html":{}},"body":{"classes/Curve.html":{},"interfaces/CurveTerm.html":{},"interfaces/CurveType.html":{}}}],["curvetyp",{"_index":144,"title":{"interfaces/CurveType.html":{}},"body":{"classes/Curve.html":{},"interfaces/CurveTerm.html":{},"interfaces/CurveType.html":{},"interfaces/InitProvider.html":{},"interfaces/ProviderHandler.html":{},"classes/ZapProvider.html":{},"classes/ZapRegistry.html":{},"index.html":{}}}],["data",{"_index":507,"title":{},"body":{"classes/ZapDispatch.html":{},"index.html":{}}}],["datasubscriptionend",{"_index":477,"title":{},"body":{"classes/ZapArbiter.html":{}}}],["default",{"_index":76,"title":{},"body":{"classes/BaseContract.html":{},"classes/Utils.html":{},"classes/ZapArbiter.html":{},"classes/ZapDispatch.html":{},"classes/ZapRegistry.html":{},"miscellaneous/variables.html":{}}}],["default_ga",{"_index":348,"title":{},"body":{"interfaces/SubscriptionEnd.html":{},"interfaces/SubscriptionInit.html":{},"interfaces/SubscriptionType.html":{},"miscellaneous/variables.html":{}}}],["defin",{"_index":27,"title":{},"body":{"classes/BaseContract.html":{},"classes/Curve.html":{},"classes/Subscriber.html":{},"classes/Utils.html":{},"classes/ZapArbiter.html":{},"classes/ZapDispatch.html":{},"classes/ZapProvider.html":{},"classes/ZapRegistry.html":{},"classes/ZapToken.html":{}}}],["depend",{"_index":803,"title":{"dependencies.html":{}},"body":{"dependencies.html":{}}}],["descript",{"_index":6,"title":{},"body":{"classes/BaseContract.html":{},"classes/Curve.html":{},"classes/ZapArbiter.html":{},"classes/ZapDispatch.html":{},"classes/ZapRegistry.html":{},"classes/ZapToken.html":{}}}],["dirname(require.resolve(\"zap_contracts/truffl",{"_index":922,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dispatch",{"_index":8,"title":{},"body":{"classes/BaseContract.html":{},"classes/ZapDispatch.html":{},"classes/ZapProvider.html":{},"index.html":{}}}],["distinguish",{"_index":705,"title":{},"body":{"classes/ZapRegistry.html":{},"index.html":{}}}],["divid",{"_index":103,"title":{},"body":{"classes/Curve.html":{},"interfaces/CurveTerm.html":{},"interfaces/CurveType.html":{},"interfaces/ProviderHandler.html":{},"classes/ZapProvider.html":{},"index.html":{}}}],["doc",{"_index":850,"title":{},"body":{"dependencies.html":{}}}],["document",{"_index":815,"title":{},"body":{"dependencies.html":{}}}],["dot",{"_index":135,"title":{},"body":{"classes/Curve.html":{},"interfaces/Filter.html":{},"classes/Subscriber.html":{},"interfaces/SubscriberHandler.html":{},"classes/ZapProvider.html":{},"index.html":{}}}],["dots}:subscribetype):promis",{"_index":332,"title":{},"body":{"classes/Subscriber.html":{}}}],["dots}:unbondtype):promis",{"_index":323,"title":{},"body":{"classes/Subscriber.html":{}}}],["dots}:{endpoint:string,dots:number}):promis",{"_index":640,"title":{},"body":{"classes/ZapProvider.html":{}}}],["dynam",{"_index":261,"title":{},"body":{"interfaces/ResponseArgs.html":{},"classes/ZapDispatch.html":{},"classes/ZapProvider.html":{},"index.html":{}}}],["dynamic:boolean",{"_index":254,"title":{},"body":{"interfaces/ProviderHandler.html":{}}}],["dynamic}:respond):promis",{"_index":664,"title":{},"body":{"classes/ZapProvider.html":{}}}],["each",{"_index":176,"title":{},"body":{"classes/Curve.html":{}}}],["encod",{"_index":159,"title":{},"body":{"classes/Curve.html":{}}}],["end",{"_index":461,"title":{},"body":{"classes/ZapArbiter.html":{}}}],["endpoint",{"_index":210,"title":{},"body":{"interfaces/Filter.html":{},"interfaces/InitProvider.html":{},"interfaces/ProviderHandler.html":{},"interfaces/ResponseArgs.html":{},"classes/Subscriber.html":{},"interfaces/SubscriptionEnd.html":{},"interfaces/SubscriptionInit.html":{},"interfaces/SubscriptionType.html":{},"classes/ZapArbiter.html":{},"classes/ZapDispatch.html":{},"classes/ZapProvider.html":{},"interfaces/ZapProviderType.html":{},"classes/ZapRegistry.html":{},"index.html":{}}}],["endpoint'",{"_index":692,"title":{},"body":{"classes/ZapRegistry.html":{},"index.html":{}}}],["endpoint:endpoint",{"_index":638,"title":{},"body":{"classes/ZapProvider.html":{}}}],["endpoint:str",{"_index":226,"title":{},"body":{"interfaces/InitProvider.html":{},"interfaces/ProviderHandler.html":{},"interfaces/SubscriberHandler.html":{},"interfaces/SubscriptionEnd.html":{},"interfaces/SubscriptionInit.html":{},"interfaces/SubscriptionType.html":{}}}],["endpoint_param",{"_index":221,"title":{},"body":{"interfaces/InitProvider.html":{},"interfaces/ProviderHandler.html":{},"interfaces/SubscriptionEnd.html":{},"interfaces/SubscriptionInit.html":{},"interfaces/SubscriptionType.html":{},"classes/ZapArbiter.html":{},"classes/ZapProvider.html":{},"interfaces/ZapProviderType.html":{},"classes/ZapRegistry.html":{},"index.html":{}}}],["endpoint_params.map((item:str",{"_index":723,"title":{},"body":{"classes/ZapRegistry.html":{}}}],["endpoint_params.map(el",{"_index":736,"title":{},"body":{"classes/ZapRegistry.html":{}}}],["endpoint_params:array",{"_index":678,"title":{},"body":{"interfaces/ZapProviderType.html":{}}}],["endpoint_params[i",{"_index":451,"title":{},"body":{"classes/ZapArbiter.html":{}}}],["endpoint_params}:initprovider):promis",{"_index":616,"title":{},"body":{"classes/ZapProvider.html":{}}}],["endpointparam",{"_index":231,"title":{},"body":{"interfaces/InitProvider.html":{},"interfaces/ResponseArgs.html":{},"classes/Subscriber.html":{},"interfaces/SubscriberHandler.html":{},"classes/ZapDispatch.html":{},"classes/ZapProvider.html":{},"classes/ZapRegistry.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["endpointparams,txid,address,filt",{"_index":718,"title":{},"body":{"classes/ZapRegistry.html":{}}}],["endpointparams[i",{"_index":517,"title":{},"body":{"classes/ZapDispatch.html":{}}}],["endsubscriptionprovid",{"_index":400,"title":{},"body":{"classes/ZapArbiter.html":{},"index.html":{}}}],["endsubscriptionprovider(undefin",{"_index":413,"title":{},"body":{"classes/ZapArbiter.html":{}}}],["endsubscriptionprovider({subscrib",{"_index":468,"title":{},"body":{"classes/ZapArbiter.html":{}}}],["endsubscriptionsubscrib",{"_index":401,"title":{},"body":{"classes/ZapArbiter.html":{},"index.html":{}}}],["endsubscriptionsubscriber(undefin",{"_index":415,"title":{},"body":{"classes/ZapArbiter.html":{}}}],["endsubscriptionsubscriber({provid",{"_index":462,"title":{},"body":{"classes/ZapArbiter.html":{}}}],["erc20",{"_index":766,"title":{},"body":{"classes/ZapToken.html":{},"index.html":{}}}],["err",{"_index":85,"title":{},"body":{"classes/BaseContract.html":{},"classes/ZapArbiter.html":{}}}],["error",{"_index":161,"title":{},"body":{"classes/Curve.html":{},"classes/ZapProvider.html":{}}}],["error(\"a",{"_index":174,"title":{},"body":{"classes/Curve.html":{}}}],["error(\"divid",{"_index":181,"title":{},"body":{"classes/Curve.html":{}}}],["error(\"invalid",{"_index":166,"title":{},"body":{"classes/Curve.html":{}}}],["error(\"unknown",{"_index":170,"title":{},"body":{"classes/Curve.html":{}}}],["error('fail",{"_index":801,"title":{},"body":{"classes/ZapToken.html":{}}}],["error('invalid",{"_index":542,"title":{},"body":{"classes/ZapDispatch.html":{}}}],["error:ani",{"_index":649,"title":{},"body":{"classes/ZapProvider.html":{}}}],["error:error",{"_index":656,"title":{},"body":{"classes/ZapProvider.html":{}}}],["escrow",{"_index":884,"title":{},"body":{"index.html":{}}}],["ethereum",{"_index":350,"title":{},"body":{"interfaces/SubscriptionEnd.html":{},"interfaces/SubscriptionInit.html":{},"interfaces/SubscriptionType.html":{},"classes/ZapArbiter.html":{},"classes/ZapDispatch.html":{},"dependencies.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["event",{"_index":470,"title":{},"body":{"classes/ZapArbiter.html":{},"classes/ZapDispatch.html":{},"classes/ZapProvider.html":{},"classes/ZapRegistry.html":{},"index.html":{}}}],["eventemitt",{"_index":605,"title":{},"body":{"classes/ZapProvider.html":{},"miscellaneous/variables.html":{}}}],["exampl",{"_index":359,"title":{},"body":{"classes/Utils.html":{},"classes/ZapArbiter.html":{},"classes/ZapDispatch.html":{},"classes/ZapRegistry.html":{},"classes/ZapToken.html":{}}}],["exist",{"_index":184,"title":{},"body":{"classes/Curve.html":{}}}],["export",{"_index":52,"title":{},"body":{"classes/BaseContract.html":{},"interfaces/BaseContractType.html":{},"interfaces/ContractType.html":{},"classes/Curve.html":{},"interfaces/CurveTerm.html":{},"interfaces/CurveType.html":{},"interfaces/Filter.html":{},"interfaces/InitProvider.html":{},"interfaces/ProviderHandler.html":{},"interfaces/ResponseArgs.html":{},"classes/Subscriber.html":{},"interfaces/SubscriberHandler.html":{},"interfaces/SubscriptionEnd.html":{},"interfaces/SubscriptionInit.html":{},"interfaces/SubscriptionType.html":{},"classes/Utils.html":{},"classes/ZapArbiter.html":{},"classes/ZapDispatch.html":{},"classes/ZapProvider.html":{},"interfaces/ZapProviderType.html":{},"classes/ZapRegistry.html":{},"classes/ZapToken.html":{}}}],["extend",{"_index":399,"title":{},"body":{"classes/ZapArbiter.html":{},"classes/ZapDispatch.html":{},"classes/ZapRegistry.html":{},"classes/ZapToken.html":{},"index.html":{}}}],["fail",{"_index":320,"title":{},"body":{"classes/Subscriber.html":{},"classes/ZapProvider.html":{}}}],["file",{"_index":4,"title":{},"body":{"classes/BaseContract.html":{},"interfaces/BaseContractType.html":{},"interfaces/ContractType.html":{},"classes/Curve.html":{},"interfaces/CurveTerm.html":{},"interfaces/CurveType.html":{},"interfaces/Filter.html":{},"interfaces/InitProvider.html":{},"interfaces/ProviderHandler.html":{},"interfaces/ResponseArgs.html":{},"classes/Subscriber.html":{},"interfaces/SubscriberHandler.html":{},"interfaces/SubscriptionEnd.html":{},"interfaces/SubscriptionInit.html":{},"interfaces/SubscriptionType.html":{},"classes/Utils.html":{},"classes/ZapArbiter.html":{},"classes/ZapDispatch.html":{},"classes/ZapProvider.html":{},"interfaces/ZapProviderType.html":{},"classes/ZapRegistry.html":{},"classes/ZapToken.html":{}}}],["filter",{"_index":204,"title":{"interfaces/Filter.html":{}},"body":{"interfaces/Filter.html":{},"interfaces/InitProvider.html":{},"interfaces/ResponseArgs.html":{},"interfaces/SubscriptionEnd.html":{},"interfaces/SubscriptionInit.html":{},"interfaces/SubscriptionType.html":{},"classes/ZapArbiter.html":{},"classes/ZapDispatch.html":{},"classes/ZapRegistry.html":{},"index.html":{}}}],["filter.fromblock",{"_index":487,"title":{},"body":{"classes/ZapArbiter.html":{}}}],["filter.watch(callback",{"_index":480,"title":{},"body":{"classes/ZapArbiter.html":{}}}],["filters.fromblock",{"_index":478,"title":{},"body":{"classes/ZapArbiter.html":{},"classes/ZapDispatch.html":{}}}],["fn",{"_index":143,"title":{},"body":{"classes/Curve.html":{},"interfaces/CurveTerm.html":{},"interfaces/CurveType.html":{},"index.html":{}}}],["for(var",{"_index":168,"title":{},"body":{"classes/Curve.html":{}}}],["from,ga",{"_index":531,"title":{},"body":{"classes/ZapDispatch.html":{}}}],["from,gas=utils.constants.default_gas}:responsearg",{"_index":523,"title":{},"body":{"classes/ZapDispatch.html":{}}}],["from,gas=utils.constants.default_gas}:transfertyp",{"_index":788,"title":{},"body":{"classes/ZapToken.html":{}}}],["from,gas=utils.constants.default_gas}:transfertype):promis",{"_index":794,"title":{},"body":{"classes/ZapToken.html":{}}}],["from:address",{"_index":267,"title":{},"body":{"interfaces/ResponseArgs.html":{}}}],["from:this.providerown",{"_index":620,"title":{},"body":{"classes/ZapProvider.html":{}}}],["fromblock",{"_index":206,"title":{},"body":{"interfaces/Filter.html":{},"interfaces/InitProvider.html":{},"interfaces/ProviderHandler.html":{},"interfaces/ResponseArgs.html":{},"interfaces/SubscriptionEnd.html":{},"interfaces/SubscriptionInit.html":{},"interfaces/SubscriptionType.html":{},"classes/ZapArbiter.html":{},"classes/ZapDispatch.html":{},"classes/ZapProvider.html":{},"index.html":{}}}],["fromblock}:listenqueri",{"_index":661,"title":{},"body":{"classes/ZapProvider.html":{}}}],["fromblock}:unsubscribelisten",{"_index":655,"title":{},"body":{"classes/ZapProvider.html":{}}}],["fromblock}:{subscriber:str",{"_index":647,"title":{},"body":{"classes/ZapProvider.html":{}}}],["fromzapbas",{"_index":365,"title":{},"body":{"classes/Utils.html":{}}}],["fromzapbase(num",{"_index":377,"title":{},"body":{"classes/Utils.html":{}}}],["fs",{"_index":394,"title":{},"body":{"classes/Utils.html":{}}}],["fulfil",{"_index":498,"title":{},"body":{"classes/ZapDispatch.html":{},"index.html":{}}}],["func",{"_index":457,"title":{},"body":{"classes/ZapArbiter.html":{}}}],["function",{"_index":101,"title":{"miscellaneous/functions.html":{}},"body":{"classes/Curve.html":{},"interfaces/Filter.html":{},"interfaces/ProviderHandler.html":{},"interfaces/SubscriberHandler.html":{},"classes/ZapArbiter.html":{},"classes/ZapDispatch.html":{},"classes/ZapRegistry.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["ga",{"_index":212,"title":{},"body":{"interfaces/Filter.html":{},"interfaces/InitProvider.html":{},"interfaces/ProviderHandler.html":{},"interfaces/ResponseArgs.html":{},"interfaces/SubscriptionEnd.html":{},"interfaces/SubscriptionInit.html":{},"interfaces/SubscriptionType.html":{},"classes/ZapArbiter.html":{},"classes/ZapDispatch.html":{},"interfaces/ZapProviderType.html":{},"classes/ZapRegistry.html":{},"classes/ZapToken.html":{},"index.html":{}}}],["ganach",{"_index":817,"title":{},"body":{"dependencies.html":{},"miscellaneous/variables.html":{}}}],["ganacheprovid",{"_index":901,"title":{},"body":{"miscellaneous/variables.html":{}}}],["gas=utils.constants.default_ga",{"_index":449,"title":{},"body":{"classes/ZapArbiter.html":{}}}],["gas=utils.constants.default_gas}:endpointparam",{"_index":735,"title":{},"body":{"classes/ZapRegistry.html":{}}}],["gas=utils.constants.default_gas}:initcurve):promis",{"_index":729,"title":{},"body":{"classes/ZapRegistry.html":{}}}],["gas=utils.constants.default_gas}:initprovid",{"_index":720,"title":{},"body":{"classes/ZapRegistry.html":{}}}],["gas=utils.constants.default_gas}:subscriptionend",{"_index":463,"title":{},"body":{"classes/ZapArbiter.html":{}}}],["gas=utils.constants.default_gas}:transfertype):promis",{"_index":797,"title":{},"body":{"classes/ZapToken.html":{}}}],["gas?:bignumb",{"_index":268,"title":{},"body":{"interfaces/ResponseArgs.html":{}}}],["gas?:numb",{"_index":355,"title":{},"body":{"interfaces/SubscriptionEnd.html":{},"interfaces/SubscriptionInit.html":{},"interfaces/SubscriptionType.html":{}}}],["gas_pric",{"_index":902,"title":{},"body":{"miscellaneous/variables.html":{}}}],["gaspric",{"_index":671,"title":{},"body":{"interfaces/ZapProviderType.html":{}}}],["get",{"_index":860,"title":{"index.html":{}},"body":{}}],["getartifact",{"_index":362,"title":{},"body":{"classes/Utils.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["getbounddot",{"_index":863,"title":{},"body":{"index.html":{}}}],["getcontractown",{"_index":23,"title":{},"body":{"classes/BaseContract.html":{},"classes/ZapArbiter.html":{},"classes/ZapDispatch.html":{},"classes/ZapRegistry.html":{},"classes/ZapToken.html":{},"index.html":{}}}],["getcontractowner():promis",{"_index":87,"title":{},"body":{"classes/BaseContract.html":{}}}],["getcurv",{"_index":554,"title":{},"body":{"classes/ZapProvider.html":{},"index.html":{}}}],["getcurve(endpoint",{"_index":578,"title":{},"body":{"classes/ZapProvider.html":{}}}],["getcurve(endpoint:string):promis",{"_index":633,"title":{},"body":{"classes/ZapProvider.html":{}}}],["getdotsissu",{"_index":867,"title":{},"body":{"index.html":{}}}],["gethexbuff",{"_index":366,"title":{},"body":{"classes/Utils.html":{}}}],["gethexbuffer(specifi",{"_index":380,"title":{},"body":{"classes/Utils.html":{}}}],["gethexstr",{"_index":367,"title":{},"body":{"classes/Utils.html":{}}}],["gethexstring(str",{"_index":383,"title":{},"body":{"classes/Utils.html":{}}}],["getnextendpointparam",{"_index":681,"title":{},"body":{"classes/ZapRegistry.html":{},"index.html":{}}}],["getnextendpointparams(undefin",{"_index":690,"title":{},"body":{"classes/ZapRegistry.html":{}}}],["getnextendpointparams({provid",{"_index":751,"title":{},"body":{"classes/ZapRegistry.html":{}}}],["getnextprovid",{"_index":682,"title":{},"body":{"classes/ZapRegistry.html":{},"index.html":{}}}],["getnextprovider(index",{"_index":693,"title":{},"body":{"classes/ZapRegistry.html":{}}}],["getnextprovider(index:number):promis",{"_index":749,"title":{},"body":{"classes/ZapRegistry.html":{}}}],["getpric",{"_index":110,"title":{},"body":{"classes/Curve.html":{},"index.html":{}}}],["getprice(tot",{"_index":132,"title":{},"body":{"classes/Curve.html":{}}}],["getprovidercurv",{"_index":683,"title":{},"body":{"classes/ZapRegistry.html":{},"index.html":{}}}],["getprovidercurve(provid",{"_index":696,"title":{},"body":{"classes/ZapRegistry.html":{}}}],["getprovidercurve(provider:string,endpoint:string):promis",{"_index":746,"title":{},"body":{"classes/ZapRegistry.html":{}}}],["getproviderpublickey",{"_index":684,"title":{},"body":{"classes/ZapRegistry.html":{},"index.html":{}}}],["getproviderpublickey(provid",{"_index":698,"title":{},"body":{"classes/ZapRegistry.html":{}}}],["getproviderpublickey(provider:address):promis",{"_index":740,"title":{},"body":{"classes/ZapRegistry.html":{}}}],["getprovidertitl",{"_index":685,"title":{},"body":{"classes/ZapRegistry.html":{},"index.html":{}}}],["getprovidertitle(provid",{"_index":700,"title":{},"body":{"classes/ZapRegistry.html":{}}}],["getprovidertitle(provider:address):promis",{"_index":744,"title":{},"body":{"classes/ZapRegistry.html":{}}}],["getpubkey",{"_index":555,"title":{},"body":{"classes/ZapProvider.html":{},"index.html":{}}}],["getpubkey():promis",{"_index":630,"title":{},"body":{"classes/ZapProvider.html":{}}}],["getsubscript",{"_index":402,"title":{},"body":{"classes/ZapArbiter.html":{},"index.html":{}}}],["getsubscription(undefin",{"_index":418,"title":{},"body":{"classes/ZapArbiter.html":{}}}],["getsubscription({provider,subscriber,endpoint}:subscriptiontyp",{"_index":458,"title":{},"body":{"classes/ZapArbiter.html":{}}}],["gettitl",{"_index":556,"title":{},"body":{"classes/ZapProvider.html":{},"index.html":{}}}],["gettitle():promis",{"_index":627,"title":{},"body":{"classes/ZapProvider.html":{}}}],["getzapbound",{"_index":557,"title":{},"body":{"classes/ZapProvider.html":{},"index.html":{}}}],["getzapbound(endpoint",{"_index":583,"title":{},"body":{"classes/ZapProvider.html":{}}}],["getzapbound(endpoint:string):promis",{"_index":635,"title":{},"body":{"classes/ZapProvider.html":{}}}],["getzaprequir",{"_index":558,"title":{},"body":{"classes/ZapProvider.html":{},"index.html":{}}}],["getzaprequired(undefin",{"_index":585,"title":{},"body":{"classes/ZapProvider.html":{}}}],["getzaprequired({endpoint",{"_index":639,"title":{},"body":{"classes/ZapProvider.html":{}}}],["git+https://github.com/zapproject/zap",{"_index":855,"title":{},"body":{"dependencies.html":{}}}],["given",{"_index":136,"title":{},"body":{"classes/Curve.html":{},"index.html":{}}}],["gui",{"_index":921,"title":{},"body":{"miscellaneous/variables.html":{}}}],["handleincom",{"_index":234,"title":{},"body":{"interfaces/ProviderHandler.html":{}}}],["handler",{"_index":258,"title":{},"body":{"interfaces/ProviderHandler.html":{},"classes/Subscriber.html":{},"interfaces/SubscriberHandler.html":{},"classes/ZapProvider.html":{}}}],["handlerespons",{"_index":340,"title":{},"body":{"interfaces/SubscriberHandler.html":{}}}],["handlesubscript",{"_index":235,"title":{},"body":{"interfaces/ProviderHandler.html":{},"interfaces/SubscriberHandler.html":{}}}],["handleunsubscript",{"_index":236,"title":{},"body":{"interfaces/ProviderHandler.html":{},"interfaces/SubscriberHandler.html":{}}}],["hasenoughzap",{"_index":273,"title":{},"body":{"classes/Subscriber.html":{},"index.html":{}}}],["hasenoughzap(zaprequir",{"_index":287,"title":{},"body":{"classes/Subscriber.html":{}}}],["hasenoughzap(zaprequired:number):promis",{"_index":338,"title":{},"body":{"classes/Subscriber.html":{}}}],["hex",{"_index":397,"title":{},"body":{"classes/Utils.html":{}}}],["hextoutf8",{"_index":604,"title":{},"body":{"classes/ZapProvider.html":{},"classes/ZapRegistry.html":{}}}],["hextoutf8(endpointparam",{"_index":757,"title":{},"body":{"classes/ZapRegistry.html":{}}}],["hextoutf8(pubkey",{"_index":632,"title":{},"body":{"classes/ZapProvider.html":{}}}],["hextoutf8(titl",{"_index":629,"title":{},"body":{"classes/ZapProvider.html":{},"classes/ZapRegistry.html":{}}}],["hostnam",{"_index":669,"title":{},"body":{"interfaces/ZapProviderType.html":{}}}],["i=0",{"_index":169,"title":{},"body":{"classes/Curve.html":{}}}],["id",{"_index":75,"title":{},"body":{"classes/BaseContract.html":{}}}],["if(!artifactsdir",{"_index":67,"title":{},"body":{"classes/BaseContract.html":{}}}],["if(!endpoint_param",{"_index":722,"title":{},"body":{"classes/ZapRegistry.html":{}}}],["if(endpointparams.length",{"_index":516,"title":{},"body":{"classes/ZapDispatch.html":{}}}],["if(this.constants.length",{"_index":163,"title":{},"body":{"classes/Curve.html":{}}}],["if(this.parts.length",{"_index":171,"title":{},"body":{"classes/Curve.html":{}}}],["import",{"_index":44,"title":{},"body":{"classes/BaseContract.html":{},"classes/Curve.html":{},"interfaces/InitProvider.html":{},"interfaces/ProviderHandler.html":{},"interfaces/ResponseArgs.html":{},"classes/Subscriber.html":{},"interfaces/SubscriberHandler.html":{},"classes/Utils.html":{},"classes/ZapArbiter.html":{},"classes/ZapDispatch.html":{},"classes/ZapProvider.html":{},"interfaces/ZapProviderType.html":{},"classes/ZapRegistry.html":{},"classes/ZapToken.html":{}}}],["import{zaparbit",{"_index":342,"title":{},"body":{"interfaces/SubscriberHandler.html":{}}}],["import{zaptoken",{"_index":341,"title":{},"body":{"interfaces/SubscriberHandler.html":{}}}],["incom",{"_index":475,"title":{},"body":{"classes/ZapArbiter.html":{},"classes/ZapDispatch.html":{},"index.html":{}}}],["index",{"_index":18,"title":{"index.html":{}},"body":{"classes/BaseContract.html":{},"interfaces/BaseContractType.html":{},"interfaces/ContractType.html":{},"classes/Curve.html":{},"interfaces/CurveTerm.html":{},"interfaces/CurveType.html":{},"interfaces/Filter.html":{},"interfaces/InitProvider.html":{},"interfaces/ProviderHandler.html":{},"interfaces/ResponseArgs.html":{},"classes/Subscriber.html":{},"interfaces/SubscriberHandler.html":{},"interfaces/SubscriptionEnd.html":{},"interfaces/SubscriptionInit.html":{},"interfaces/SubscriptionType.html":{},"classes/Utils.html":{},"classes/ZapArbiter.html":{},"classes/ZapDispatch.html":{},"classes/ZapProvider.html":{},"interfaces/ZapProviderType.html":{},"classes/ZapRegistry.html":{},"classes/ZapToken.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["index:numb",{"_index":230,"title":{},"body":{"interfaces/InitProvider.html":{}}}],["index}:nextendpoint):promis",{"_index":752,"title":{},"body":{"classes/ZapRegistry.html":{}}}],["info",{"_index":2,"title":{},"body":{"classes/BaseContract.html":{},"interfaces/BaseContractType.html":{},"interfaces/ContractType.html":{},"classes/Curve.html":{},"interfaces/CurveTerm.html":{},"interfaces/CurveType.html":{},"interfaces/Filter.html":{},"interfaces/InitProvider.html":{},"interfaces/ProviderHandler.html":{},"interfaces/ResponseArgs.html":{},"classes/Subscriber.html":{},"interfaces/SubscriberHandler.html":{},"interfaces/SubscriptionEnd.html":{},"interfaces/SubscriptionInit.html":{},"interfaces/SubscriptionType.html":{},"classes/Utils.html":{},"classes/ZapArbiter.html":{},"classes/ZapDispatch.html":{},"classes/ZapProvider.html":{},"interfaces/ZapProviderType.html":{},"classes/ZapRegistry.html":{},"classes/ZapToken.html":{}}}],["inform",{"_index":421,"title":{},"body":{"classes/ZapArbiter.html":{},"index.html":{}}}],["inherit",{"_index":408,"title":{},"body":{"classes/ZapArbiter.html":{},"classes/ZapDispatch.html":{},"classes/ZapRegistry.html":{},"classes/ZapToken.html":{}}}],["init",{"_index":626,"title":{},"body":{"classes/ZapProvider.html":{},"index.html":{}}}],["initcurv",{"_index":225,"title":{},"body":{"interfaces/InitProvider.html":{},"interfaces/ProviderHandler.html":{},"classes/ZapProvider.html":{},"classes/ZapRegistry.html":{},"miscellaneous/typealiases.html":{}}}],["initi",{"_index":426,"title":{},"body":{"classes/ZapArbiter.html":{},"classes/ZapProvider.html":{},"index.html":{}}}],["initiateprovid",{"_index":559,"title":{},"body":{"classes/ZapProvider.html":{},"classes/ZapRegistry.html":{},"index.html":{}}}],["initiateprovider(undefin",{"_index":587,"title":{},"body":{"classes/ZapProvider.html":{},"classes/ZapRegistry.html":{}}}],["initiateprovider({public_key",{"_index":615,"title":{},"body":{"classes/ZapProvider.html":{},"classes/ZapRegistry.html":{}}}],["initiateprovidercurv",{"_index":560,"title":{},"body":{"classes/ZapProvider.html":{},"classes/ZapRegistry.html":{},"index.html":{}}}],["initiateprovidercurve(undefin",{"_index":591,"title":{},"body":{"classes/ZapProvider.html":{},"classes/ZapRegistry.html":{}}}],["initiateprovidercurve({endpoint",{"_index":621,"title":{},"body":{"classes/ZapProvider.html":{},"classes/ZapRegistry.html":{}}}],["initiatesubscript",{"_index":403,"title":{},"body":{"classes/ZapArbiter.html":{},"index.html":{}}}],["initiatesubscription(undefin",{"_index":422,"title":{},"body":{"classes/ZapArbiter.html":{}}}],["initprovid",{"_index":219,"title":{"interfaces/InitProvider.html":{}},"body":{"interfaces/InitProvider.html":{},"interfaces/ProviderHandler.html":{},"classes/ZapProvider.html":{},"classes/ZapRegistry.html":{},"miscellaneous/typealiases.html":{}}}],["inquir",{"_index":576,"title":{},"body":{"classes/ZapProvider.html":{},"index.html":{}}}],["instanc",{"_index":16,"title":{},"body":{"classes/BaseContract.html":{},"classes/ZapArbiter.html":{},"classes/ZapDispatch.html":{},"classes/ZapRegistry.html":{},"classes/ZapToken.html":{},"index.html":{}}}],["insuffici",{"_index":313,"title":{},"body":{"classes/Subscriber.html":{}}}],["interfac",{"_index":92,"title":{"interfaces/BaseContractType.html":{},"interfaces/ContractType.html":{},"interfaces/CurveTerm.html":{},"interfaces/CurveType.html":{},"interfaces/Filter.html":{},"interfaces/InitProvider.html":{},"interfaces/ProviderHandler.html":{},"interfaces/ResponseArgs.html":{},"interfaces/SubscriberHandler.html":{},"interfaces/SubscriptionEnd.html":{},"interfaces/SubscriptionInit.html":{},"interfaces/SubscriptionType.html":{},"interfaces/ZapProviderType.html":{}},"body":{"interfaces/BaseContractType.html":{},"interfaces/ContractType.html":{},"interfaces/CurveTerm.html":{},"interfaces/CurveType.html":{},"interfaces/Filter.html":{},"interfaces/InitProvider.html":{},"interfaces/ProviderHandler.html":{},"interfaces/ResponseArgs.html":{},"interfaces/SubscriberHandler.html":{},"interfaces/SubscriptionEnd.html":{},"interfaces/SubscriptionInit.html":{},"interfaces/SubscriptionType.html":{},"classes/ZapArbiter.html":{},"classes/ZapDispatch.html":{},"interfaces/ZapProviderType.html":{},"index.html":{},"overview.html":{}}}],["issu",{"_index":883,"title":{},"body":{"index.html":{}}}],["join(zapcontractdirname,\"contract",{"_index":913,"title":{},"body":{"miscellaneous/variables.html":{}}}],["join(zapcontractdirname,\"migr",{"_index":919,"title":{},"body":{"miscellaneous/variables.html":{}}}],["key",{"_index":448,"title":{},"body":{"classes/ZapArbiter.html":{},"classes/ZapProvider.html":{},"classes/ZapRegistry.html":{},"index.html":{}}}],["last",{"_index":446,"title":{},"body":{"classes/ZapArbiter.html":{},"index.html":{}}}],["latest",{"_index":479,"title":{},"body":{"classes/ZapArbiter.html":{},"classes/ZapDispatch.html":{}}}],["latest'},callback",{"_index":488,"title":{},"body":{"classes/ZapArbiter.html":{}}}],["less",{"_index":327,"title":{},"body":{"classes/Subscriber.html":{}}}],["listen",{"_index":404,"title":{},"body":{"classes/ZapArbiter.html":{},"classes/ZapDispatch.html":{},"classes/ZapProvider.html":{},"classes/ZapRegistry.html":{},"index.html":{}}}],["listen(filt",{"_index":428,"title":{},"body":{"classes/ZapArbiter.html":{},"classes/ZapDispatch.html":{},"classes/ZapRegistry.html":{}}}],["listen(filter:filt",{"_index":484,"title":{},"body":{"classes/ZapArbiter.html":{}}}],["listen(filters:filt",{"_index":758,"title":{},"body":{"classes/ZapRegistry.html":{}}}],["listenbound",{"_index":868,"title":{},"body":{"index.html":{}}}],["listenescrow",{"_index":870,"title":{},"body":{"index.html":{}}}],["listenev",{"_index":217,"title":{},"body":{"interfaces/Filter.html":{},"miscellaneous/typealiases.html":{}}}],["listenfulfillqueri",{"_index":490,"title":{},"body":{"classes/ZapDispatch.html":{},"index.html":{}}}],["listenfulfillquery(filt",{"_index":496,"title":{},"body":{"classes/ZapDispatch.html":{}}}],["listenfulfillquery(filters:object",{"_index":546,"title":{},"body":{"classes/ZapDispatch.html":{}}}],["listenincom",{"_index":491,"title":{},"body":{"classes/ZapDispatch.html":{},"index.html":{}}}],["listenincoming(filt",{"_index":499,"title":{},"body":{"classes/ZapDispatch.html":{}}}],["listenincoming(filters:object",{"_index":544,"title":{},"body":{"classes/ZapDispatch.html":{}}}],["listennewcurv",{"_index":686,"title":{},"body":{"classes/ZapRegistry.html":{},"index.html":{}}}],["listennewcurve(provid",{"_index":711,"title":{},"body":{"classes/ZapRegistry.html":{}}}],["listennewcurve(provider:address",{"_index":763,"title":{},"body":{"classes/ZapRegistry.html":{}}}],["listennewprovid",{"_index":687,"title":{},"body":{"classes/ZapRegistry.html":{},"index.html":{}}}],["listennewprovider(filt",{"_index":713,"title":{},"body":{"classes/ZapRegistry.html":{}}}],["listennewprovider(filters:filt",{"_index":761,"title":{},"body":{"classes/ZapRegistry.html":{}}}],["listenoffchainrespons",{"_index":492,"title":{},"body":{"classes/ZapDispatch.html":{},"index.html":{}}}],["listenoffchainresponse(filt",{"_index":501,"title":{},"body":{"classes/ZapDispatch.html":{}}}],["listenoffchainresponse(filters:object",{"_index":548,"title":{},"body":{"classes/ZapDispatch.html":{}}}],["listenqueri",{"_index":249,"title":{},"body":{"interfaces/ProviderHandler.html":{},"classes/ZapProvider.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["listenqueries(undefin",{"_index":593,"title":{},"body":{"classes/ZapProvider.html":{}}}],["listenqueries({queryid",{"_index":660,"title":{},"body":{"classes/ZapProvider.html":{}}}],["listenreleas",{"_index":871,"title":{},"body":{"index.html":{}}}],["listensubscrib",{"_index":561,"title":{},"body":{"classes/ZapProvider.html":{},"index.html":{}}}],["listensubscribes(undefin",{"_index":595,"title":{},"body":{"classes/ZapProvider.html":{}}}],["listensubscribes({subscrib",{"_index":646,"title":{},"body":{"classes/ZapProvider.html":{}}}],["listensubscriptionend",{"_index":405,"title":{},"body":{"classes/ZapArbiter.html":{},"index.html":{}}}],["listensubscriptionend(filt",{"_index":430,"title":{},"body":{"classes/ZapArbiter.html":{}}}],["listensubscriptionend(filters:filt",{"_index":472,"title":{},"body":{"classes/ZapArbiter.html":{}}}],["listensubscriptionstart",{"_index":406,"title":{},"body":{"classes/ZapArbiter.html":{},"index.html":{}}}],["listensubscriptionstart(filt",{"_index":433,"title":{},"body":{"classes/ZapArbiter.html":{}}}],["listensubscriptionstart(filters:filt",{"_index":481,"title":{},"body":{"classes/ZapArbiter.html":{}}}],["listenunbound",{"_index":869,"title":{},"body":{"index.html":{}}}],["listenunsubscrib",{"_index":562,"title":{},"body":{"classes/ZapProvider.html":{},"index.html":{}}}],["listenunsubscribes(undefin",{"_index":597,"title":{},"body":{"classes/ZapProvider.html":{}}}],["listenunsubscribes({subscrib",{"_index":654,"title":{},"body":{"classes/ZapProvider.html":{}}}],["liter",{"_index":573,"title":{},"body":{"classes/ZapProvider.html":{},"miscellaneous/typealiases.html":{}}}],["logger",{"_index":673,"title":{},"body":{"interfaces/ZapProviderType.html":{}}}],["mainnet",{"_index":77,"title":{},"body":{"classes/BaseContract.html":{}}}],["manag",{"_index":440,"title":{},"body":{"classes/ZapArbiter.html":{},"classes/ZapProvider.html":{},"classes/ZapRegistry.html":{},"index.html":{}}}],["mani",{"_index":880,"title":{},"body":{"index.html":{}}}],["markdown",{"_index":846,"title":{},"body":{"dependencies.html":{}}}],["match",{"_index":91,"title":{},"body":{"classes/BaseContract.html":{},"interfaces/BaseContractType.html":{},"interfaces/ContractType.html":{},"classes/Curve.html":{},"interfaces/CurveTerm.html":{},"interfaces/CurveType.html":{},"interfaces/Filter.html":{},"interfaces/InitProvider.html":{},"interfaces/ProviderHandler.html":{},"interfaces/ResponseArgs.html":{},"classes/Subscriber.html":{},"interfaces/SubscriberHandler.html":{},"interfaces/SubscriptionEnd.html":{},"interfaces/SubscriptionInit.html":{},"interfaces/SubscriptionType.html":{},"classes/Utils.html":{},"classes/ZapArbiter.html":{},"classes/ZapDispatch.html":{},"classes/ZapProvider.html":{},"interfaces/ZapProviderType.html":{},"classes/ZapRegistry.html":{},"classes/ZapToken.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["math.pow(x",{"_index":187,"title":{},"body":{"classes/Curve.html":{}}}],["member",{"_index":148,"title":{},"body":{"classes/Curve.html":{}}}],["method",{"_index":21,"title":{},"body":{"classes/BaseContract.html":{},"classes/Curve.html":{},"classes/Subscriber.html":{},"classes/Utils.html":{},"classes/ZapArbiter.html":{},"classes/ZapDispatch.html":{},"classes/ZapProvider.html":{},"classes/ZapRegistry.html":{},"classes/ZapToken.html":{},"index.html":{}}}],["migrat",{"_index":395,"title":{},"body":{"classes/Utils.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["migratecontract",{"_index":363,"title":{},"body":{"classes/Utils.html":{}}}],["migrationdir",{"_index":903,"title":{},"body":{"miscellaneous/variables.html":{}}}],["migrations_directori",{"_index":677,"title":{},"body":{"interfaces/ZapProviderType.html":{}}}],["miscellan",{"_index":857,"title":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mocha",{"_index":820,"title":{},"body":{"dependencies.html":{}}}],["modul",{"_index":889,"title":{"modules.html":{}},"body":{"modules.html":{}}}],["name",{"_index":31,"title":{},"body":{"classes/BaseContract.html":{},"classes/Curve.html":{},"classes/Subscriber.html":{},"classes/Utils.html":{},"classes/ZapArbiter.html":{},"classes/ZapDispatch.html":{},"classes/ZapProvider.html":{},"classes/ZapRegistry.html":{},"classes/ZapToken.html":{}}}],["need",{"_index":618,"title":{},"body":{"classes/ZapProvider.html":{}}}],["network",{"_index":74,"title":{},"body":{"classes/BaseContract.html":{},"classes/ZapArbiter.html":{},"interfaces/ZapProviderType.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["network_id",{"_index":668,"title":{},"body":{"interfaces/ZapProviderType.html":{}}}],["networkid",{"_index":20,"title":{},"body":{"classes/BaseContract.html":{},"interfaces/BaseContractType.html":{},"interfaces/ContractType.html":{},"classes/ZapArbiter.html":{},"classes/ZapDispatch.html":{},"classes/ZapRegistry.html":{},"classes/ZapToken.html":{},"index.html":{}}}],["networkid,networkprovider}:basecontracttyp",{"_index":444,"title":{},"body":{"classes/ZapArbiter.html":{}}}],["networkid:numb",{"_index":55,"title":{},"body":{"classes/BaseContract.html":{}}}],["networkprovid",{"_index":62,"title":{},"body":{"classes/BaseContract.html":{},"interfaces/BaseContractType.html":{},"interfaces/ContractType.html":{},"classes/ZapArbiter.html":{},"classes/ZapDispatch.html":{},"classes/ZapRegistry.html":{},"classes/ZapToken.html":{},"index.html":{}}}],["new",{"_index":72,"title":{},"body":{"classes/BaseContract.html":{},"classes/Curve.html":{},"classes/Utils.html":{},"classes/ZapDispatch.html":{},"classes/ZapProvider.html":{},"classes/ZapRegistry.html":{},"classes/ZapToken.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["next",{"_index":695,"title":{},"body":{"classes/ZapRegistry.html":{},"index.html":{}}}],["nextendpoint",{"_index":228,"title":{},"body":{"interfaces/InitProvider.html":{},"classes/ZapRegistry.html":{},"miscellaneous/typealiases.html":{}}}],["node",{"_index":835,"title":{},"body":{"dependencies.html":{}}}],["non",{"_index":183,"title":{},"body":{"classes/Curve.html":{}}}],["normalizeprovid",{"_index":368,"title":{},"body":{"classes/Utils.html":{}}}],["normalizeprovider(provid",{"_index":386,"title":{},"body":{"classes/Utils.html":{}}}],["npm",{"_index":822,"title":{},"body":{"dependencies.html":{}}}],["null",{"_index":58,"title":{},"body":{"classes/BaseContract.html":{},"index.html":{}}}],["num",{"_index":379,"title":{},"body":{"classes/Utils.html":{}}}],["number",{"_index":35,"title":{},"body":{"classes/BaseContract.html":{},"interfaces/BaseContractType.html":{},"interfaces/ContractType.html":{},"classes/Curve.html":{},"interfaces/CurveTerm.html":{},"interfaces/CurveType.html":{},"interfaces/Filter.html":{},"interfaces/InitProvider.html":{},"interfaces/ProviderHandler.html":{},"interfaces/ResponseArgs.html":{},"classes/Subscriber.html":{},"interfaces/SubscriberHandler.html":{},"interfaces/SubscriptionEnd.html":{},"interfaces/SubscriptionInit.html":{},"interfaces/SubscriptionType.html":{},"classes/Utils.html":{},"classes/ZapArbiter.html":{},"classes/ZapDispatch.html":{},"classes/ZapProvider.html":{},"interfaces/ZapProviderType.html":{},"classes/ZapRegistry.html":{},"classes/ZapToken.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["number(pubkey.valueof",{"_index":743,"title":{},"body":{"classes/ZapRegistry.html":{}}}],["number|undefin",{"_index":95,"title":{},"body":{"interfaces/BaseContractType.html":{},"interfaces/ContractType.html":{}}}],["number}):promis",{"_index":648,"title":{},"body":{"classes/ZapProvider.html":{}}}],["object",{"_index":432,"title":{},"body":{"classes/ZapArbiter.html":{},"classes/ZapDispatch.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["offchain",{"_index":503,"title":{},"body":{"classes/ZapDispatch.html":{},"index.html":{}}}],["onc",{"_index":708,"title":{},"body":{"classes/ZapRegistry.html":{},"index.html":{}}}],["onchainprovid",{"_index":265,"title":{},"body":{"interfaces/ResponseArgs.html":{},"classes/ZapDispatch.html":{},"index.html":{}}}],["onchainsubscrib",{"_index":266,"title":{},"body":{"interfaces/ResponseArgs.html":{},"classes/ZapDispatch.html":{},"index.html":{}}}],["onchainsubscriber).send({from",{"_index":521,"title":{},"body":{"classes/ZapDispatch.html":{}}}],["onchainsubscriber,from,gas=utils.constants.default_gas}:queryargs):promis",{"_index":515,"title":{},"body":{"classes/ZapDispatch.html":{}}}],["option",{"_index":33,"title":{},"body":{"classes/BaseContract.html":{},"interfaces/BaseContractType.html":{},"interfaces/ContractType.html":{},"classes/Curve.html":{},"interfaces/Filter.html":{},"interfaces/InitProvider.html":{},"interfaces/ResponseArgs.html":{},"classes/Subscriber.html":{},"interfaces/SubscriberHandler.html":{},"interfaces/SubscriptionEnd.html":{},"interfaces/SubscriptionInit.html":{},"classes/Utils.html":{},"classes/ZapArbiter.html":{},"classes/ZapDispatch.html":{},"classes/ZapProvider.html":{},"classes/ZapRegistry.html":{},"classes/ZapToken.html":{},"index.html":{}}}],["overview",{"_index":890,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["own",{"_index":580,"title":{},"body":{"classes/ZapProvider.html":{},"classes/ZapRegistry.html":{},"index.html":{}}}],["owner",{"_index":39,"title":{},"body":{"classes/BaseContract.html":{},"classes/Subscriber.html":{},"classes/ZapArbiter.html":{},"classes/ZapDispatch.html":{},"classes/ZapProvider.html":{},"classes/ZapRegistry.html":{},"classes/ZapToken.html":{},"index.html":{}}}],["owner'",{"_index":43,"title":{},"body":{"classes/BaseContract.html":{},"classes/ZapArbiter.html":{},"classes/ZapDispatch.html":{},"classes/ZapRegistry.html":{},"classes/ZapToken.html":{},"index.html":{}}}],["owner:address",{"_index":256,"title":{},"body":{"interfaces/ProviderHandler.html":{}}}],["owner:str",{"_index":344,"title":{},"body":{"interfaces/SubscriberHandler.html":{}}}],["packag",{"_index":802,"title":{"dependencies.html":{}},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["packages/.../constants.t",{"_index":900,"title":{},"body":{"miscellaneous/variables.html":{}}}],["packages/.../index.t",{"_index":858,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["packages/.../types.t",{"_index":895,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["packages/arbiter/src/index.t",{"_index":398,"title":{},"body":{"classes/ZapArbiter.html":{},"miscellaneous/variables.html":{}}}],["packages/arbiter/src/index.ts:10",{"_index":407,"title":{},"body":{"classes/ZapArbiter.html":{}}}],["packages/arbiter/src/index.ts:106",{"_index":431,"title":{},"body":{"classes/ZapArbiter.html":{}}}],["packages/arbiter/src/index.ts:120",{"_index":434,"title":{},"body":{"classes/ZapArbiter.html":{}}}],["packages/arbiter/src/index.ts:134",{"_index":429,"title":{},"body":{"classes/ZapArbiter.html":{}}}],["packages/arbiter/src/index.ts:35",{"_index":423,"title":{},"body":{"classes/ZapArbiter.html":{}}}],["packages/arbiter/src/index.ts:60",{"_index":419,"title":{},"body":{"classes/ZapArbiter.html":{}}}],["packages/arbiter/src/index.ts:75",{"_index":416,"title":{},"body":{"classes/ZapArbiter.html":{}}}],["packages/arbiter/src/index.ts:92",{"_index":414,"title":{},"body":{"classes/ZapArbiter.html":{}}}],["packages/arbiter/src/types.t",{"_index":347,"title":{},"body":{"interfaces/SubscriptionEnd.html":{},"interfaces/SubscriptionInit.html":{},"interfaces/SubscriptionType.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["packages/artifacts/src/index.t",{"_index":859,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["packages/basecontract/src/index.t",{"_index":5,"title":{},"body":{"classes/BaseContract.html":{},"miscellaneous/variables.html":{}}}],["packages/basecontract/src/index.ts:12",{"_index":36,"title":{},"body":{"classes/BaseContract.html":{}}}],["packages/basecontract/src/index.ts:13",{"_index":37,"title":{},"body":{"classes/BaseContract.html":{}}}],["packages/basecontract/src/index.ts:14",{"_index":34,"title":{},"body":{"classes/BaseContract.html":{}}}],["packages/basecontract/src/index.ts:15",{"_index":28,"title":{},"body":{"classes/BaseContract.html":{}}}],["packages/basecontract/src/index.ts:49",{"_index":38,"title":{},"body":{"classes/BaseContract.html":{}}}],["packages/basecontract/src/types.t",{"_index":93,"title":{},"body":{"interfaces/BaseContractType.html":{},"interfaces/ContractType.html":{}}}],["packages/bondage/src/index.t",{"_index":907,"title":{},"body":{"miscellaneous/variables.html":{}}}],["packages/bondage/src/types.t",{"_index":205,"title":{},"body":{"interfaces/Filter.html":{},"miscellaneous/typealiases.html":{}}}],["packages/curve/src/index.t",{"_index":99,"title":{},"body":{"classes/Curve.html":{},"miscellaneous/variables.html":{}}}],["packages/curve/src/index.ts:11",{"_index":115,"title":{},"body":{"classes/Curve.html":{}}}],["packages/curve/src/index.ts:12",{"_index":117,"title":{},"body":{"classes/Curve.html":{}}}],["packages/curve/src/index.ts:122",{"_index":125,"title":{},"body":{"classes/Curve.html":{}}}],["packages/curve/src/index.ts:13",{"_index":116,"title":{},"body":{"classes/Curve.html":{}}}],["packages/curve/src/index.ts:14",{"_index":114,"title":{},"body":{"classes/Curve.html":{}}}],["packages/curve/src/index.ts:146",{"_index":129,"title":{},"body":{"classes/Curve.html":{}}}],["packages/curve/src/index.ts:167",{"_index":120,"title":{},"body":{"classes/Curve.html":{}}}],["packages/curve/src/index.ts:34",{"_index":127,"title":{},"body":{"classes/Curve.html":{}}}],["packages/curve/src/index.ts:68",{"_index":139,"title":{},"body":{"classes/Curve.html":{}}}],["packages/curve/src/index.ts:97",{"_index":133,"title":{},"body":{"classes/Curve.html":{}}}],["packages/curve/src/types.t",{"_index":202,"title":{},"body":{"interfaces/CurveTerm.html":{},"interfaces/CurveType.html":{}}}],["packages/dispatch/src/index.t",{"_index":489,"title":{},"body":{"classes/ZapDispatch.html":{},"miscellaneous/variables.html":{}}}],["packages/dispatch/src/index.ts:101",{"_index":495,"title":{},"body":{"classes/ZapDispatch.html":{}}}],["packages/dispatch/src/index.ts:113",{"_index":500,"title":{},"body":{"classes/ZapDispatch.html":{}}}],["packages/dispatch/src/index.ts:122",{"_index":497,"title":{},"body":{"classes/ZapDispatch.html":{}}}],["packages/dispatch/src/index.ts:13",{"_index":494,"title":{},"body":{"classes/ZapDispatch.html":{}}}],["packages/dispatch/src/index.ts:131",{"_index":502,"title":{},"body":{"classes/ZapDispatch.html":{}}}],["packages/dispatch/src/index.ts:30",{"_index":506,"title":{},"body":{"classes/ZapDispatch.html":{}}}],["packages/dispatch/src/index.ts:55",{"_index":509,"title":{},"body":{"classes/ZapDispatch.html":{}}}],["packages/dispatch/src/types.t",{"_index":260,"title":{},"body":{"interfaces/ResponseArgs.html":{},"miscellaneous/typealiases.html":{}}}],["packages/provider/src/index.t",{"_index":551,"title":{},"body":{"classes/ZapProvider.html":{},"miscellaneous/variables.html":{}}}],["packages/provider/src/index.ts:102",{"_index":579,"title":{},"body":{"classes/ZapProvider.html":{}}}],["packages/provider/src/index.ts:115",{"_index":584,"title":{},"body":{"classes/ZapProvider.html":{}}}],["packages/provider/src/index.ts:127",{"_index":586,"title":{},"body":{"classes/ZapProvider.html":{}}}],["packages/provider/src/index.ts:138",{"_index":574,"title":{},"body":{"classes/ZapProvider.html":{}}}],["packages/provider/src/index.ts:15",{"_index":566,"title":{},"body":{"classes/ZapProvider.html":{}}}],["packages/provider/src/index.ts:153",{"_index":596,"title":{},"body":{"classes/ZapProvider.html":{}}}],["packages/provider/src/index.ts:16",{"_index":565,"title":{},"body":{"classes/ZapProvider.html":{}}}],["packages/provider/src/index.ts:17",{"_index":570,"title":{},"body":{"classes/ZapProvider.html":{}}}],["packages/provider/src/index.ts:174",{"_index":598,"title":{},"body":{"classes/ZapProvider.html":{}}}],["packages/provider/src/index.ts:18",{"_index":569,"title":{},"body":{"classes/ZapProvider.html":{}}}],["packages/provider/src/index.ts:19",{"_index":568,"title":{},"body":{"classes/ZapProvider.html":{}}}],["packages/provider/src/index.ts:195",{"_index":594,"title":{},"body":{"classes/ZapProvider.html":{}}}],["packages/provider/src/index.ts:20",{"_index":571,"title":{},"body":{"classes/ZapProvider.html":{}}}],["packages/provider/src/index.ts:21",{"_index":564,"title":{},"body":{"classes/ZapProvider.html":{}}}],["packages/provider/src/index.ts:215",{"_index":599,"title":{},"body":{"classes/ZapProvider.html":{}}}],["packages/provider/src/index.ts:22",{"_index":567,"title":{},"body":{"classes/ZapProvider.html":{}}}],["packages/provider/src/index.ts:23",{"_index":563,"title":{},"body":{"classes/ZapProvider.html":{}}}],["packages/provider/src/index.ts:48",{"_index":588,"title":{},"body":{"classes/ZapProvider.html":{}}}],["packages/provider/src/index.ts:62",{"_index":592,"title":{},"body":{"classes/ZapProvider.html":{}}}],["packages/provider/src/index.ts:76",{"_index":582,"title":{},"body":{"classes/ZapProvider.html":{}}}],["packages/provider/src/index.ts:89",{"_index":581,"title":{},"body":{"classes/ZapProvider.html":{}}}],["packages/provider/src/types.t",{"_index":233,"title":{},"body":{"interfaces/ProviderHandler.html":{},"miscellaneous/typealiases.html":{}}}],["packages/registry/src/index.t",{"_index":679,"title":{},"body":{"classes/ZapRegistry.html":{},"miscellaneous/variables.html":{}}}],["packages/registry/src/index.ts:100",{"_index":701,"title":{},"body":{"classes/ZapRegistry.html":{}}}],["packages/registry/src/index.ts:112",{"_index":697,"title":{},"body":{"classes/ZapRegistry.html":{}}}],["packages/registry/src/index.ts:125",{"_index":694,"title":{},"body":{"classes/ZapRegistry.html":{}}}],["packages/registry/src/index.ts:137",{"_index":691,"title":{},"body":{"classes/ZapRegistry.html":{}}}],["packages/registry/src/index.ts:15",{"_index":689,"title":{},"body":{"classes/ZapRegistry.html":{}}}],["packages/registry/src/index.ts:156",{"_index":710,"title":{},"body":{"classes/ZapRegistry.html":{}}}],["packages/registry/src/index.ts:165",{"_index":714,"title":{},"body":{"classes/ZapRegistry.html":{}}}],["packages/registry/src/index.ts:174",{"_index":712,"title":{},"body":{"classes/ZapRegistry.html":{}}}],["packages/registry/src/index.ts:31",{"_index":702,"title":{},"body":{"classes/ZapRegistry.html":{}}}],["packages/registry/src/index.ts:52",{"_index":706,"title":{},"body":{"classes/ZapRegistry.html":{}}}],["packages/registry/src/index.ts:78",{"_index":716,"title":{},"body":{"classes/ZapRegistry.html":{}}}],["packages/registry/src/index.ts:90",{"_index":699,"title":{},"body":{"classes/ZapRegistry.html":{}}}],["packages/registry/src/types.t",{"_index":220,"title":{},"body":{"interfaces/InitProvider.html":{},"miscellaneous/typealiases.html":{}}}],["packages/subscriber/src/index.t",{"_index":269,"title":{},"body":{"classes/Subscriber.html":{},"miscellaneous/variables.html":{}}}],["packages/subscriber/src/index.ts:103",{"_index":288,"title":{},"body":{"classes/Subscriber.html":{}}}],["packages/subscriber/src/index.ts:12",{"_index":279,"title":{},"body":{"classes/Subscriber.html":{}}}],["packages/subscriber/src/index.ts:13",{"_index":278,"title":{},"body":{"classes/Subscriber.html":{}}}],["packages/subscriber/src/index.ts:14",{"_index":282,"title":{},"body":{"classes/Subscriber.html":{}}}],["packages/subscriber/src/index.ts:15",{"_index":281,"title":{},"body":{"classes/Subscriber.html":{}}}],["packages/subscriber/src/index.ts:16",{"_index":280,"title":{},"body":{"classes/Subscriber.html":{}}}],["packages/subscriber/src/index.ts:17",{"_index":283,"title":{},"body":{"classes/Subscriber.html":{}}}],["packages/subscriber/src/index.ts:18",{"_index":276,"title":{},"body":{"classes/Subscriber.html":{}}}],["packages/subscriber/src/index.ts:39",{"_index":286,"title":{},"body":{"classes/Subscriber.html":{}}}],["packages/subscriber/src/index.ts:66",{"_index":295,"title":{},"body":{"classes/Subscriber.html":{}}}],["packages/subscriber/src/index.ts:82",{"_index":292,"title":{},"body":{"classes/Subscriber.html":{}}}],["packages/subscriber/src/types.t",{"_index":339,"title":{},"body":{"interfaces/SubscriberHandler.html":{},"miscellaneous/typealiases.html":{}}}],["packages/utils/src/constants.t",{"_index":912,"title":{},"body":{"miscellaneous/variables.html":{}}}],["packages/utils/src/index.t",{"_index":358,"title":{},"body":{"classes/Utils.html":{},"miscellaneous/variables.html":{}}}],["packages/utils/src/index.ts:105",{"_index":374,"title":{},"body":{"classes/Utils.html":{}}}],["packages/utils/src/index.ts:106",{"_index":375,"title":{},"body":{"classes/Utils.html":{}}}],["packages/utils/src/index.ts:107",{"_index":371,"title":{},"body":{"classes/Utils.html":{}}}],["packages/utils/src/index.ts:108",{"_index":376,"title":{},"body":{"classes/Utils.html":{}}}],["packages/utils/src/index.ts:109",{"_index":373,"title":{},"body":{"classes/Utils.html":{}}}],["packages/utils/src/index.ts:18",{"_index":390,"title":{},"body":{"classes/Utils.html":{}}}],["packages/utils/src/index.ts:31",{"_index":381,"title":{},"body":{"classes/Utils.html":{}}}],["packages/utils/src/index.ts:35",{"_index":384,"title":{},"body":{"classes/Utils.html":{}}}],["packages/utils/src/index.ts:62",{"_index":392,"title":{},"body":{"classes/Utils.html":{}}}],["packages/utils/src/index.ts:71",{"_index":378,"title":{},"body":{"classes/Utils.html":{}}}],["packages/utils/src/index.ts:80",{"_index":388,"title":{},"body":{"classes/Utils.html":{}}}],["packages/utils/src/migrations/contracts/index.t",{"_index":924,"title":{},"body":{"miscellaneous/variables.html":{}}}],["packages/utils/src/migrations/index.t",{"_index":908,"title":{},"body":{"miscellaneous/variables.html":{}}}],["packages/utils/src/types.t",{"_index":666,"title":{},"body":{"interfaces/ZapProviderType.html":{},"miscellaneous/typealiases.html":{}}}],["packages/zaptoken/src/index.t",{"_index":765,"title":{},"body":{"classes/ZapToken.html":{}}}],["packages/zaptoken/src/index.ts:14",{"_index":770,"title":{},"body":{"classes/ZapToken.html":{}}}],["packages/zaptoken/src/index.ts:26",{"_index":777,"title":{},"body":{"classes/ZapToken.html":{}}}],["packages/zaptoken/src/index.ts:39",{"_index":779,"title":{},"body":{"classes/ZapToken.html":{}}}],["packages/zaptoken/src/index.ts:52",{"_index":773,"title":{},"body":{"classes/ZapToken.html":{}}}],["packages/zaptoken/src/index.ts:65",{"_index":775,"title":{},"body":{"classes/ZapToken.html":{}}}],["packages/zaptoken/src/types.t",{"_index":896,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["param",{"_index":56,"title":{},"body":{"classes/BaseContract.html":{},"classes/Curve.html":{},"classes/Subscriber.html":{},"classes/Utils.html":{},"classes/ZapArbiter.html":{},"classes/ZapDispatch.html":{},"classes/ZapProvider.html":{},"classes/ZapRegistry.html":{},"classes/ZapToken.html":{},"index.html":{}}}],["paramet",{"_index":29,"title":{},"body":{"classes/BaseContract.html":{},"classes/Curve.html":{},"classes/Subscriber.html":{},"classes/Utils.html":{},"classes/ZapArbiter.html":{},"classes/ZapDispatch.html":{},"classes/ZapProvider.html":{},"classes/ZapRegistry.html":{},"classes/ZapToken.html":{},"index.html":{}}}],["params).send({from",{"_index":739,"title":{},"body":{"classes/ZapRegistry.html":{}}}],["params.endpointparam",{"_index":755,"title":{},"body":{"classes/ZapRegistry.html":{}}}],["params:array",{"_index":721,"title":{},"body":{"classes/ZapRegistry.html":{}}}],["parent",{"_index":7,"title":{},"body":{"classes/BaseContract.html":{},"index.html":{}}}],["part",{"_index":104,"title":{},"body":{"classes/Curve.html":{},"interfaces/CurveTerm.html":{},"interfaces/CurveType.html":{},"interfaces/ProviderHandler.html":{},"classes/ZapProvider.html":{},"index.html":{}}}],["path",{"_index":825,"title":{},"body":{"dependencies.html":{}}}],["per",{"_index":709,"title":{},"body":{"classes/ZapRegistry.html":{},"index.html":{}}}],["piec",{"_index":105,"title":{},"body":{"classes/Curve.html":{},"index.html":{}}}],["pieces:array",{"_index":149,"title":{},"body":{"classes/Curve.html":{}}}],["piecewis",{"_index":158,"title":{},"body":{"classes/Curve.html":{}}}],["port",{"_index":670,"title":{},"body":{"interfaces/ZapProviderType.html":{}}}],["power",{"_index":142,"title":{},"body":{"classes/Curve.html":{},"interfaces/CurveTerm.html":{},"interfaces/CurveType.html":{},"index.html":{}}}],["prev",{"_index":179,"title":{},"body":{"classes/Curve.html":{}}}],["price",{"_index":134,"title":{},"body":{"classes/Curve.html":{},"index.html":{}}}],["privat",{"_index":198,"title":{},"body":{"classes/Curve.html":{}}}],["promis",{"_index":42,"title":{},"body":{"classes/BaseContract.html":{},"classes/Subscriber.html":{},"classes/ZapArbiter.html":{},"classes/ZapDispatch.html":{},"classes/ZapProvider.html":{},"classes/ZapRegistry.html":{},"classes/ZapToken.html":{},"dependencies.html":{},"index.html":{}}}],["promiseboolean",{"_index":888,"title":{},"body":{"index.html":{}}}],["promisenumb",{"_index":876,"title":{},"body":{"index.html":{}}}],["promisestr",{"_index":872,"title":{},"body":{"index.html":{}}}],["promisify(migrate.run",{"_index":909,"title":{},"body":{"miscellaneous/variables.html":{}}}],["properti",{"_index":19,"title":{},"body":{"classes/BaseContract.html":{},"interfaces/BaseContractType.html":{},"interfaces/ContractType.html":{},"classes/Curve.html":{},"interfaces/CurveTerm.html":{},"interfaces/CurveType.html":{},"interfaces/Filter.html":{},"interfaces/InitProvider.html":{},"interfaces/ProviderHandler.html":{},"interfaces/ResponseArgs.html":{},"classes/Subscriber.html":{},"interfaces/SubscriberHandler.html":{},"interfaces/SubscriptionEnd.html":{},"interfaces/SubscriptionInit.html":{},"interfaces/SubscriptionType.html":{},"classes/Utils.html":{},"classes/ZapArbiter.html":{},"classes/ZapDispatch.html":{},"classes/ZapProvider.html":{},"interfaces/ZapProviderType.html":{},"classes/ZapRegistry.html":{},"classes/ZapToken.html":{}}}],["provid",{"_index":13,"title":{},"body":{"classes/BaseContract.html":{},"interfaces/Filter.html":{},"interfaces/InitProvider.html":{},"interfaces/ResponseArgs.html":{},"classes/Subscriber.html":{},"interfaces/SubscriptionEnd.html":{},"interfaces/SubscriptionInit.html":{},"interfaces/SubscriptionType.html":{},"classes/Utils.html":{},"classes/ZapArbiter.html":{},"classes/ZapDispatch.html":{},"classes/ZapProvider.html":{},"interfaces/ZapProviderType.html":{},"classes/ZapRegistry.html":{},"classes/ZapToken.html":{},"index.html":{}}}],["provider'",{"_index":425,"title":{},"body":{"classes/ZapArbiter.html":{},"classes/ZapDispatch.html":{},"classes/ZapRegistry.html":{},"index.html":{}}}],["provider:address",{"_index":229,"title":{},"body":{"interfaces/InitProvider.html":{},"interfaces/ResponseArgs.html":{},"interfaces/SubscriptionEnd.html":{},"interfaces/SubscriptionInit.html":{},"interfaces/SubscriptionType.html":{}}}],["provider:str",{"_index":343,"title":{},"body":{"interfaces/SubscriberHandler.html":{}}}],["provider?:address",{"_index":354,"title":{},"body":{"interfaces/SubscriptionEnd.html":{},"interfaces/SubscriptionInit.html":{},"interfaces/SubscriptionType.html":{}}}],["providerconstructortyp",{"_index":255,"title":{},"body":{"interfaces/ProviderHandler.html":{},"classes/ZapProvider.html":{},"miscellaneous/typealiases.html":{}}}],["providerconstructortype,providerhandler,address,txid",{"_index":603,"title":{},"body":{"classes/ZapProvider.html":{}}}],["providerhandl",{"_index":232,"title":{"interfaces/ProviderHandler.html":{}},"body":{"interfaces/ProviderHandler.html":{},"classes/ZapProvider.html":{}}}],["providerown",{"_index":552,"title":{},"body":{"classes/ZapProvider.html":{}}}],["providerowner:str",{"_index":607,"title":{},"body":{"classes/ZapProvider.html":{}}}],["providerpubkey",{"_index":333,"title":{},"body":{"classes/Subscriber.html":{}}}],["pstart",{"_index":185,"title":{},"body":{"classes/Curve.html":{}}}],["pubkey",{"_index":357,"title":{},"body":{"interfaces/SubscriptionInit.html":{},"classes/ZapArbiter.html":{},"classes/ZapProvider.html":{},"interfaces/ZapProviderType.html":{}}}],["pubkey:numb",{"_index":353,"title":{},"body":{"interfaces/SubscriptionEnd.html":{},"interfaces/SubscriptionInit.html":{},"interfaces/SubscriptionType.html":{},"interfaces/ZapProviderType.html":{}}}],["pubkey:number|str",{"_index":609,"title":{},"body":{"classes/ZapProvider.html":{}}}],["pubkey:str",{"_index":741,"title":{},"body":{"classes/ZapRegistry.html":{}}}],["public",{"_index":447,"title":{},"body":{"classes/ZapArbiter.html":{},"classes/ZapProvider.html":{},"classes/ZapRegistry.html":{},"index.html":{}}}],["public_key",{"_index":222,"title":{},"body":{"interfaces/InitProvider.html":{},"interfaces/ProviderHandler.html":{},"classes/ZapProvider.html":{},"classes/ZapRegistry.html":{},"index.html":{}}}],["queri",{"_index":264,"title":{},"body":{"interfaces/ResponseArgs.html":{},"classes/ZapDispatch.html":{},"classes/ZapProvider.html":{},"index.html":{}}}],["queryarg",{"_index":263,"title":{},"body":{"interfaces/ResponseArgs.html":{},"classes/ZapDispatch.html":{},"miscellaneous/typealiases.html":{}}}],["queryargs,responseargs,filter,txid",{"_index":511,"title":{},"body":{"classes/ZapDispatch.html":{}}}],["querydata",{"_index":493,"title":{},"body":{"classes/ZapDispatch.html":{},"index.html":{}}}],["querydata(undefin",{"_index":505,"title":{},"body":{"classes/ZapDispatch.html":{}}}],["querydata({provid",{"_index":514,"title":{},"body":{"classes/ZapDispatch.html":{}}}],["queryid",{"_index":250,"title":{},"body":{"interfaces/ProviderHandler.html":{},"interfaces/ResponseArgs.html":{},"classes/ZapDispatch.html":{},"classes/ZapProvider.html":{},"index.html":{}}}],["queryid:str",{"_index":252,"title":{},"body":{"interfaces/ProviderHandler.html":{}}}],["rang",{"_index":175,"title":{},"body":{"classes/Curve.html":{}}}],["rate",{"_index":878,"title":{},"body":{"index.html":{}}}],["re",{"_index":644,"title":{},"body":{"classes/ZapProvider.html":{}}}],["readdirsync",{"_index":393,"title":{},"body":{"classes/Utils.html":{}}}],["receiv",{"_index":510,"title":{},"body":{"classes/ZapDispatch.html":{},"index.html":{}}}],["refer",{"_index":182,"title":{},"body":{"classes/Curve.html":{}}}],["registr",{"_index":680,"title":{},"body":{"classes/ZapRegistry.html":{},"index.html":{}}}],["registri",{"_index":12,"title":{},"body":{"classes/BaseContract.html":{},"classes/ZapProvider.html":{},"classes/ZapRegistry.html":{},"index.html":{}}}],["releas",{"_index":885,"title":{},"body":{"index.html":{}}}],["request",{"_index":328,"title":{},"body":{"classes/Subscriber.html":{}}}],["requir",{"_index":302,"title":{},"body":{"classes/Subscriber.html":{},"classes/ZapArbiter.html":{},"classes/ZapDispatch.html":{},"classes/ZapProvider.html":{},"dependencies.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["require(\"./const",{"_index":372,"title":{},"body":{"classes/Utils.html":{}}}],["require(\"assert",{"_index":601,"title":{},"body":{"classes/ZapProvider.html":{},"miscellaneous/variables.html":{}}}],["require(\"path",{"_index":925,"title":{},"body":{"miscellaneous/variables.html":{}}}],["require(\"requir",{"_index":920,"title":{},"body":{"miscellaneous/variables.html":{}}}],["require(\"truffl",{"_index":917,"title":{},"body":{"miscellaneous/variables.html":{}}}],["require(\"web3",{"_index":146,"title":{},"body":{"classes/Curve.html":{},"classes/Utils.html":{},"classes/ZapProvider.html":{},"classes/ZapRegistry.html":{},"miscellaneous/variables.html":{}}}],["require('assert",{"_index":296,"title":{},"body":{"classes/Subscriber.html":{},"miscellaneous/variables.html":{}}}],["require('ev",{"_index":606,"title":{},"body":{"classes/ZapProvider.html":{},"miscellaneous/variables.html":{}}}],["require('f",{"_index":911,"title":{},"body":{"miscellaneous/variables.html":{}}}],["require('ganach",{"_index":910,"title":{},"body":{"miscellaneous/variables.html":{}}}],["require('web3",{"_index":47,"title":{},"body":{"classes/BaseContract.html":{},"classes/Utils.html":{},"miscellaneous/variables.html":{}}}],["requireal",{"_index":904,"title":{},"body":{"miscellaneous/variables.html":{}}}],["resolv",{"_index":832,"title":{},"body":{"dependencies.html":{}}}],["respond",{"_index":251,"title":{},"body":{"interfaces/ProviderHandler.html":{},"classes/ZapDispatch.html":{},"classes/ZapProvider.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["respond(undefin",{"_index":508,"title":{},"body":{"classes/ZapDispatch.html":{},"classes/ZapProvider.html":{}}}],["respond({queryid",{"_index":522,"title":{},"body":{"classes/ZapDispatch.html":{},"classes/ZapProvider.html":{}}}],["respons",{"_index":504,"title":{},"body":{"classes/ZapDispatch.html":{},"classes/ZapProvider.html":{},"index.html":{}}}],["responsearg",{"_index":259,"title":{"interfaces/ResponseArgs.html":{}},"body":{"interfaces/ResponseArgs.html":{},"classes/ZapDispatch.html":{}}}],["responseparam",{"_index":253,"title":{},"body":{"interfaces/ProviderHandler.html":{},"interfaces/ResponseArgs.html":{},"classes/ZapDispatch.html":{},"classes/ZapProvider.html":{},"index.html":{}}}],["responseparams).send({from,ga",{"_index":525,"title":{},"body":{"classes/ZapDispatch.html":{}}}],["responseparams.length",{"_index":527,"title":{},"body":{"classes/ZapDispatch.html":{}}}],["responseparams[0",{"_index":533,"title":{},"body":{"classes/ZapDispatch.html":{}}}],["responseparams[0]).send",{"_index":530,"title":{},"body":{"classes/ZapDispatch.html":{}}}],["responseparams[1",{"_index":536,"title":{},"body":{"classes/ZapDispatch.html":{}}}],["responseparams[1]).send",{"_index":534,"title":{},"body":{"classes/ZapDispatch.html":{}}}],["responseparams[2",{"_index":540,"title":{},"body":{"classes/ZapDispatch.html":{}}}],["responseparams[2]).send",{"_index":537,"title":{},"body":{"classes/ZapDispatch.html":{}}}],["responseparams[3]).send",{"_index":541,"title":{},"body":{"classes/ZapDispatch.html":{}}}],["result",{"_index":90,"title":{},"body":{"classes/BaseContract.html":{},"interfaces/BaseContractType.html":{},"interfaces/ContractType.html":{},"classes/Curve.html":{},"interfaces/CurveTerm.html":{},"interfaces/CurveType.html":{},"interfaces/Filter.html":{},"interfaces/InitProvider.html":{},"interfaces/ProviderHandler.html":{},"interfaces/ResponseArgs.html":{},"classes/Subscriber.html":{},"interfaces/SubscriberHandler.html":{},"interfaces/SubscriptionEnd.html":{},"interfaces/SubscriptionInit.html":{},"interfaces/SubscriptionType.html":{},"classes/Utils.html":{},"classes/ZapArbiter.html":{},"classes/ZapDispatch.html":{},"classes/ZapProvider.html":{},"interfaces/ZapProviderType.html":{},"classes/ZapRegistry.html":{},"classes/ZapToken.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["result:str",{"_index":650,"title":{},"body":{"classes/ZapProvider.html":{}}}],["return",{"_index":41,"title":{},"body":{"classes/BaseContract.html":{},"classes/Curve.html":{},"classes/Subscriber.html":{},"classes/Utils.html":{},"classes/ZapArbiter.html":{},"classes/ZapDispatch.html":{},"classes/ZapProvider.html":{},"classes/ZapRegistry.html":{},"classes/ZapToken.html":{},"index.html":{}}}],["run",{"_index":823,"title":{},"body":{"dependencies.html":{}}}],["s",{"_index":875,"title":{},"body":{"index.html":{}}}],["see",{"_index":879,"title":{},"body":{"index.html":{}}}],["send",{"_index":769,"title":{},"body":{"classes/ZapToken.html":{},"index.html":{}}}],["send(undefin",{"_index":778,"title":{},"body":{"classes/ZapToken.html":{}}}],["send({from",{"_index":467,"title":{},"body":{"classes/ZapArbiter.html":{},"classes/ZapRegistry.html":{}}}],["send({from,ga",{"_index":728,"title":{},"body":{"classes/ZapRegistry.html":{}}}],["send({to",{"_index":787,"title":{},"body":{"classes/ZapToken.html":{}}}],["serveroptionstyp",{"_index":667,"title":{},"body":{"interfaces/ZapProviderType.html":{},"miscellaneous/typealiases.html":{}}}],["set",{"_index":707,"title":{},"body":{"classes/ZapRegistry.html":{},"index.html":{}}}],["setendpointparam",{"_index":688,"title":{},"body":{"classes/ZapRegistry.html":{},"index.html":{}}}],["setendpointparams(undefin",{"_index":715,"title":{},"body":{"classes/ZapRegistry.html":{}}}],["setendpointparams({endpoint",{"_index":734,"title":{},"body":{"classes/ZapRegistry.html":{}}}],["sourc",{"_index":3,"title":{},"body":{"classes/BaseContract.html":{},"interfaces/BaseContractType.html":{},"interfaces/ContractType.html":{},"classes/Curve.html":{},"interfaces/CurveTerm.html":{},"interfaces/CurveType.html":{},"interfaces/Filter.html":{},"interfaces/InitProvider.html":{},"interfaces/ProviderHandler.html":{},"interfaces/ResponseArgs.html":{},"classes/Subscriber.html":{},"interfaces/SubscriberHandler.html":{},"interfaces/SubscriptionEnd.html":{},"interfaces/SubscriptionInit.html":{},"interfaces/SubscriptionType.html":{},"classes/Utils.html":{},"classes/ZapArbiter.html":{},"classes/ZapDispatch.html":{},"classes/ZapProvider.html":{},"interfaces/ZapProviderType.html":{},"classes/ZapRegistry.html":{},"classes/ZapToken.html":{}}}],["specif",{"_index":520,"title":{},"body":{"classes/ZapDispatch.html":{}}}],["specifi",{"_index":382,"title":{},"body":{"classes/Utils.html":{},"classes/ZapArbiter.html":{}}}],["start",{"_index":424,"title":{"index.html":{}},"body":{"classes/ZapArbiter.html":{},"index.html":{}}}],["startganacheserv",{"_index":364,"title":{},"body":{"classes/Utils.html":{}}}],["static",{"_index":360,"title":{},"body":{"classes/Utils.html":{}}}],["str",{"_index":385,"title":{},"body":{"classes/Utils.html":{}}}],["string",{"_index":57,"title":{},"body":{"classes/BaseContract.html":{},"interfaces/BaseContractType.html":{},"interfaces/ContractType.html":{},"interfaces/Filter.html":{},"interfaces/InitProvider.html":{},"interfaces/ProviderHandler.html":{},"interfaces/ResponseArgs.html":{},"classes/Subscriber.html":{},"interfaces/SubscriberHandler.html":{},"interfaces/SubscriptionEnd.html":{},"interfaces/SubscriptionInit.html":{},"interfaces/SubscriptionType.html":{},"classes/Utils.html":{},"classes/ZapArbiter.html":{},"classes/ZapDispatch.html":{},"classes/ZapProvider.html":{},"interfaces/ZapProviderType.html":{},"classes/ZapRegistry.html":{},"classes/ZapToken.html":{},"index.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["string|object",{"_index":245,"title":{},"body":{"interfaces/ProviderHandler.html":{}}}],["string|undefin",{"_index":94,"title":{},"body":{"interfaces/BaseContractType.html":{},"interfaces/ContractType.html":{}}}],["structur",{"_index":111,"title":{},"body":{"classes/Curve.html":{},"index.html":{}}}],["subscrib",{"_index":215,"title":{"classes/Subscriber.html":{}},"body":{"interfaces/Filter.html":{},"interfaces/ProviderHandler.html":{},"classes/Subscriber.html":{},"interfaces/SubscriptionEnd.html":{},"interfaces/SubscriptionInit.html":{},"interfaces/SubscriptionType.html":{},"classes/ZapArbiter.html":{},"classes/ZapDispatch.html":{},"classes/ZapProvider.html":{},"index.html":{}}}],["subscribe(undefin",{"_index":290,"title":{},"body":{"classes/Subscriber.html":{}}}],["subscribe({provid",{"_index":331,"title":{},"body":{"classes/Subscriber.html":{}}}],["subscriber:address",{"_index":247,"title":{},"body":{"interfaces/ProviderHandler.html":{},"interfaces/SubscriptionEnd.html":{},"interfaces/SubscriptionInit.html":{},"interfaces/SubscriptionType.html":{}}}],["subscriberconstructortyp",{"_index":275,"title":{},"body":{"classes/Subscriber.html":{},"interfaces/SubscriberHandler.html":{},"miscellaneous/typealiases.html":{}}}],["subscriberhandl",{"_index":277,"title":{"interfaces/SubscriberHandler.html":{}},"body":{"classes/Subscriber.html":{},"interfaces/SubscriberHandler.html":{}}}],["subscriberown",{"_index":270,"title":{},"body":{"classes/Subscriber.html":{}}}],["subscriberowner:str",{"_index":299,"title":{},"body":{"classes/Subscriber.html":{}}}],["subscribetyp",{"_index":291,"title":{},"body":{"classes/Subscriber.html":{},"interfaces/SubscriberHandler.html":{},"miscellaneous/typealiases.html":{}}}],["subscript",{"_index":420,"title":{},"body":{"classes/ZapArbiter.html":{},"classes/ZapProvider.html":{},"index.html":{}}}],["subscriptionend",{"_index":346,"title":{"interfaces/SubscriptionEnd.html":{}},"body":{"interfaces/SubscriptionEnd.html":{},"interfaces/SubscriptionInit.html":{},"interfaces/SubscriptionType.html":{},"classes/ZapArbiter.html":{}}}],["subscriptioninit",{"_index":351,"title":{"interfaces/SubscriptionInit.html":{}},"body":{"interfaces/SubscriptionEnd.html":{},"interfaces/SubscriptionInit.html":{},"interfaces/SubscriptionType.html":{},"classes/ZapArbiter.html":{}}}],["subscriptioninit):promis",{"_index":450,"title":{},"body":{"classes/ZapArbiter.html":{}}}],["subscriptioninit,subscriptionend,filter,subscriptiontype,txid",{"_index":438,"title":{},"body":{"classes/ZapArbiter.html":{}}}],["subscriptiontyp",{"_index":356,"title":{"interfaces/SubscriptionType.html":{}},"body":{"interfaces/SubscriptionEnd.html":{},"interfaces/SubscriptionInit.html":{},"interfaces/SubscriptionType.html":{},"classes/ZapArbiter.html":{}}}],["success",{"_index":798,"title":{},"body":{"classes/ZapToken.html":{}}}],["sum",{"_index":201,"title":{},"body":{"classes/Curve.html":{}}}],["super({artifactsdir,artifactname:\"dispatch\",networkid,networkprovid",{"_index":513,"title":{},"body":{"classes/ZapDispatch.html":{}}}],["super({artifactsdir,artifactname:\"registry\",networkid,networkprovid",{"_index":719,"title":{},"body":{"classes/ZapRegistry.html":{}}}],["super({artifactsdir,artifactname:\"zaptoken\",networkid,networkprovid",{"_index":783,"title":{},"body":{"classes/ZapToken.html":{}}}],["super({artifactsdir,artifactname:'arbiter',networkid,networkprovid",{"_index":445,"title":{},"body":{"classes/ZapArbiter.html":{}}}],["switch",{"_index":526,"title":{},"body":{"classes/ZapDispatch.html":{}}}],["tabl",{"_index":861,"title":{},"body":{"index.html":{}}}],["term",{"_index":122,"title":{},"body":{"classes/Curve.html":{}}}],["term.coef",{"_index":189,"title":{},"body":{"classes/Curve.html":{}}}],["term.pow",{"_index":188,"title":{},"body":{"classes/Curve.html":{}}}],["termin",{"_index":248,"title":{},"body":{"interfaces/ProviderHandler.html":{},"interfaces/SubscriptionEnd.html":{},"interfaces/SubscriptionInit.html":{},"interfaces/SubscriptionType.html":{},"classes/ZapProvider.html":{},"index.html":{}}}],["theme",{"_index":844,"title":{},"body":{"dependencies.html":{}}}],["this.checkvalid",{"_index":155,"title":{},"body":{"classes/Curve.html":{}}}],["this.const",{"_index":151,"title":{},"body":{"classes/Curve.html":{}}}],["this.constants.length/3",{"_index":180,"title":{},"body":{"classes/Curve.html":{}}}],["this.constants.map((item",{"_index":192,"title":{},"body":{"classes/Curve.html":{}}}],["this.contract",{"_index":82,"title":{},"body":{"classes/BaseContract.html":{}}}],["this.contract.ev",{"_index":476,"title":{},"body":{"classes/ZapArbiter.html":{}}}],["this.contract.events.allev",{"_index":543,"title":{},"body":{"classes/ZapDispatch.html":{}}}],["this.contract.events.allevents(filt",{"_index":760,"title":{},"body":{"classes/ZapRegistry.html":{}}}],["this.contract.events.allevents({fromblock",{"_index":486,"title":{},"body":{"classes/ZapArbiter.html":{}}}],["this.contract.events.datapurchas",{"_index":482,"title":{},"body":{"classes/ZapArbiter.html":{}}}],["this.contract.events.fulfillquery(filt",{"_index":547,"title":{},"body":{"classes/ZapDispatch.html":{}}}],["this.contract.events.incoming(filt",{"_index":545,"title":{},"body":{"classes/ZapDispatch.html":{}}}],["this.contract.events.newcurve(provid",{"_index":764,"title":{},"body":{"classes/ZapRegistry.html":{}}}],["this.contract.events.newprovider(filt",{"_index":762,"title":{},"body":{"classes/ZapRegistry.html":{}}}],["this.contract.events.offchainresponse(filt",{"_index":549,"title":{},"body":{"classes/ZapDispatch.html":{}}}],["this.contract.methods.allocate(to",{"_index":795,"title":{},"body":{"classes/ZapToken.html":{}}}],["this.contract.methods.approve(to",{"_index":799,"title":{},"body":{"classes/ZapToken.html":{}}}],["this.contract.methods.balanceof(address).cal",{"_index":785,"title":{},"body":{"classes/ZapToken.html":{}}}],["this.contract.methods.endsubscriptionprovid",{"_index":469,"title":{},"body":{"classes/ZapArbiter.html":{}}}],["this.contract.methods.endsubscriptionsubscrib",{"_index":466,"title":{},"body":{"classes/ZapArbiter.html":{}}}],["this.contract.methods.getnextendpointparam",{"_index":753,"title":{},"body":{"classes/ZapRegistry.html":{}}}],["this.contract.methods.getnextprovider(index).cal",{"_index":750,"title":{},"body":{"classes/ZapRegistry.html":{}}}],["this.contract.methods.getprovidercurv",{"_index":747,"title":{},"body":{"classes/ZapRegistry.html":{}}}],["this.contract.methods.getproviderpublickey(provider).cal",{"_index":742,"title":{},"body":{"classes/ZapRegistry.html":{}}}],["this.contract.methods.getprovidertitle(provider).cal",{"_index":745,"title":{},"body":{"classes/ZapRegistry.html":{}}}],["this.contract.methods.getsubscription(provider,subscriber,utf8tohex(endpoint)).cal",{"_index":459,"title":{},"body":{"classes/ZapArbiter.html":{}}}],["this.contract.methods.initiateprovid",{"_index":725,"title":{},"body":{"classes/ZapRegistry.html":{}}}],["this.contract.methods.initiateprovidercurv",{"_index":733,"title":{},"body":{"classes/ZapRegistry.html":{}}}],["this.contract.methods.initiatesubscript",{"_index":453,"title":{},"body":{"classes/ZapArbiter.html":{}}}],["this.contract.methods.owner().call().valueof",{"_index":89,"title":{},"body":{"classes/BaseContract.html":{}}}],["this.contract.methods.queri",{"_index":519,"title":{},"body":{"classes/ZapDispatch.html":{}}}],["this.contract.methods.respond1",{"_index":529,"title":{},"body":{"classes/ZapDispatch.html":{}}}],["this.contract.methods.respond2",{"_index":532,"title":{},"body":{"classes/ZapDispatch.html":{}}}],["this.contract.methods.respond3",{"_index":535,"title":{},"body":{"classes/ZapDispatch.html":{}}}],["this.contract.methods.respond4",{"_index":539,"title":{},"body":{"classes/ZapDispatch.html":{}}}],["this.contract.methods.respondbytes32array",{"_index":524,"title":{},"body":{"classes/ZapDispatch.html":{}}}],["this.contract.methods.setendpointparam",{"_index":738,"title":{},"body":{"classes/ZapRegistry.html":{}}}],["this.contract.methods.transfer(to",{"_index":791,"title":{},"body":{"classes/ZapToken.html":{}}}],["this.curv",{"_index":612,"title":{},"body":{"classes/ZapProvider.html":{}}}],["this.divid",{"_index":153,"title":{},"body":{"classes/Curve.html":{}}}],["this.dividers.length",{"_index":173,"title":{},"body":{"classes/Curve.html":{}}}],["this.dividers.map((item",{"_index":197,"title":{},"body":{"classes/Curve.html":{}}}],["this.handl",{"_index":304,"title":{},"body":{"classes/Subscriber.html":{},"classes/ZapProvider.html":{}}}],["this.handler.handleincoming(result",{"_index":662,"title":{},"body":{"classes/ZapProvider.html":{}}}],["this.handler.handlesubscription(result",{"_index":652,"title":{},"body":{"classes/ZapProvider.html":{}}}],["this.handler.handleunsubscription(result",{"_index":658,"title":{},"body":{"classes/ZapProvider.html":{}}}],["this.networkid",{"_index":78,"title":{},"body":{"classes/BaseContract.html":{}}}],["this.part",{"_index":152,"title":{},"body":{"classes/Curve.html":{}}}],["this.parts.map((item",{"_index":195,"title":{},"body":{"classes/Curve.html":{}}}],["this.piec",{"_index":154,"title":{},"body":{"classes/Curve.html":{}}}],["this.provid",{"_index":71,"title":{},"body":{"classes/BaseContract.html":{}}}],["this.providerown",{"_index":611,"title":{},"body":{"classes/ZapProvider.html":{}}}],["this.pubkey",{"_index":614,"title":{},"body":{"classes/ZapProvider.html":{}}}],["this.structur",{"_index":156,"title":{},"body":{"classes/Curve.html":{}}}],["this.subscriberown",{"_index":303,"title":{},"body":{"classes/Subscriber.html":{}}}],["this.titl",{"_index":613,"title":{},"body":{"classes/ZapProvider.html":{}}}],["this.web3",{"_index":80,"title":{},"body":{"classes/BaseContract.html":{}}}],["this.web3.eth.contract(artifact.abi,artifact.networks[this.networkid].address",{"_index":83,"title":{},"body":{"classes/BaseContract.html":{}}}],["this.zaparbit",{"_index":308,"title":{},"body":{"classes/Subscriber.html":{},"classes/ZapProvider.html":{}}}],["this.zaparbiter.listensubscriptionend",{"_index":659,"title":{},"body":{"classes/ZapProvider.html":{}}}],["this.zaparbiter.listensubscriptionstart",{"_index":653,"title":{},"body":{"classes/ZapProvider.html":{}}}],["this.zapbondag",{"_index":307,"title":{},"body":{"classes/Subscriber.html":{},"classes/ZapProvider.html":{}}}],["this.zapbondage.bond",{"_index":321,"title":{},"body":{"classes/Subscriber.html":{}}}],["this.zapbondage.calcbondr",{"_index":645,"title":{},"body":{"classes/ZapProvider.html":{}}}],["this.zapbondage.calczapfordots({provid",{"_index":335,"title":{},"body":{"classes/Subscriber.html":{},"classes/ZapProvider.html":{}}}],["this.zapbondage.contract._address",{"_index":317,"title":{},"body":{"classes/Subscriber.html":{}}}],["this.zapbondage.getbounddots({subscrib",{"_index":325,"title":{},"body":{"classes/Subscriber.html":{}}}],["this.zapbondage.getzapbound",{"_index":637,"title":{},"body":{"classes/ZapProvider.html":{}}}],["this.zapbondage.unbond({provid",{"_index":330,"title":{},"body":{"classes/Subscriber.html":{}}}],["this.zapdispatch",{"_index":306,"title":{},"body":{"classes/Subscriber.html":{},"classes/ZapProvider.html":{}}}],["this.zapdispatch.listenincoming({queryid",{"_index":663,"title":{},"body":{"classes/ZapProvider.html":{}}}],["this.zapdispatch.respond({queryid",{"_index":665,"title":{},"body":{"classes/ZapProvider.html":{}}}],["this.zapregistri",{"_index":309,"title":{},"body":{"classes/Subscriber.html":{},"classes/ZapProvider.html":{}}}],["this.zapregistry.getprovidercurve(this.providerown",{"_index":634,"title":{},"body":{"classes/ZapProvider.html":{}}}],["this.zapregistry.getproviderpublickey(provid",{"_index":334,"title":{},"body":{"classes/Subscriber.html":{}}}],["this.zapregistry.getproviderpublickey(this.providerown",{"_index":631,"title":{},"body":{"classes/ZapProvider.html":{}}}],["this.zapregistry.getprovidertitle(this.providerown",{"_index":628,"title":{},"body":{"classes/ZapProvider.html":{}}}],["this.zapregistry.initiateprovid",{"_index":619,"title":{},"body":{"classes/ZapProvider.html":{}}}],["this.zapregistry.initiateprovidercurve({endpoint",{"_index":624,"title":{},"body":{"classes/ZapProvider.html":{}}}],["this.zaptoken",{"_index":305,"title":{},"body":{"classes/Subscriber.html":{}}}],["this.zaptoken.approv",{"_index":316,"title":{},"body":{"classes/Subscriber.html":{}}}],["this.zaptoken.balanceof(this.subscriberown",{"_index":337,"title":{},"body":{"classes/Subscriber.html":{}}}],["throw",{"_index":86,"title":{},"body":{"classes/BaseContract.html":{},"classes/Curve.html":{},"classes/ZapArbiter.html":{},"classes/ZapDispatch.html":{},"classes/ZapToken.html":{}}}],["titl",{"_index":223,"title":{},"body":{"interfaces/InitProvider.html":{},"interfaces/ProviderHandler.html":{},"classes/ZapProvider.html":{},"interfaces/ZapProviderType.html":{},"classes/ZapRegistry.html":{},"index.html":{}}}],["title:str",{"_index":608,"title":{},"body":{"classes/ZapProvider.html":{},"interfaces/ZapProviderType.html":{}}}],["toblock",{"_index":207,"title":{},"body":{"interfaces/Filter.html":{},"interfaces/InitProvider.html":{},"interfaces/ResponseArgs.html":{},"interfaces/SubscriptionEnd.html":{},"interfaces/SubscriptionInit.html":{},"interfaces/SubscriptionType.html":{},"classes/ZapArbiter.html":{},"classes/ZapDispatch.html":{}}}],["tobn(blocks)).send({from",{"_index":456,"title":{},"body":{"classes/ZapArbiter.html":{}}}],["tobn(index",{"_index":754,"title":{},"body":{"classes/ZapRegistry.html":{}}}],["tobn(pubkey",{"_index":455,"title":{},"body":{"classes/ZapArbiter.html":{}}}],["tobn(public_key",{"_index":726,"title":{},"body":{"classes/ZapRegistry.html":{}}}],["tobn,utf8tohex",{"_index":439,"title":{},"body":{"classes/ZapArbiter.html":{},"classes/ZapDispatch.html":{}}}],["tohex",{"_index":145,"title":{},"body":{"classes/Curve.html":{},"classes/Utils.html":{}}}],["tohex(item",{"_index":193,"title":{},"body":{"classes/Curve.html":{},"classes/ZapRegistry.html":{}}}],["tohex(str",{"_index":389,"title":{},"body":{"classes/Utils.html":{}}}],["tohex,utf8tohex,tobn",{"_index":717,"title":{},"body":{"classes/ZapRegistry.html":{}}}],["token",{"_index":11,"title":{},"body":{"classes/BaseContract.html":{},"classes/ZapProvider.html":{},"classes/ZapToken.html":{},"index.html":{}}}],["total",{"_index":121,"title":{},"body":{"classes/Curve.html":{},"index.html":{}}}],["totalbound",{"_index":137,"title":{},"body":{"classes/Curve.html":{},"index.html":{}}}],["tozapbas",{"_index":369,"title":{},"body":{"classes/Utils.html":{}}}],["tozapbase(num",{"_index":391,"title":{},"body":{"classes/Utils.html":{}}}],["transact",{"_index":427,"title":{},"body":{"classes/ZapArbiter.html":{},"classes/ZapDispatch.html":{},"index.html":{}}}],["transfer",{"_index":780,"title":{},"body":{"classes/ZapToken.html":{},"index.html":{}}}],["transfertyp",{"_index":772,"title":{},"body":{"classes/ZapToken.html":{},"miscellaneous/typealiases.html":{}}}],["transfertype,address,txid",{"_index":781,"title":{},"body":{"classes/ZapToken.html":{}}}],["tri",{"_index":66,"title":{},"body":{"classes/BaseContract.html":{},"classes/ZapArbiter.html":{}}}],["triplet",{"_index":177,"title":{},"body":{"classes/Curve.html":{}}}],["truffl",{"_index":828,"title":{},"body":{"dependencies.html":{}}}],["ts",{"_index":834,"title":{},"body":{"dependencies.html":{}}}],["tslint",{"_index":837,"title":{},"body":{"dependencies.html":{}}}],["turn",{"_index":140,"title":{},"body":{"classes/Curve.html":{},"index.html":{}}}],["txid",{"_index":208,"title":{},"body":{"interfaces/Filter.html":{},"interfaces/InitProvider.html":{},"interfaces/ProviderHandler.html":{},"interfaces/ResponseArgs.html":{},"interfaces/SubscriptionEnd.html":{},"interfaces/SubscriptionInit.html":{},"interfaces/SubscriptionType.html":{},"classes/ZapArbiter.html":{},"classes/ZapDispatch.html":{},"classes/ZapProvider.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["type",{"_index":32,"title":{},"body":{"classes/BaseContract.html":{},"interfaces/BaseContractType.html":{},"interfaces/ContractType.html":{},"classes/Curve.html":{},"interfaces/CurveTerm.html":{},"interfaces/CurveType.html":{},"interfaces/Filter.html":{},"interfaces/InitProvider.html":{},"interfaces/ProviderHandler.html":{},"interfaces/ResponseArgs.html":{},"classes/Subscriber.html":{},"interfaces/SubscriberHandler.html":{},"interfaces/SubscriptionEnd.html":{},"interfaces/SubscriptionInit.html":{},"interfaces/SubscriptionType.html":{},"classes/Utils.html":{},"classes/ZapArbiter.html":{},"classes/ZapDispatch.html":{},"classes/ZapProvider.html":{},"interfaces/ZapProviderType.html":{},"classes/ZapRegistry.html":{},"classes/ZapToken.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["type2docfx",{"_index":839,"title":{},"body":{"dependencies.html":{}}}],["typealias",{"_index":893,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typedoc",{"_index":841,"title":{},"body":{"dependencies.html":{}}}],["types/chai",{"_index":806,"title":{},"body":{"dependencies.html":{}}}],["types/mocha",{"_index":808,"title":{},"body":{"dependencies.html":{}}}],["typescript",{"_index":848,"title":{},"body":{"dependencies.html":{}}}],["unbond",{"_index":274,"title":{},"body":{"classes/Subscriber.html":{},"index.html":{}}}],["unbond(undefin",{"_index":293,"title":{},"body":{"classes/Subscriber.html":{}}}],["unbond({provid",{"_index":322,"title":{},"body":{"classes/Subscriber.html":{}}}],["unbondarg",{"_index":213,"title":{},"body":{"interfaces/Filter.html":{},"miscellaneous/typealiases.html":{}}}],["unbondtyp",{"_index":294,"title":{},"body":{"classes/Subscriber.html":{},"interfaces/SubscriberHandler.html":{},"miscellaneous/typealiases.html":{}}}],["unbound",{"_index":329,"title":{},"body":{"classes/Subscriber.html":{}}}],["undefin",{"_index":65,"title":{},"body":{"classes/BaseContract.html":{},"interfaces/BaseContractType.html":{},"interfaces/ContractType.html":{},"classes/ZapProvider.html":{}}}],["unsubscrib",{"_index":417,"title":{},"body":{"classes/ZapArbiter.html":{},"classes/ZapProvider.html":{},"index.html":{}}}],["unsubscribelisten",{"_index":246,"title":{},"body":{"interfaces/ProviderHandler.html":{},"classes/ZapProvider.html":{},"miscellaneous/typealiases.html":{}}}],["unsubscript",{"_index":465,"title":{},"body":{"classes/ZapArbiter.html":{},"classes/ZapProvider.html":{},"index.html":{}}}],["unsubscription:ani",{"_index":464,"title":{},"body":{"classes/ZapArbiter.html":{}}}],["us",{"_index":575,"title":{},"body":{"classes/ZapProvider.html":{},"index.html":{}}}],["utf8tohex(el",{"_index":737,"title":{},"body":{"classes/ZapRegistry.html":{}}}],["utf8tohex(endpoint",{"_index":454,"title":{},"body":{"classes/ZapArbiter.html":{},"classes/ZapDispatch.html":{},"classes/ZapRegistry.html":{}}}],["utf8tohex(endpoint_params[i",{"_index":452,"title":{},"body":{"classes/ZapArbiter.html":{}}}],["utf8tohex(endpointparams[i",{"_index":518,"title":{},"body":{"classes/ZapDispatch.html":{}}}],["utf8tohex(item",{"_index":724,"title":{},"body":{"classes/ZapRegistry.html":{}}}],["utf8tohex(titl",{"_index":727,"title":{},"body":{"classes/ZapRegistry.html":{}}}],["utf8tohex,tobn",{"_index":396,"title":{},"body":{"classes/Utils.html":{}}}],["util",{"_index":50,"title":{"classes/Utils.html":{}},"body":{"classes/BaseContract.html":{},"classes/Curve.html":{},"classes/Utils.html":{},"classes/ZapArbiter.html":{},"classes/ZapDispatch.html":{},"classes/ZapProvider.html":{},"classes/ZapRegistry.html":{},"classes/ZapToken.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["utils.fromzapbase(bal",{"_index":786,"title":{},"body":{"classes/ZapToken.html":{}}}],["utils.getartifacts(artifactsdir",{"_index":70,"title":{},"body":{"classes/BaseContract.html":{}}}],["utils.tozapbase(amount",{"_index":790,"title":{},"body":{"classes/ZapToken.html":{}}}],["val",{"_index":186,"title":{},"body":{"classes/Curve.html":{}}}],["valid",{"_index":160,"title":{},"body":{"classes/Curve.html":{}}}],["valu",{"_index":370,"title":{},"body":{"classes/Utils.html":{},"classes/ZapArbiter.html":{},"classes/ZapDispatch.html":{},"classes/ZapRegistry.html":{},"miscellaneous/variables.html":{}}}],["var",{"_index":178,"title":{},"body":{"classes/Curve.html":{}}}],["variabl",{"_index":897,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["void",{"_index":128,"title":{},"body":{"classes/Curve.html":{},"classes/ZapArbiter.html":{},"classes/ZapDispatch.html":{}}}],["want",{"_index":882,"title":{},"body":{"index.html":{}}}],["watch",{"_index":474,"title":{},"body":{"classes/ZapArbiter.html":{}}}],["web3",{"_index":17,"title":{},"body":{"classes/BaseContract.html":{},"classes/Utils.html":{},"classes/ZapArbiter.html":{},"classes/ZapDispatch.html":{},"classes/ZapRegistry.html":{},"classes/ZapToken.html":{},"dependencies.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["web3(networkprovid",{"_index":81,"title":{},"body":{"classes/BaseContract.html":{}}}],["web3.providers.httpprovider('http://127.0.0.1:7545",{"_index":915,"title":{},"body":{"miscellaneous/variables.html":{}}}],["web3.providers.websocketprovider('ws://127.0.0.1:8545",{"_index":73,"title":{},"body":{"classes/BaseContract.html":{}}}],["web3/typ",{"_index":600,"title":{},"body":{"classes/ZapProvider.html":{}}}],["web3:ani",{"_index":53,"title":{},"body":{"classes/BaseContract.html":{}}}],["without",{"_index":471,"title":{},"body":{"classes/ZapArbiter.html":{}}}],["working_directori",{"_index":676,"title":{},"body":{"interfaces/ZapProviderType.html":{}}}],["workingdir",{"_index":905,"title":{},"body":{"miscellaneous/variables.html":{}}}],["x",{"_index":119,"title":{},"body":{"classes/Curve.html":{}}}],["x:number):numb",{"_index":200,"title":{},"body":{"classes/Curve.html":{}}}],["zap",{"_index":577,"title":{},"body":{"classes/ZapProvider.html":{},"classes/ZapToken.html":{},"index.html":{}}}],["zap/arbit",{"_index":244,"title":{},"body":{"interfaces/ProviderHandler.html":{},"classes/Subscriber.html":{},"interfaces/SubscriberHandler.html":{},"classes/ZapProvider.html":{}}}],["zap/artifact",{"_index":49,"title":{},"body":{"classes/BaseContract.html":{}}}],["zap/basecontract",{"_index":437,"title":{},"body":{"classes/ZapArbiter.html":{},"classes/ZapDispatch.html":{},"classes/ZapRegistry.html":{},"classes/ZapToken.html":{}}}],["zap/bondag",{"_index":242,"title":{},"body":{"interfaces/ProviderHandler.html":{},"classes/Subscriber.html":{},"interfaces/SubscriberHandler.html":{},"classes/ZapProvider.html":{}}}],["zap/curv",{"_index":224,"title":{},"body":{"interfaces/InitProvider.html":{},"interfaces/ProviderHandler.html":{},"classes/ZapProvider.html":{},"interfaces/ZapProviderType.html":{},"classes/ZapRegistry.html":{}}}],["zap/dispatch",{"_index":238,"title":{},"body":{"interfaces/ProviderHandler.html":{},"classes/Subscriber.html":{},"interfaces/SubscriberHandler.html":{},"classes/ZapProvider.html":{}}}],["zap/registri",{"_index":240,"title":{},"body":{"interfaces/ProviderHandler.html":{},"classes/Subscriber.html":{},"interfaces/SubscriberHandler.html":{},"classes/ZapProvider.html":{}}}],["zap/util",{"_index":51,"title":{},"body":{"classes/BaseContract.html":{},"classes/ZapArbiter.html":{},"classes/ZapDispatch.html":{},"classes/ZapRegistry.html":{},"classes/ZapToken.html":{}}}],["zap/zaptoken",{"_index":298,"title":{},"body":{"classes/Subscriber.html":{},"interfaces/SubscriberHandler.html":{}}}],["zap_contract",{"_index":854,"title":{},"body":{"dependencies.html":{}}}],["zaparbit",{"_index":243,"title":{"classes/ZapArbiter.html":{}},"body":{"interfaces/ProviderHandler.html":{},"classes/Subscriber.html":{},"interfaces/SubscriberHandler.html":{},"classes/ZapArbiter.html":{},"classes/ZapProvider.html":{},"index.html":{}}}],["zapbal",{"_index":336,"title":{},"body":{"classes/Subscriber.html":{}}}],["zapbondag",{"_index":241,"title":{},"body":{"interfaces/ProviderHandler.html":{},"classes/Subscriber.html":{},"interfaces/SubscriberHandler.html":{},"classes/ZapProvider.html":{},"index.html":{}}}],["zapcontractdirnam",{"_index":906,"title":{},"body":{"miscellaneous/variables.html":{}}}],["zapdispatch",{"_index":237,"title":{"classes/ZapDispatch.html":{}},"body":{"interfaces/ProviderHandler.html":{},"classes/Subscriber.html":{},"interfaces/SubscriberHandler.html":{},"classes/ZapDispatch.html":{},"classes/ZapProvider.html":{},"index.html":{}}}],["zapdispatch:zapdispatch",{"_index":257,"title":{},"body":{"interfaces/ProviderHandler.html":{},"interfaces/SubscriberHandler.html":{}}}],["zapnum",{"_index":211,"title":{},"body":{"interfaces/Filter.html":{},"classes/Subscriber.html":{},"interfaces/SubscriberHandler.html":{},"classes/ZapProvider.html":{},"index.html":{}}}],["zapnum:numb",{"_index":643,"title":{},"body":{"classes/ZapProvider.html":{}}}],["zapnum}:bondtype):promis",{"_index":311,"title":{},"body":{"classes/Subscriber.html":{}}}],["zapnum}:{endpoint:str",{"_index":642,"title":{},"body":{"classes/ZapProvider.html":{}}}],["zapprovid",{"_index":550,"title":{"classes/ZapProvider.html":{}},"body":{"classes/ZapProvider.html":{},"index.html":{}}}],["zapprovidertyp",{"_index":387,"title":{"interfaces/ZapProviderType.html":{}},"body":{"classes/Utils.html":{},"interfaces/ZapProviderType.html":{}}}],["zapregistri",{"_index":239,"title":{"classes/ZapRegistry.html":{}},"body":{"interfaces/ProviderHandler.html":{},"classes/Subscriber.html":{},"interfaces/SubscriberHandler.html":{},"classes/ZapProvider.html":{},"classes/ZapRegistry.html":{},"index.html":{}}}],["zaprequir",{"_index":289,"title":{},"body":{"classes/Subscriber.html":{},"index.html":{}}}],["zaptoken",{"_index":271,"title":{"classes/ZapToken.html":{}},"body":{"classes/Subscriber.html":{},"classes/ZapToken.html":{},"index.html":{}}}],["zaptoken:zaptoken",{"_index":345,"title":{},"body":{"interfaces/SubscriberHandler.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/BaseContract.html":{"url":"classes/BaseContract.html","title":"class - BaseContract","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  BaseContract\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/BaseContract/src/index.ts\n        \n\n            \n                Description\n            \n            \n                Parent Class to Dispatch, Bondage, Arbiter, Token, Registry class\nProvide access to contract instance and web3 provider instance\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                contract\n                            \n                            \n                                networkId\n                            \n                            \n                                provider\n                            \n                            \n                                web3\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getContractOwner\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(undefined: BaseContractType)\n                    \n                \n                        \n                            \n                                Defined in packages/BaseContract/src/index.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                  \n                                                        \n                                                                    BaseContractType\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            contract\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        contract:     any\n\n                    \n                \n                    \n                        \n                            Type :     any\n\n                        \n                    \n                        \n                            \n                                    Defined in packages/BaseContract/src/index.ts:14\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            networkId\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        networkId:     number\n\n                    \n                \n                    \n                        \n                            Type :     number\n\n                        \n                    \n                        \n                            \n                                    Defined in packages/BaseContract/src/index.ts:15\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            provider\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        provider:     any\n\n                    \n                \n                    \n                        \n                            Type :     any\n\n                        \n                    \n                        \n                            \n                                    Defined in packages/BaseContract/src/index.ts:12\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            web3\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        web3:     any\n\n                    \n                \n                    \n                        \n                            Type :     any\n\n                        \n                    \n                        \n                            \n                                    Defined in packages/BaseContract/src/index.ts:13\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Async\n                            getContractOwner\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        getContractOwner()\n                    \n                \n\n\n                        \n                            \n                                    Defined in packages/BaseContract/src/index.ts:49\n                            \n                        \n\n\n                \n                    \n                            Get Contract owner address\n\n\n                            \n                            \n                            \n                                Returns :     Promise\n\n                            \n                                \n                                    owner's address of this contract instance\n\n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import * as assert from \"assert\";\nconst Web3 =require('web3');\nimport {Artifacts} from \"@zap/artifacts\";\nimport {BaseContractType} from \"./types\";\nimport {Utils} from \"@zap/utils\"\n\n/**\n * Parent Class to Dispatch, Bondage, Arbiter, Token, Registry class\n * Provide access to contract instance and web3 provider instance\n */\nexport class BaseContract{\n    provider : any;\n    web3:any;\n    contract:any;\n    networkId:number;\n\n    /**\n     * @param {string | null} artifactsDir\n     * @param {string} artifactName : contract's name\n     * @param {number | null} networkId\n     * @param {any | null} networkProvider\n     */\n    constructor({artifactsDir,artifactName,networkId,networkProvider}:BaseContractType) {\n        let artifact:any = undefined;\n        try {\n          if(!artifactsDir){\n            artifact = Artifacts[artifactName];\n          }\n          else{\n            let artifacts:any = Utils.getArtifacts(artifactsDir);\n            artifact = artifacts[artifactName];\n          }\n          this.provider = networkProvider ||\n              new Web3.providers.WebsocketProvider('ws://127.0.0.1:8545');\n          //network id default to mainnet\n          this.networkId = networkId || 1;\n          this.web3 = new Web3(networkProvider);\n          this.contract = new this.web3.eth.Contract(artifact.abi,artifact.networks[this.networkId].address)\n\n        } catch (err) {\n            throw err;\n        }\n    }\n\n    /**\n     * Get Contract owner address\n     * @returns {Promise} owner's address of this contract instance\n     */\n    async getContractOwner():Promise{\n        return await this.contract.methods.owner().call().valueOf()\n    }\n}\n\nexport * from \"./types\"\n\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/BaseContractType.html":{"url":"interfaces/BaseContractType.html","title":"interface - BaseContractType","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  BaseContractType\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/BaseContract/src/types.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        artifactName\n                                \n                                \n                                            Optional\n                                        artifactsDir\n                                \n                                \n                                            Optional\n                                        contract\n                                \n                                \n                                            Optional\n                                        networkId\n                                \n                                \n                                            Optional\n                                        networkProvider\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        artifactName\n                                    \n                                \n                                \n                                    \n                                        artifactName:     string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        artifactsDir\n                                    \n                                \n                                \n                                    \n                                        artifactsDir:     string | undefined\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string | undefined\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        contract\n                                    \n                                \n                                \n                                    \n                                        contract:     any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     any\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        networkId\n                                    \n                                \n                                \n                                    \n                                        networkId:     number | undefined\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number | undefined\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        networkProvider\n                                    \n                                \n                                \n                                    \n                                        networkProvider:     any | undefined\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     any | undefined\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface BaseContractType  {\n  \tartifactsDir ?:string|undefined,\n    artifactName: string,\n    networkId?: number|undefined,\n    networkProvider?: any|undefined,\n    contract ?: any\n}\n export interface ContractType {\n     artifactsDir ?:string|undefined,\n     networkId?: number|undefined,\n     networkProvider?: any|undefined\n }\n\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ContractType.html":{"url":"interfaces/ContractType.html","title":"interface - ContractType","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ContractType\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/BaseContract/src/types.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        artifactsDir\n                                \n                                \n                                            Optional\n                                        networkId\n                                \n                                \n                                            Optional\n                                        networkProvider\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        artifactsDir\n                                    \n                                \n                                \n                                    \n                                        artifactsDir:     string | undefined\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string | undefined\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        networkId\n                                    \n                                \n                                \n                                    \n                                        networkId:     number | undefined\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number | undefined\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        networkProvider\n                                    \n                                \n                                \n                                    \n                                        networkProvider:     any | undefined\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     any | undefined\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface BaseContractType  {\n  \tartifactsDir ?:string|undefined,\n    artifactName: string,\n    networkId?: number|undefined,\n    networkProvider?: any|undefined,\n    contract ?: any\n}\n export interface ContractType {\n     artifactsDir ?:string|undefined,\n     networkId?: number|undefined,\n     networkProvider?: any|undefined\n }\n\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Curve.html":{"url":"classes/Curve.html","title":"class - Curve","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  Curve\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/Curve/src/index.ts\n        \n\n            \n                Description\n            \n            \n                Calculate Curve functions\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                constants\n                            \n                            \n                                dividers\n                            \n                            \n                                parts\n                            \n                            \n                                pieces\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                _calculatePolynomial\n                            \n                            \n                                _calculateTerm\n                            \n                            \n                                checkValidity\n                            \n                            \n                                convertToBNArrays\n                            \n                            \n                                getPrice\n                            \n                            \n                                structurize\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(constants: Array, parts: Array, dividers: Array)\n                    \n                \n                        \n                            \n                                Defined in packages/Curve/src/index.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        constants\n                                                  \n                                                        \n                                                                    Array\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                        parts\n                                                  \n                                                        \n                                                                    Array\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                        dividers\n                                                  \n                                                        \n                                                                    Array\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            constants\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        constants:     Array\n\n                    \n                \n                    \n                        \n                            Type :     Array\n\n                        \n                    \n                        \n                            \n                                    Defined in packages/Curve/src/index.ts:11\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            dividers\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        dividers:     Array\n\n                    \n                \n                    \n                        \n                            Type :     Array\n\n                        \n                    \n                        \n                            \n                                    Defined in packages/Curve/src/index.ts:13\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            parts\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        parts:     Array\n\n                    \n                \n                    \n                        \n                            Type :     Array\n\n                        \n                    \n                        \n                            \n                                    Defined in packages/Curve/src/index.ts:12\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            pieces\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        pieces:     Array\n\n                    \n                \n                    \n                        \n                            Type :     Array\n\n                        \n                    \n                        \n                            \n                                    Defined in packages/Curve/src/index.ts:14\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            _calculatePolynomial\n                            \n                            \n                        \n                    \n                \n                \n                    \n_calculatePolynomial(terms: any, x: number)\n                    \n                \n\n\n                        \n                            \n                                    Defined in packages/Curve/src/index.ts:167\n                            \n                        \n\n\n                \n                    \n                            Calculate total of terms\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        terms\n                                                        \n                                                                    any\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        x\n                                                        \n                                                                    number\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     number\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            _calculateTerm\n                            \n                            \n                        \n                    \n                \n                \n                    \n_calculateTerm(term: CurveTerm, x: number)\n                    \n                \n\n\n                        \n                            \n                                    Defined in packages/Curve/src/index.ts:122\n                            \n                        \n\n\n                \n                    \n                            Calculate a curve's term\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        term\n                                                        \n                                                                    CurveTerm\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        x\n                                                        \n                                                                    number\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     number\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            checkValidity\n                            \n                            \n                        \n                    \n                \n                \n                    \ncheckValidity()\n                    \n                \n\n\n                        \n                            \n                                    Defined in packages/Curve/src/index.ts:34\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            convertToBNArrays\n                            \n                            \n                        \n                    \n                \n                \n                    \nconvertToBNArrays()\n                    \n                \n\n\n                        \n                            \n                                    Defined in packages/Curve/src/index.ts:146\n                            \n                        \n\n\n                \n                    \n                            Convert this curve constants, parts, dividers into Array of Bignumbers\n\n\n                            \n                            \n                            \n                                Returns :     Array>\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getPrice\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetPrice(total: number)\n                    \n                \n\n\n                        \n                            \n                                    Defined in packages/Curve/src/index.ts:97\n                            \n                        \n\n\n                \n                    \n                            Get the price of a dot at a given totalBound\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        total\n                                                        \n                                                                    number\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                        \n                                                                bound dots\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     number\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            structurize\n                            \n                            \n                        \n                    \n                \n                \n                    \nstructurize()\n                    \n                \n\n\n                        \n                            \n                                    Defined in packages/Curve/src/index.ts:68\n                            \n                        \n\n\n                \n                    \n                            Turn constants, parts, dividers into curve's coef, power, fn, pieces\n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import {CurveType, CurveTerm} from \"./types\";\nconst {toHex}  = require(\"web3-utils\");\nimport {BigNumber} from 'bignumber.js'\n\n\n/**\n * Calculate Curve functions\n */\nexport class Curve {\n    /**@member */\n    constants : Array;\n    parts: Array;\n    dividers : Array;\n    pieces:Array;\n\n    /**\n     * @constructor\n     * @param {Array} constants\n     * @param {Array} parts\n     * @param {Array} dividers\n     */\n    constructor(constants:Array, parts: Array, dividers: Array) {\n        this.constants = constants;\n        this.parts = parts;\n        this.dividers = dividers;\n        this.pieces = Array();\n        this.checkValidity();\n        this.structurize();\n    }\n\n    /*\n     * Checks that the piecewise curve encoding is valid. Throws an error if not\n     */\n     checkValidity():void {\n        if(this.constants.length % 3 != 0) throw new Error(\"Invalid number of constants arguments\");\n        for(var i=0; i 1)) throw new Error(\"Unknown function encoding\");\n        }\n        if(this.parts.length / 2 != this.dividers.length) throw new Error(\"A range must be defined for each constants triplet\");\n\n        var prev = 0;\n        for(var i=0; i this.constants.length/3) throw new Error(\"Dividers refer to a non-existent piecewise term\");\n        }\n\n}\n\n\n    /**\n     * Turn constants, parts, dividers into curve's coef, power, fn, pieces\n     */\n     structurize() :void{\n        let pStart = 0;\n\n        for (let i = 0; i  0) {\n            val = Math.pow(x, term.power);\n        }\n\n        return val * term.coef;\n    }\n\n    /**\n     * Convert this curve constants, parts, dividers into Array of Bignumbers\n     * @returns {Array>}\n     */\n     convertToBNArrays():Array> {\n        let convertedConstants = this.constants.map((item: number) => {\n            return toHex(item);\n        });\n        let convertedParts = this.parts.map((item: number) => {\n            return toHex(item);\n        });\n        let convertedDividers = this.dividers.map((item: number) => {\n            return toHex(item);\n        });\n        return [convertedConstants, convertedParts, convertedDividers];\n\n    }\n\n    /**\n     * Calculate total of terms\n     * @param terms\n     * @param {number} x\n     * @returns {number}\n     * @private\n     */\n     _calculatePolynomial(terms:any, x:number):number {\n        let sum = 0;\n\n        for (let i = 0; i \n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/CurveTerm.html":{"url":"interfaces/CurveTerm.html","title":"interface - CurveTerm","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  CurveTerm\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/Curve/src/types.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        coef\n                                \n                                \n                                        fn\n                                \n                                \n                                        power\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        coef\n                                    \n                                \n                                \n                                    \n                                        coef:     number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        fn\n                                    \n                                \n                                \n                                    \n                                        fn:     number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        power\n                                    \n                                \n                                \n                                    \n                                        power:     number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface CurveType {\n  constants:number[],\n  parts : number[],\n  dividers: number[]\n}\n\nexport interface CurveTerm {\n  fn :  number,\n    power : number,\n    coef : number\n}\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/CurveType.html":{"url":"interfaces/CurveType.html","title":"interface - CurveType","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  CurveType\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/Curve/src/types.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        constants\n                                \n                                \n                                        dividers\n                                \n                                \n                                        parts\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        constants\n                                    \n                                \n                                \n                                    \n                                        constants:     number[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dividers\n                                    \n                                \n                                \n                                    \n                                        dividers:     number[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        parts\n                                    \n                                \n                                \n                                    \n                                        parts:     number[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface CurveType {\n  constants:number[],\n  parts : number[],\n  dividers: number[]\n}\n\nexport interface CurveTerm {\n  fn :  number,\n    power : number,\n    coef : number\n}\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Filter.html":{"url":"interfaces/Filter.html","title":"interface - Filter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Filter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/Bondage/src/types.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        fromBlock\n                                \n                                \n                                            Optional\n                                        provider\n                                \n                                \n                                            Optional\n                                        toBlock\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        fromBlock\n                                    \n                                \n                                \n                                    \n                                        fromBlock:     number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        provider\n                                    \n                                \n                                \n                                    \n                                        provider:     address\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     address\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        toBlock\n                                    \n                                \n                                \n                                    \n                                        toBlock:     number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export type address = string;\nexport type txid = string;\nexport type BondArgs = {\n    provider :address,\n    endpoint : string,\n    zapNum :number,\n    from : address,\n    gas ?: number\n}\n\nexport type UnbondArgs = {\n\tprovider :address,\n    endpoint : string,\n    dots :number,\n    from : address,\n    gas ?: number\n}\n\nexport type BondageArgs = {\n\tsubscriber ?: address,\n\tprovider: address,\n\tendpoint: string,\n\tdots ?: number ,\n\tzapNum ?: number\n}\nexport type CalcBondRateType = {\n    provider: address,\n    endpoint: string,\n    zapNum :number\n}\n\n\n\n\nexport interface Filter {\n    provider ?: address,\n    fromBlock ?: number,\n    toBlock ?: number\n}\nexport type listenEvent = {\n    filter ?: Filter,\n    callback: Function\n}\n\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/InitProvider.html":{"url":"interfaces/InitProvider.html","title":"interface - InitProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  InitProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/Registry/src/types.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        endpoint\n                                \n                                \n                                            Optional\n                                        endpoint_params\n                                \n                                \n                                        from\n                                \n                                \n                                            Optional\n                                        gas\n                                \n                                \n                                        public_key\n                                \n                                \n                                        title\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        endpoint\n                                    \n                                \n                                \n                                    \n                                        endpoint:     string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        endpoint_params\n                                    \n                                \n                                \n                                    \n                                        endpoint_params:     Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Array\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        from\n                                    \n                                \n                                \n                                    \n                                        from:     address\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     address\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        gas\n                                    \n                                \n                                \n                                    \n                                        gas:     BigNumber\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     BigNumber\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        public_key\n                                    \n                                \n                                \n                                    \n                                        public_key:     string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        title\n                                    \n                                \n                                \n                                    \n                                        title:     string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {CurveType} from \"@zap/curve\"\nimport BigNumber from 'bignumber.js';\n\nexport type address = string;\nexport type txid = string;\nexport interface InitProvider  {\n  public_key : string,\n  title :string,\n  endpoint: string,\n  endpoint_params ?: Array,\n  from: address,\n  gas ?: BigNumber\n}\n\n\nexport type InitCurve = {\n  endpoint:string,\n  curve:CurveType,\n  from: address,\n  gas ?: BigNumber\n}\n\n\nexport type NextEndpoint = {\n  provider:address,\n  endpoint: string,\n  index:number\n}\n\nexport type EndpointParams = {\n  endpoint:string,\n  endpoint_params: string[],\n  from: address,\n  gas ?: BigNumber\n}\nexport interface Filter  {\n  fromBlock ?: number,\n    toBlock ?: number,\n    provider ?: address\n\n}\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ProviderHandler.html":{"url":"interfaces/ProviderHandler.html","title":"interface - ProviderHandler","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ProviderHandler\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/Provider/src/types.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        handleIncoming\n                                \n                                \n                                        handleSubscription\n                                \n                                \n                                        handleUnsubscription\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        handleIncoming\n                                    \n                                \n                                \n                                    \n                                        handleIncoming:     Function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        handleSubscription\n                                    \n                                \n                                \n                                    \n                                        handleSubscription:     Function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        handleUnsubscription\n                                    \n                                \n                                \n                                    \n                                        handleUnsubscription:     Function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {CurveType} from \"@zap/curve\"\nimport {ZapDispatch} from \"@zap/dispatch\";\nimport {ZapRegistry} from \"@zap/registry\";\nimport {ZapBondage} from \"@zap/bondage\";\nimport {ZapArbiter} from \"@zap/arbiter\";\nexport type address = string;\nexport type txid = string|object;\nexport type InitProvider = {\n    public_key : string,\n    title :string,\n    endpoint: string,\n    endpoint_params ?: Array,\n    gas ?: number\n}\n\nexport type InitCurve = {\n    endpoint:string,\n    constants :number[],\n    parts: number[],\n    dividers: number[],\n    gas ?: number\n}\n\nexport type UnsubscribeListen = {\n    subscriber:address,\n    terminator : address,\n    fromBlock : number\n}\n\nexport type ListenQuery = {\n    queryId: string,\n    subscriber :address,\n    fromBlock : number\n}\n\nexport type Respond = {\n    queryId:string,\n    responseParams : string[],\n    dynamic:boolean\n}\n\nexport type ProviderConstructorType = {\n    owner:address,\n    zapDispatch:ZapDispatch,\n    zapBondage: ZapBondage,\n    zapArbiter: ZapArbiter,\n    zapRegistry: ZapRegistry,\n    handler : ProviderHandler\n}\n\nexport interface ProviderHandler{\n    handleIncoming : Function,\n    handleUnsubscription : Function,\n    handleSubscription : Function\n}\n\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ResponseArgs.html":{"url":"interfaces/ResponseArgs.html","title":"interface - ResponseArgs","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ResponseArgs\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/Dispatch/src/types.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        dynamic\n                                \n                                \n                                        from\n                                \n                                \n                                            Optional\n                                        gas\n                                \n                                \n                                        queryId\n                                \n                                \n                                        responseParams\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        dynamic\n                                    \n                                \n                                \n                                    \n                                        dynamic:     boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        from\n                                    \n                                \n                                \n                                    \n                                        from:     address\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     address\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        gas\n                                    \n                                \n                                \n                                    \n                                        gas:     BigNumber\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     BigNumber\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        queryId\n                                    \n                                \n                                \n                                    \n                                        queryId:     string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        responseParams\n                                    \n                                \n                                \n                                    \n                                        responseParams:     Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Array\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import BigNumber from 'bignumber.js';\nexport type address = string;\nexport type txid = string;\nexport type QueryArgs = {\n  provider:address,\n  endpoint: string,\n  query: string,\n  endpointParams : Array,\n  onchainProvider : boolean,\n  onchainSubscriber : boolean,\n    from:address,\n    gas: BigNumber\n}\n\nexport interface ResponseArgs {\n  queryId : string,\n  responseParams: Array,\n  dynamic : boolean,\n  from: address,\n    gas?:BigNumber\n}\n\nexport interface Filter{\n  fromBlock ?: number,\n    toBlock ?: number,\n    provider ?: address\n\n}\n\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Subscriber.html":{"url":"classes/Subscriber.html","title":"class - Subscriber","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  Subscriber\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/Subscriber/src/index.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                handler\n                            \n                            \n                                subscriberOwner\n                            \n                            \n                                zapArbiter\n                            \n                            \n                                zapBondage\n                            \n                            \n                                zapDispatch\n                            \n                            \n                                zapRegistry\n                            \n                            \n                                zapToken\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                bond\n                            \n                            \n                                    Async\n                                hasEnoughZap\n                            \n                            \n                                    Async\n                                subscribe\n                            \n                            \n                                    Async\n                                unBond\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(undefined: SubscriberConstructorType)\n                    \n                \n                        \n                            \n                                Defined in packages/Subscriber/src/index.ts:18\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                  \n                                                        \n                                                                    SubscriberConstructorType\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            handler\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        handler:     SubscriberHandler\n\n                    \n                \n                    \n                        \n                            Type :     SubscriberHandler\n\n                        \n                    \n                        \n                            \n                                    Defined in packages/Subscriber/src/index.ts:13\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            subscriberOwner\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        subscriberOwner:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                        \n                            \n                                    Defined in packages/Subscriber/src/index.ts:12\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            zapArbiter\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        zapArbiter:     ZapArbiter\n\n                    \n                \n                    \n                        \n                            Type :     ZapArbiter\n\n                        \n                    \n                        \n                            \n                                    Defined in packages/Subscriber/src/index.ts:16\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            zapBondage\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        zapBondage:     ZapBondage\n\n                    \n                \n                    \n                        \n                            Type :     ZapBondage\n\n                        \n                    \n                        \n                            \n                                    Defined in packages/Subscriber/src/index.ts:15\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            zapDispatch\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        zapDispatch:     ZapDispatch\n\n                    \n                \n                    \n                        \n                            Type :     ZapDispatch\n\n                        \n                    \n                        \n                            \n                                    Defined in packages/Subscriber/src/index.ts:14\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            zapRegistry\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        zapRegistry:     ZapRegistry\n\n                    \n                \n                    \n                        \n                            Type :     ZapRegistry\n\n                        \n                    \n                        \n                            \n                                    Defined in packages/Subscriber/src/index.ts:17\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            zapToken\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        zapToken:     ZapToken\n\n                    \n                \n                    \n                        \n                            Type :     ZapToken\n\n                        \n                    \n                        \n                            \n                                    Defined in packages/Subscriber/src/index.ts:18\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Async\n                            bond\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        bond(undefined: BondType)\n                    \n                \n\n\n                        \n                            \n                                    Defined in packages/Subscriber/src/index.ts:39\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        \n                                                                    BondType\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Promise\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Async\n                            hasEnoughZap\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        hasEnoughZap(zapRequired: number)\n                    \n                \n\n\n                        \n                            \n                                    Defined in packages/Subscriber/src/index.ts:103\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        zapRequired\n                                                        \n                                                                    number\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Promise\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Async\n                            subscribe\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        subscribe(undefined: SubscribeType)\n                    \n                \n\n\n                        \n                            \n                                    Defined in packages/Subscriber/src/index.ts:82\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        \n                                                                    SubscribeType\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Promise\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Async\n                            unBond\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        unBond(undefined: UnbondType)\n                    \n                \n\n\n                        \n                            \n                                    Defined in packages/Subscriber/src/index.ts:66\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        \n                                                                    UnbondType\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Promise\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        const assert = require('assert');\nimport {BondType,UnbondType,SubscribeType,SubscriberConstructorType,SubscriberHandler} from \"./types\";\nimport {ZapDispatch} from \"@zap/dispatch\";\nimport {ZapRegistry} from \"@zap/registry\";\nimport {ZapBondage} from \"@zap/bondage\";\nimport {ZapArbiter} from \"@zap/arbiter\";\nimport {ZapToken} from \"@zap/zaptoken\";\n\n\nexport class Subscriber  {\n    subscriberOwner:string;\n    handler : SubscriberHandler;\n    zapDispatch : ZapDispatch;\n    zapBondage : ZapBondage;\n    zapArbiter : ZapArbiter;\n    zapRegistry:  ZapRegistry;\n    zapToken: ZapToken;\n\n    constructor({owner,handler,zapToken,zapRegistry,zapDispatch,zapBondage,zapArbiter}:SubscriberConstructorType) {\n        assert(owner, 'owner address is required');\n        this.subscriberOwner = owner;\n        this.handler = handler || {};\n        this.zapToken = zapToken;\n        this.zapDispatch = zapDispatch;\n        this.zapBondage = zapBondage;\n        this.zapArbiter = zapArbiter;\n        this.zapRegistry = zapRegistry;\n    }\n\n\n    /**\n     *\n     * @param {string} provider\n     * @param {string} endpoint\n     * @param {number} zapNum\n     * @returns {Promise}\n     */\n    async bond({provider, endpoint, zapNum}:BondType):Promise{\n       // assert.ok(this.hasEnoughZap(zapNum), 'Insufficient Balance');\n        let approve = await this.zapToken.approve({\n            to: this.zapBondage.contract._address,\n            amount: zapNum, \n            from: this.subscriberOwner\n        });\n\n        //assert.ok(approve, 'fail to approve to Bondage');\n        const bonded = await this.zapBondage.bond({\n            provider: provider,\n            endpoint: endpoint,\n            zapNum: zapNum,\n            from: this.subscriberOwner\n        });\n    \n        // return bonded;\n        return bonded;\n    }\n\n    /**\n     *\n     * @param {string} provider\n     * @param {string} endpoint\n     * @param {number} dots\n     * @returns {Promise}\n     */\n    async unBond({provider, endpoint, dots}:UnbondType):Promise{\n        let boundDots = await this.zapBondage.getBoundDots({subscriber: this.subscriberOwner, provider, endpoint});\n        assert(boundDots >= dots, 'dots to unbond is less than requested');\n        let unBounded = await this.zapBondage.unbond({provider, endpoint, dots, from: this.subscriberOwner});\n        return unBounded;\n    }\n\n\n    /**\n     *\n     * @param {string} provider\n     * @param {string} endpoint\n     * @param {string[]} endpointParams\n     * @param {number} dots\n     * @returns {Promise}\n     */\n    async subscribe({provider, endpoint, endpointParams, dots}:SubscribeType):Promise {\n        let providerPubkey = await this.zapRegistry.getProviderPublicKey(provider);\n        let zapRequired = await this.zapBondage.calcZapForDots({provider, endpoint, dots});\n        let zapBalance = await this.zapToken.balanceOf(this.subscriberOwner);\n        if (zapBalance }\n     */\n    async hasEnoughZap(zapRequired:number):Promise{\n        let balance = await this.zapToken.balanceOf(this.subscriberOwner);\n        return balance > zapRequired;\n    }\n\n}\n\n\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SubscriberHandler.html":{"url":"interfaces/SubscriberHandler.html","title":"interface - SubscriberHandler","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  SubscriberHandler\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/Subscriber/src/types.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        handleResponse\n                                \n                                \n                                            Optional\n                                        handleSubscription\n                                \n                                \n                                            Optional\n                                        handleUnsubscription\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        handleResponse\n                                    \n                                \n                                \n                                    \n                                        handleResponse:     Function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        handleSubscription\n                                    \n                                \n                                \n                                    \n                                        handleSubscription:     Function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Function\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        handleUnsubscription\n                                    \n                                \n                                \n                                    \n                                        handleUnsubscription:     Function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Function\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {ZapDispatch} from \"@zap/dispatch\";\nimport{ZapToken} from '@zap/zaptoken';\nimport {ZapBondage} from \"@zap/bondage\";\nimport{ZapArbiter} from '@zap/arbiter';\nimport {ZapRegistry} from \"@zap/registry\";\n\nexport type BondType = {\n    provider:string,\n    endpoint:string,\n    zapNum :number\n}\nexport type UnbondType = {\n    provider:string,\n    endpoint:string,\n    dots :number\n}\n\nexport type SubscribeType= {\n    provider:string,\n    endpoint:string,\n    dots :number,\n    endpointParams : string[]\n}\nexport type SubscriberConstructorType = {\n  owner:string,\n  zapDispatch:ZapDispatch,\n  zapToken:ZapToken,\n  zapBondage: ZapBondage,\n  zapArbiter: ZapArbiter,\n  zapRegistry: ZapRegistry,\n  handler ?: any\n}\n\nexport interface SubscriberHandler{\n    handleResponse : Function,\n    handleUnsubscription ?: Function,\n    handleSubscription ?: Function\n}\n\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SubscriptionEnd.html":{"url":"interfaces/SubscriptionEnd.html","title":"interface - SubscriptionEnd","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  SubscriptionEnd\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/Arbiter/src/types.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        endpoint\n                                \n                                \n                                        from\n                                \n                                \n                                            Optional\n                                        gas\n                                \n                                \n                                            Optional\n                                        provider\n                                \n                                \n                                            Optional\n                                        subscriber\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        endpoint\n                                    \n                                \n                                \n                                    \n                                        endpoint:     string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        from\n                                    \n                                \n                                \n                                    \n                                        from:     address\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     address\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        gas\n                                    \n                                \n                                \n                                    \n                                        gas:     number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        provider\n                                    \n                                \n                                \n                                    \n                                        provider:     address\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     address\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        subscriber\n                                    \n                                \n                                \n                                    \n                                        subscriber:     address\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     address\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        const DEFAULT_GAS = 400000\n/** ethereum address */\nexport type address = string\nexport type txid = string\nexport interface SubscriptionInit {\n    provider:address,\n    endpoint :string,\n    endpoint_params: Array,\n    blocks : number,\n    pubkey:number,\n    from: address,\n    gas?: number\n}\n\nexport interface SubscriptionEnd {\n    provider?:address,\n    subscriber ?:address,\n    endpoint : string,\n    from: address,\n    gas?:number\n}\n\nexport interface Filter {\n    fromBlock ?: number,\n    toBlock ?: number,\n    provider ?: address,\n    subscriber ?:address,\n    terminator ?:address\n}\n\nexport interface SubscriptionType {\n    provider:address,\n    subscriber:address,\n    endpoint:string\n}\n\n\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SubscriptionInit.html":{"url":"interfaces/SubscriptionInit.html","title":"interface - SubscriptionInit","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  SubscriptionInit\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/Arbiter/src/types.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        blocks\n                                \n                                \n                                        endpoint\n                                \n                                \n                                        endpoint_params\n                                \n                                \n                                        from\n                                \n                                \n                                            Optional\n                                        gas\n                                \n                                \n                                        provider\n                                \n                                \n                                        pubkey\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        blocks\n                                    \n                                \n                                \n                                    \n                                        blocks:     number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        endpoint\n                                    \n                                \n                                \n                                    \n                                        endpoint:     string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        endpoint_params\n                                    \n                                \n                                \n                                    \n                                        endpoint_params:     Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Array\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        from\n                                    \n                                \n                                \n                                    \n                                        from:     address\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     address\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        gas\n                                    \n                                \n                                \n                                    \n                                        gas:     number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        provider\n                                    \n                                \n                                \n                                    \n                                        provider:     address\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     address\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        pubkey\n                                    \n                                \n                                \n                                    \n                                        pubkey:     number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        const DEFAULT_GAS = 400000\n/** ethereum address */\nexport type address = string\nexport type txid = string\nexport interface SubscriptionInit {\n    provider:address,\n    endpoint :string,\n    endpoint_params: Array,\n    blocks : number,\n    pubkey:number,\n    from: address,\n    gas?: number\n}\n\nexport interface SubscriptionEnd {\n    provider?:address,\n    subscriber ?:address,\n    endpoint : string,\n    from: address,\n    gas?:number\n}\n\nexport interface Filter {\n    fromBlock ?: number,\n    toBlock ?: number,\n    provider ?: address,\n    subscriber ?:address,\n    terminator ?:address\n}\n\nexport interface SubscriptionType {\n    provider:address,\n    subscriber:address,\n    endpoint:string\n}\n\n\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SubscriptionType.html":{"url":"interfaces/SubscriptionType.html","title":"interface - SubscriptionType","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  SubscriptionType\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/Arbiter/src/types.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        endpoint\n                                \n                                \n                                        provider\n                                \n                                \n                                        subscriber\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        endpoint\n                                    \n                                \n                                \n                                    \n                                        endpoint:     string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        provider\n                                    \n                                \n                                \n                                    \n                                        provider:     address\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     address\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        subscriber\n                                    \n                                \n                                \n                                    \n                                        subscriber:     address\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     address\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        const DEFAULT_GAS = 400000\n/** ethereum address */\nexport type address = string\nexport type txid = string\nexport interface SubscriptionInit {\n    provider:address,\n    endpoint :string,\n    endpoint_params: Array,\n    blocks : number,\n    pubkey:number,\n    from: address,\n    gas?: number\n}\n\nexport interface SubscriptionEnd {\n    provider?:address,\n    subscriber ?:address,\n    endpoint : string,\n    from: address,\n    gas?:number\n}\n\nexport interface Filter {\n    fromBlock ?: number,\n    toBlock ?: number,\n    provider ?: address,\n    subscriber ?:address,\n    terminator ?:address\n}\n\nexport interface SubscriptionType {\n    provider:address,\n    subscriber:address,\n    endpoint:string\n}\n\n\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Utils.html":{"url":"classes/Utils.html","title":"class - Utils","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  Utils\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/Utils/src/index.ts\n        \n\n\n\n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                clearBuild\n                            \n                            \n                                    Static\n                                Constants\n                            \n                            \n                                    Static\n                                getArtifacts\n                            \n                            \n                                    Static\n                                migrateContracts\n                            \n                            \n                                    Static\n                                startGanacheServer\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                fromZapBase\n                            \n                            \n                                    Static\n                                getHexBuffer\n                            \n                            \n                                    Static\n                                getHexString\n                            \n                            \n                                    Static\n                                normalizeProvider\n                            \n                            \n                                    Static\n                                toHex\n                            \n                            \n                                    Static\n                                toZapBase\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            clearBuild\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        clearBuild:     \n\n                    \n                \n                    \n                        \n                            Default value : clearBuild\n                        \n                    \n                        \n                            \n                                    Defined in packages/Utils/src/index.ts:107\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            Constants\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        Constants:     \n\n                    \n                \n                    \n                        \n                            Default value : require(\"./constants\")\n                        \n                    \n                        \n                            \n                                    Defined in packages/Utils/src/index.ts:109\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            getArtifacts\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        getArtifacts:     \n\n                    \n                \n                    \n                        \n                            Default value : getArtifacts\n                        \n                    \n                        \n                            \n                                    Defined in packages/Utils/src/index.ts:105\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            migrateContracts\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        migrateContracts:     \n\n                    \n                \n                    \n                        \n                            Default value : migrateContracts\n                        \n                    \n                        \n                            \n                                    Defined in packages/Utils/src/index.ts:106\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            startGanacheServer\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        startGanacheServer:     \n\n                    \n                \n                    \n                        \n                            Default value : startGanacheServer\n                        \n                    \n                        \n                            \n                                    Defined in packages/Utils/src/index.ts:108\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            fromZapBase\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        fromZapBase(num: number | string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in packages/Utils/src/index.ts:71\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        num\n                                                        \n                                                                    number | string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     number\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            getHexBuffer\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        getHexBuffer(specifier: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in packages/Utils/src/index.ts:31\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        specifier\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     any\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            getHexString\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        getHexString(str: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in packages/Utils/src/index.ts:35\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        str\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     string\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            normalizeProvider\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        normalizeProvider(provider: ZapProviderType)\n                    \n                \n\n\n                        \n                            \n                                    Defined in packages/Utils/src/index.ts:80\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        provider\n                                                        \n                                                                    ZapProviderType\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     ZapProviderType\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            toHex\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        toHex(str: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in packages/Utils/src/index.ts:18\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        str\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     string\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            toZapBase\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        toZapBase(num: number)\n                    \n                \n\n\n                        \n                            \n                                    Defined in packages/Utils/src/index.ts:62\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        num\n                                                        \n                                                                    number\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     any\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import {readdirSync} from \"fs\";\nimport {ZapProviderType} from \"./types\";\nimport {clearBuild, getArtifacts, migrateContracts, startGanacheServer} from \"./migrations\";\nconst {utf8ToHex,toBN} = require(\"web3-utils\");\nconst Web3 = require('web3');\nconst web3 = new Web3();\n\n/**\n * @class\n * Utils\n */\nexport class Utils {\n    /**\n     *\n     * @param {string} str\n     * @returns {string}\n     */\n    static toHex(str: string) {\n        let hex = '';\n        for (let i = 0; i \n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ZapArbiter.html":{"url":"classes/ZapArbiter.html","title":"class - ZapArbiter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  ZapArbiter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/Arbiter/src/index.ts\n        \n\n\n            \n                Extends\n            \n            \n                    BaseContract\n            \n\n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                contract\n                            \n                            \n                                networkId\n                            \n                            \n                                provider\n                            \n                            \n                                web3\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                endSubscriptionProvider\n                            \n                            \n                                    Async\n                                endSubscriptionSubscriber\n                            \n                            \n                                    Async\n                                getSubscription\n                            \n                            \n                                    Async\n                                initiateSubscription\n                            \n                            \n                                listen\n                            \n                            \n                                listenSubscriptionEnd\n                            \n                            \n                                listenSubscriptionStart\n                            \n                            \n                                    Async\n                                getContractOwner\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(undefined: BaseContractType)\n                    \n                \n                        \n                            \n                                Defined in packages/Arbiter/src/index.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                  \n                                                        \n                                                                    BaseContractType\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            contract\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        contract:     any\n\n                    \n                \n                    \n                        \n                            Type :     any\n\n                        \n                    \n                            \n                                \n                                    Inherited from     BaseContract\n\n                                \n                            \n                        \n                            \n                                    Defined in BaseContract:14\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            networkId\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        networkId:     number\n\n                    \n                \n                    \n                        \n                            Type :     number\n\n                        \n                    \n                            \n                                \n                                    Inherited from     BaseContract\n\n                                \n                            \n                        \n                            \n                                    Defined in BaseContract:15\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            provider\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        provider:     any\n\n                    \n                \n                    \n                        \n                            Type :     any\n\n                        \n                    \n                            \n                                \n                                    Inherited from     BaseContract\n\n                                \n                            \n                        \n                            \n                                    Defined in BaseContract:12\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            web3\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        web3:     any\n\n                    \n                \n                    \n                        \n                            Type :     any\n\n                        \n                    \n                            \n                                \n                                    Inherited from     BaseContract\n\n                                \n                            \n                        \n                            \n                                    Defined in BaseContract:13\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Async\n                            endSubscriptionProvider\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        endSubscriptionProvider(undefined: SubscriptionEnd)\n                    \n                \n\n\n                        \n                            \n                                    Defined in packages/Arbiter/src/index.ts:92\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        \n                                                                    SubscriptionEnd\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Promise\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Async\n                            endSubscriptionSubscriber\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        endSubscriptionSubscriber(undefined: SubscriptionEnd)\n                    \n                \n\n\n                        \n                            \n                                    Defined in packages/Arbiter/src/index.ts:75\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        \n                                                                    SubscriptionEnd\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Promise\n\n                            \n                                \n                                    unsubscribe txid\n\n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Async\n                            getSubscription\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        getSubscription(undefined: SubscriptionType)\n                    \n                \n\n\n                        \n                            \n                                    Defined in packages/Arbiter/src/index.ts:60\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        \n                                                                    SubscriptionType\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     {}\n\n                            \n                                \n                                    Subscription Information\n\n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Async\n                            initiateSubscription\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        initiateSubscription(undefined: SubscriptionInit)\n                    \n                \n\n\n                        \n                            \n                                    Defined in packages/Arbiter/src/index.ts:35\n                            \n                        \n\n\n                \n                    \n                            Start subscription with a provider's endpoint\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        \n                                                                    SubscriptionInit\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Promise\n\n                            \n                                \n                                    txid of initiate transaction\n\n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            listen\n                            \n                            \n                        \n                    \n                \n                \n                    \nlisten(filter: Filter, callback: Function)\n                    \n                \n\n\n                        \n                            \n                                    Defined in packages/Arbiter/src/index.ts:134\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Default value\n                                            \n                                        \n                                        \n                                                \n                                                        filter\n                                                        \n                                                                    Filter\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                        \n                                                                {}\n                                                        \n\n                                                \n                                                \n                                                        callback\n                                                        \n                                                                    Function\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                        \n                                                        \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            listenSubscriptionEnd\n                            \n                            \n                        \n                    \n                \n                \n                    \nlistenSubscriptionEnd(filters: Filter, callback: Function)\n                    \n                \n\n\n                        \n                            \n                                    Defined in packages/Arbiter/src/index.ts:106\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Default value\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        filters\n                                                        \n                                                                    Filter\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                        \n                                                                {}\n                                                        \n\n                                                        \n                                                                object\n\n                                                        \n                                                \n                                                \n                                                        callback\n                                                        \n                                                                    Function\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                        \n                                                        \n\n                                                        \n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            listenSubscriptionStart\n                            \n                            \n                        \n                    \n                \n                \n                    \nlistenSubscriptionStart(filters: Filter, callback: Function)\n                    \n                \n\n\n                        \n                            \n                                    Defined in packages/Arbiter/src/index.ts:120\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Default value\n                                            \n                                        \n                                        \n                                                \n                                                        filters\n                                                        \n                                                                    Filter\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                        \n                                                                {}\n                                                        \n\n                                                \n                                                \n                                                        callback\n                                                        \n                                                                    Function\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                        \n                                                        \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Async\n                            getContractOwner\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        getContractOwner()\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     BaseContract\n\n                                \n                            \n                        \n                            \n                                    Defined in BaseContract:49\n                            \n                        \n\n\n                \n                    \n                            Get Contract owner address\n\n\n                            \n                            \n                            \n                                Returns :     Promise\n\n                            \n                                \n                                    owner's address of this contract instance\n\n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import  {BaseContract,BaseContractType} from '@zap/basecontract';\nimport {SubscriptionInit,SubscriptionEnd,Filter,SubscriptionType,txid} from \"./types\"\nconst {toBN,utf8ToHex} = require ('web3-utils');\nimport {Utils} from \"@zap/utils\"\n\n/**\n * @class\n * Provides interface to  Arbiter contract for managing subscriptions activities\n */\nexport class ZapArbiter extends BaseContract {\n\n    /**\n     * @constructor\n     * @augments BaseContract\n     * @param {string} artifactsDir\n     * @param {string} networkId\n     * @param  networkProvider : Ethereum network provider\n     */\n    constructor({artifactsDir, networkId,networkProvider}:BaseContractType){\n        super({artifactsDir,artifactName:'Arbiter',networkId,networkProvider});\n    }\n\n\n    /**\n     *Start subscription with a provider's endpoint\n     * @param {address} provider\n     * @param {string} endpoint\n     * @param {Array} endpoint_params\n     * @param {number} blocks that subscription will last\n     * @param {number} provider's public key\n     * @param {address} from: subscriber\n     * @param {number} gas (optional)\n     * @returns {Promise} txid of initiate transaction\n     */\n    async initiateSubscription(\n        {provider, endpoint, endpoint_params, blocks, pubkey, from, gas=Utils.Constants.DEFAULT_GAS} : SubscriptionInit):Promise {\n        try {\n            for (let i in endpoint_params){\n                endpoint_params[i] = utf8ToHex(endpoint_params[i]);\n            }\n\n            return await this.contract.methods.initiateSubscription(\n                provider,\n                utf8ToHex(endpoint),\n                endpoint_params,\n                toBN(pubkey),\n                toBN(blocks)).send({from, gas});\n        } catch (err) {\n            throw err;\n        }\n    }\n\n    /**\n     * @func Get Subscription of a subscriber for a provider's endpoint\n     * @param {address} provider\n     * @param {address} subscriber\n     * @param {string} endpoint\n     * @returns {Promise} Subscription Information\n     */\n    async getSubscription({provider,subscriber,endpoint}:SubscriptionType){\n        let subscription = await this.contract.methods.getSubscription(provider,subscriber,utf8ToHex(endpoint)).call();\n        console.log(\"subscription result : \",subscription)\n         return subscription\n\n    }\n\n    /**\n     * @func Subscriber ends subscription for a provider's endpoint\n     * @param {address} provider\n     * @param {string} endpoint\n     * @param {address} from : subscriber\n     * @param {number} gas\n     * @returns {Promise} unsubscribe txid\n     */\n    async endSubscriptionSubscriber({provider, endpoint, from, gas=Utils.Constants.DEFAULT_GAS}:SubscriptionEnd) :Promise{\n        let unSubscription:any\n        unSubscription =  await this.contract.methods.endSubscriptionSubscriber(\n            provider,\n            utf8ToHex(endpoint))\n            .send({from, gas});\n        return unSubscription\n    }\n\n    /**\n     * @func Provider can end subscription of a subscriber\n     * @param {address} subscriber\n     * @param {string} endpoint\n     * @param {address} from : provider\n     * @param {number} gas\n     * @returns {Promise}\n     */\n    async endSubscriptionProvider({subscriber, endpoint, from, gas=Utils.Constants.DEFAULT_GAS}:SubscriptionEnd) :Promise{\n        let unSubscription:any;\n        unSubscription= await this.contract.methods.endSubscriptionProvider(\n            subscriber,\n            utf8ToHex(endpoint))\n            .send({from, gas});\n        return unSubscription;\n}\n\n    /**\n     *@func  Listen to unsubscribe events , with or without filters\n     * @param {Filter} filters object\n     * @param {Function} callback\n     */\n    listenSubscriptionEnd(filters:Filter={}, callback:Function):void{\n        // Specify filters and watch Incoming event\n        let filter = this.contract.events\n            .DataSubscriptionEnd(\n                filters,\n                { fromBlock: filters.fromBlock ? filters.fromBlock : 0, toBlock: 'latest' });\n        filter.watch(callback);\n    }\n\n    /**\n     * @func Listen to subscribe events, with or without filters\n     * @param {Filter} filters\n     * @param {Function} callback\n     */\n    listenSubscriptionStart(filters:Filter ={}, callback:Function):void{\n        // Specify filters and watch Incoming event\n        let filter = this.contract.events.DataPurchase(\n            filters,\n            { fromBlock: filters.fromBlock || 0, toBlock: 'latest' });\n        filter.watch(callback);\n    }\n\n\n    /**\n     * @func Listen to all Arbiter contract's events based on filters\n     * @param {Filter} filter\n     * @param {Function} callback\n     */\n    listen(filter:Filter = {},callback:Function) : void{\n        this.contract.events.allEvents({fromBlock: filter.fromBlock|| 0, toBlock: 'latest'},callback);\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ZapDispatch.html":{"url":"classes/ZapDispatch.html","title":"class - ZapDispatch","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  ZapDispatch\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/Dispatch/src/index.ts\n        \n\n            \n                Description\n            \n            \n                Provides interface to Dispatch contract\n\n            \n\n            \n                Extends\n            \n            \n                    BaseContract\n            \n\n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                contract\n                            \n                            \n                                networkId\n                            \n                            \n                                provider\n                            \n                            \n                                web3\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                listen\n                            \n                            \n                                listenFulfillQuery\n                            \n                            \n                                listenIncoming\n                            \n                            \n                                listenOffchainResponse\n                            \n                            \n                                    Async\n                                queryData\n                            \n                            \n                                    Async\n                                respond\n                            \n                            \n                                    Async\n                                getContractOwner\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(undefined: BaseContractType)\n                    \n                \n                        \n                            \n                                Defined in packages/Dispatch/src/index.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                  \n                                                        \n                                                                    BaseContractType\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            contract\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        contract:     any\n\n                    \n                \n                    \n                        \n                            Type :     any\n\n                        \n                    \n                            \n                                \n                                    Inherited from     BaseContract\n\n                                \n                            \n                        \n                            \n                                    Defined in BaseContract:14\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            networkId\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        networkId:     number\n\n                    \n                \n                    \n                        \n                            Type :     number\n\n                        \n                    \n                            \n                                \n                                    Inherited from     BaseContract\n\n                                \n                            \n                        \n                            \n                                    Defined in BaseContract:15\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            provider\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        provider:     any\n\n                    \n                \n                    \n                        \n                            Type :     any\n\n                        \n                    \n                            \n                                \n                                    Inherited from     BaseContract\n\n                                \n                            \n                        \n                            \n                                    Defined in BaseContract:12\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            web3\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        web3:     any\n\n                    \n                \n                    \n                        \n                            Type :     any\n\n                        \n                    \n                            \n                                \n                                    Inherited from     BaseContract\n\n                                \n                            \n                        \n                            \n                                    Defined in BaseContract:13\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            listen\n                            \n                            \n                        \n                    \n                \n                \n                    \nlisten(filters: Filter, callback: Function)\n                    \n                \n\n\n                        \n                            \n                                    Defined in packages/Dispatch/src/index.ts:101\n                            \n                        \n\n\n                \n                    \n                            Listen for all events with filters\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        filters\n                                                        \n                                                                    Filter\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        callback\n                                                        \n                                                                    Function\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            listenFulfillQuery\n                            \n                            \n                        \n                    \n                \n                \n                    \nlistenFulfillQuery(filters: object, callback: Function)\n                    \n                \n\n\n                        \n                            \n                                    Defined in packages/Dispatch/src/index.ts:122\n                            \n                        \n\n\n                \n                    \n                            Listen to FUlFill Query when providers respond\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Default value\n                                            \n                                        \n                                        \n                                                \n                                                        filters\n                                                        \n                                                                    object\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                        \n                                                                {}\n                                                        \n\n                                                \n                                                \n                                                        callback\n                                                        \n                                                                    Function\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                        \n                                                        \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            listenIncoming\n                            \n                            \n                        \n                    \n                \n                \n                    \nlistenIncoming(filters: object, callback: Function)\n                    \n                \n\n\n                        \n                            \n                                    Defined in packages/Dispatch/src/index.ts:113\n                            \n                        \n\n\n                \n                    \n                            Listen to Query Incoming events with filters\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Default value\n                                            \n                                        \n                                        \n                                                \n                                                        filters\n                                                        \n                                                                    object\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                        \n                                                                {}\n                                                        \n\n                                                \n                                                \n                                                        callback\n                                                        \n                                                                    Function\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                        \n                                                        \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            listenOffchainResponse\n                            \n                            \n                        \n                    \n                \n                \n                    \nlistenOffchainResponse(filters: object, callback: Function)\n                    \n                \n\n\n                        \n                            \n                                    Defined in packages/Dispatch/src/index.ts:131\n                            \n                        \n\n\n                \n                    \n                            Listen to Offchain responses from providers\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Default value\n                                            \n                                        \n                                        \n                                                \n                                                        filters\n                                                        \n                                                                    object\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                        \n                                                                {}\n                                                        \n\n                                                \n                                                \n                                                        callback\n                                                        \n                                                                    Function\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                        \n                                                        \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Async\n                            queryData\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        queryData(undefined: QueryArgs)\n                    \n                \n\n\n                        \n                            \n                                    Defined in packages/Dispatch/src/index.ts:30\n                            \n                        \n\n\n                \n                    \n                            Subscriber query data to a provider's endpoint\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        \n                                                                    QueryArgs\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Promise\n\n                            \n                                \n                                    txid of query transaction\n\n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Async\n                            respond\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        respond(undefined: ResponseArgs)\n                    \n                \n\n\n                        \n                            \n                                    Defined in packages/Dispatch/src/index.ts:55\n                            \n                        \n\n\n                \n                    \n                            Provider responds to a query it received\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        \n                                                                    ResponseArgs\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Promise\n\n                            \n                                \n                                    txid of respond method\n\n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Async\n                            getContractOwner\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        getContractOwner()\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     BaseContract\n\n                                \n                            \n                        \n                            \n                                    Defined in BaseContract:49\n                            \n                        \n\n\n                \n                    \n                            Get Contract owner address\n\n\n                            \n                            \n                            \n                                Returns :     Promise\n\n                            \n                                \n                                    owner's address of this contract instance\n\n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import {BaseContract,BaseContractType} from '@zap/basecontract';\nimport {QueryArgs,ResponseArgs,Filter,txid} from './types'\nimport {Utils} from \"@zap/utils\";\nconst {toBN,utf8ToHex} = require (\"web3-utils\");\n\n/**\n * Provides interface to Dispatch contract\n * @extends BaseContract\n * @param {string} artifactsDir\n * @param {number} networkId\n * @param networkProvider : Ethereum provider instance\n */\nexport class ZapDispatch extends BaseContract {\n    constructor({artifactsDir=undefined,networkId=undefined,networkProvider=undefined}:BaseContractType){\n        super({artifactsDir,artifactName:\"Dispatch\",networkId,networkProvider});\n    }\n\n    /**\n     * Subscriber query data to a provider's endpoint\n     * @param {address} provider\n     * @param {string} query\n     * @param {string} endpoint\n     * @param {Array} endpointParams\n     * @param {boolean} onchainProvider\n     * @param {boolean} onchainSubscriber\n     * @param {address} from\n     * @param {BigNumber} gas\n     * @returns {Promise} txid of query transaction\n     */\n    async queryData({provider, query, endpoint, endpointParams, onchainProvider, onchainSubscriber,from,gas=Utils.Constants.DEFAULT_GAS}:QueryArgs):Promise{\n        if(endpointParams.length > 0) {\n            for (let i in endpointParams) {\n                endpointParams[i] = utf8ToHex(endpointParams[i]);\n            }\n        }\n        return  await this.contract.methods.query(\n            provider,\n            query,\n            utf8ToHex(endpoint),\n            endpointParams, // endpoint-specific endpointParams\n            onchainProvider,\n            onchainSubscriber).send({from, gas});\n    }\n\n\n    /**\n     * Provider responds to a query it received\n     * @param {string} queryId\n     * @param {Array} responseParams\n     * @param {boolean} dynamic number of responses string\n     * @param {address} from : provider\n     * @param {BigNumber} gas\n     * @returns {Promise} txid of respond method\n     */\n    async respond({queryId, responseParams, dynamic, from,gas=Utils.Constants.DEFAULT_GAS}:ResponseArgs) :Promise{\n        if (dynamic){\n            return this.contract.methods.respondBytes32Array(\n                queryId,\n                responseParams).send({from,gas});\n        }\n        switch (responseParams.length) {\n            case 1: {\n                return this.contract.methods.respond1(\n                    queryId,\n                    responseParams[0]).send({ from,gas});\n            }\n            case 2: {\n                return this.contract.methods.respond2(\n                    queryId,\n                    responseParams[0],\n                    responseParams[1]).send({ from,gas });\n            }\n            case 3: {\n                return this.contract.methods.respond3(\n                    queryId,\n                    responseParams[0],\n                    responseParams[1],\n                    responseParams[2]).send({ from,gas });\n            }\n            case 4: {\n                return this.contract.methods.respond4(\n                    queryId,\n                    responseParams[0],\n                    responseParams[1],\n                    responseParams[2],\n                    responseParams[3]).send({ from,gas });\n            }\n            default: {\n                throw new Error('Invalid number of response parameters');\n            }\n        }\n    }\n\n    // === Events ===//\n\n    /**\n     * Listen for all events with filters\n     * @param {Filter} filters\n     * @param {Function} callback\n     */\n    listen(filters :Filter, callback:Function):void {\n        this.contract.events.allEvents(\n            filters,\n            { fromBlock: filters.fromBlock ? filters.fromBlock : 0, toBlock: 'latest' },\n            callback);\n    }\n\n    /**\n     * Listen to Query Incoming events with filters\n     * @param {object} filters\n     * @param {Function} callback\n     */\n    listenIncoming(filters:object ={}, callback:Function):void{\n        this.contract.events.Incoming(filters, callback);\n    }\n\n    /**\n     * Listen to FUlFill Query when providers respond\n     * @param {object} filters\n     * @param {Function} callback\n     */\n    listenFulfillQuery(filters:object={}, callback:Function):void{\n        this.contract.events.FulfillQuery(filters, callback);\n    }\n\n    /**\n     * Listen to Offchain responses from providers\n     * @param {object} filters\n     * @param {Function} callback\n     */\n    listenOffchainResponse(filters:object={}, callback:Function):void{\n        this.contract.events.OffchainResponse(filters, callback);\n    }\n\n\n\n}\n\nexport * from \"./types\"\n\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ZapProvider.html":{"url":"classes/ZapProvider.html","title":"class - ZapProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  ZapProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/Provider/src/index.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                curve\n                            \n                            \n                                handler\n                            \n                            \n                                providerOwner\n                            \n                            \n                                pubkey\n                            \n                            \n                                title\n                            \n                            \n                                zapArbiter\n                            \n                            \n                                zapBondage\n                            \n                            \n                                zapDispatch\n                            \n                            \n                                zapRegistry\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                calcDotsForZap\n                            \n                            \n                                    Async\n                                getCurve\n                            \n                            \n                                    Async\n                                getPubkey\n                            \n                            \n                                    Async\n                                getTitle\n                            \n                            \n                                    Async\n                                getZapBound\n                            \n                            \n                                    Async\n                                getZapRequired\n                            \n                            \n                                    Async\n                                initiateProvider\n                            \n                            \n                                    Async\n                                initiateProviderCurve\n                            \n                            \n                                    Async\n                                listenQueries\n                            \n                            \n                                    Async\n                                listenSubscribes\n                            \n                            \n                                    Async\n                                listenUnsubscribes\n                            \n                            \n                                    Async\n                                respond\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(undefined: ProviderConstructorType)\n                    \n                \n                        \n                            \n                                Defined in packages/Provider/src/index.ts:23\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                  \n                                                        \n                                                                    ProviderConstructorType\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            curve\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        curve:     CurveType | undefined\n\n                    \n                \n                    \n                        \n                            Type :     CurveType | undefined\n\n                        \n                    \n                        \n                            \n                                    Defined in packages/Provider/src/index.ts:21\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            handler\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        handler:     ProviderHandler\n\n                    \n                \n                    \n                        \n                            Type :     ProviderHandler\n\n                        \n                    \n                        \n                            \n                                    Defined in packages/Provider/src/index.ts:16\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            providerOwner\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        providerOwner:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                        \n                            \n                                    Defined in packages/Provider/src/index.ts:15\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            pubkey\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        pubkey:     number | string\n\n                    \n                \n                    \n                        \n                            Type :     number | string\n\n                        \n                    \n                        \n                            \n                                    Defined in packages/Provider/src/index.ts:23\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            title\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        title:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                        \n                            \n                                    Defined in packages/Provider/src/index.ts:22\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            zapArbiter\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        zapArbiter:     ZapArbiter\n\n                    \n                \n                    \n                        \n                            Type :     ZapArbiter\n\n                        \n                    \n                        \n                            \n                                    Defined in packages/Provider/src/index.ts:19\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            zapBondage\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        zapBondage:     ZapBondage\n\n                    \n                \n                    \n                        \n                            Type :     ZapBondage\n\n                        \n                    \n                        \n                            \n                                    Defined in packages/Provider/src/index.ts:18\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            zapDispatch\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        zapDispatch:     ZapDispatch\n\n                    \n                \n                    \n                        \n                            Type :     ZapDispatch\n\n                        \n                    \n                        \n                            \n                                    Defined in packages/Provider/src/index.ts:17\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            zapRegistry\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        zapRegistry:     ZapRegistry\n\n                    \n                \n                    \n                        \n                            Type :     ZapRegistry\n\n                        \n                    \n                        \n                            \n                                    Defined in packages/Provider/src/index.ts:20\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Async\n                            calcDotsForZap\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        calcDotsForZap(undefined: literal type)\n                    \n                \n\n\n                        \n                            \n                                    Defined in packages/Provider/src/index.ts:138\n                            \n                        \n\n\n                \n                    \n                            Calculate number of dots that subscriber can use for inquired number of Zap Tokens\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        \n                                                                    literal type\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Promise\n\n                            \n                                \n                                    number of dots subscriber can get\n\n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Async\n                            getCurve\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        getCurve(endpoint: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in packages/Provider/src/index.ts:102\n                            \n                        \n\n\n                \n                    \n                            Get Curve of an owned endpoint\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        endpoint\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Promise\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Async\n                            getPubkey\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        getPubkey()\n                    \n                \n\n\n                        \n                            \n                                    Defined in packages/Provider/src/index.ts:89\n                            \n                        \n\n\n                \n                    \n                            Get public key of this provider from Registry contract\n\n\n                            \n                            \n                            \n                                Returns :     Promise\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Async\n                            getTitle\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        getTitle()\n                    \n                \n\n\n                        \n                            \n                                    Defined in packages/Provider/src/index.ts:76\n                            \n                        \n\n\n                \n                    \n                            Get title of this provider from Registry contract\n\n\n                            \n                            \n                            \n                                Returns :     Promise\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Async\n                            getZapBound\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        getZapBound(endpoint: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in packages/Provider/src/index.ts:115\n                            \n                        \n\n\n                \n                    \n                            Get amount Zap bound to an owned endpoint\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        endpoint\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Promise\n\n                            \n                                \n                                    number of Zap Token bound\n\n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Async\n                            getZapRequired\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        getZapRequired(undefined: literal type)\n                    \n                \n\n\n                        \n                            \n                                    Defined in packages/Provider/src/index.ts:127\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        \n                                                                    literal type\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Promise\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Async\n                            initiateProvider\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        initiateProvider(undefined: InitProvider)\n                    \n                \n\n\n                        \n                            \n                                    Defined in packages/Provider/src/index.ts:48\n                            \n                        \n\n\n                \n                    \n                            Call ZapRegistry to create a new provider in Registry contract\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        \n                                                                    InitProvider\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Promise\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Async\n                            initiateProviderCurve\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        initiateProviderCurve(undefined: InitCurve)\n                    \n                \n\n\n                        \n                            \n                                    Defined in packages/Provider/src/index.ts:62\n                            \n                        \n\n\n                \n                    \n                            Initiate Curve for an endpoint\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        \n                                                                    InitCurve\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Promise\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Async\n                            listenQueries\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        listenQueries(undefined: ListenQuery)\n                    \n                \n\n\n                        \n                            \n                                    Defined in packages/Provider/src/index.ts:195\n                            \n                        \n\n\n                \n                    \n                            Listen to Queries events, managed by Dispatch contract\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        \n                                                                    ListenQuery\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Promise\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Async\n                            listenSubscribes\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        listenSubscribes(undefined: literal type)\n                    \n                \n\n\n                        \n                            \n                                    Defined in packages/Provider/src/index.ts:153\n                            \n                        \n\n\n                \n                    \n                            listen to new subscription events to this provider, managed by Arbiter contract\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        \n                                                                    literal type\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Promise\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Async\n                            listenUnsubscribes\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        listenUnsubscribes(undefined: UnsubscribeListen)\n                    \n                \n\n\n                        \n                            \n                                    Defined in packages/Provider/src/index.ts:174\n                            \n                        \n\n\n                \n                    \n                            Listen to unsubscription events to this provider, managed by Arbiter contract\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        \n                                                                    UnsubscribeListen\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Promise\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Async\n                            respond\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        respond(undefined: Respond)\n                    \n                \n\n\n                        \n                            \n                                    Defined in packages/Provider/src/index.ts:215\n                            \n                        \n\n\n                \n                    \n                            Respond to a query\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        \n                                                                    Respond\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Promise\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import {Provider} from \"web3/types\";\n\nconst assert = require(\"assert\");\nimport {Curve,CurveType} from \"@zap/curve\"\nimport {InitProvider, InitCurve, UnsubscribeListen, ListenQuery, Respond, ProviderConstructorType,ProviderHandler,address,txid} from \"./types\";\nimport {ZapDispatch} from \"@zap/dispatch\";\nimport {ZapRegistry} from \"@zap/registry\";\nimport {ZapBondage} from \"@zap/bondage\";\nimport {ZapArbiter} from \"@zap/arbiter\";\nconst {hexToUtf8} = require(\"web3-utils\");\nconst EventEmitter = require('events');\n\n\nexport class ZapProvider  {\n    providerOwner:string;\n    handler : ProviderHandler;\n    zapDispatch : ZapDispatch;\n    zapBondage : ZapBondage;\n    zapArbiter : ZapArbiter;\n    zapRegistry:  ZapRegistry;\n    curve : CurveType | undefined;\n    title:string;\n    pubkey:number|string\n\n    constructor({owner,handler,zapRegistry,zapDispatch,zapBondage,zapArbiter}:ProviderConstructorType) {\n        assert(owner, 'owner address is required');\n        this.providerOwner = owner;\n        this.handler = handler;\n        this.zapDispatch = zapDispatch;\n        this.zapBondage = zapBondage;\n        this.zapArbiter = zapArbiter;\n        this.zapRegistry = zapRegistry;\n        this.curve = undefined;\n        this.title = \"\";\n        this.pubkey = '';\n\n    }\n\n\n    /**\n     *Call ZapRegistry to create a new provider in Registry contract\n     * @param {string} public_key\n     * @param {string} title\n     * @param {string} endpoint\n     * @param {Array} endpoint_params\n     * @returns {Promise}\n     */\n    async initiateProvider({public_key, title, endpoint, endpoint_params}:InitProvider):Promise {\n        assert(Array.isArray(endpoint_params), 'endpointParams need to be an array');\n        return await this.zapRegistry.initiateProvider(\n            {public_key, title, endpoint, endpoint_params, from:this.providerOwner});\n    }\n\n    /**\n     * Initiate Curve for an endpoint\n     * @param {string} endpoint\n     * @param {number[]} constants\n     * @param {number[]} parts\n     * @param {number[]} dividers\n     * @returns {Promise}\n     */\n    async initiateProviderCurve({endpoint, constants, parts, dividers}: InitCurve) :Promise{\n        let curve = new Curve(constants, parts, dividers)\n        // console.log(\"converted : \", convertedConstants);\n        let txid = await this.zapRegistry.initiateProviderCurve({endpoint, curve, from: this.providerOwner});\n        assert(txid, 'fail to init curve ');\n        this.curve = new Curve(constants, parts, dividers);\n        return txid;\n\n    }\n\n    /**\n     * Get title of this provider from Registry contract\n     * @returns {Promise}\n     */\n    async getTitle():Promise {\n        let title:string;\n        if (this.title) return this.title;\n        title = await this.zapRegistry.getProviderTitle(this.providerOwner);\n        this.title = title;\n        return hexToUtf8(title);\n        }\n\n\n    /**\n     * Get public key of this provider from Registry contract\n     * @returns {Promise}\n     */\n    async getPubkey():Promise {\n            if (this.pubkey) return this.pubkey;\n            let pubkey = await this.zapRegistry.getProviderPublicKey(this.providerOwner);\n            this.pubkey = pubkey;\n            return hexToUtf8(pubkey);\n    }\n\n\n    /**\n     * Get Curve of an owned endpoint\n     * @param {string} endpoint\n     * @returns {Promise}\n     */\n    async getCurve(endpoint:string):Promise {\n        if (this.curve) return this.curve;\n        let curve = await this.zapRegistry.getProviderCurve(this.providerOwner, endpoint);\n        this.curve = curve;\n        return curve;\n    }\n\n\n    /**\n     * Get amount Zap bound to an owned endpoint\n     * @param {string} endpoint\n     * @returns {Promise} number of Zap Token bound\n     */\n    async getZapBound(endpoint:string):Promise {\n        assert(endpoint, 'endpoint required');\n        return await this.zapBondage.getZapBound({\n            provider: this.providerOwner, endpoint:endpoint});\n    }\n\n    /**\n     *\n     * @param endpoint\n     * @param dots\n     * @returns {Promise}\n     */\n    async getZapRequired({endpoint, dots}:{endpoint:string,dots:number}):Promise {\n        return await this.zapBondage.calcZapForDots({provider: this.providerOwner, endpoint, dots});\n    }\n\n\n    /**\n     * Calculate number of dots that subscriber can use for inquired number of Zap Tokens\n     * @param {string} endpoint\n     * @param {number} zapNum\n     * @returns {Promise} number of dots subscriber can get\n     */\n    async calcDotsForZap({endpoint, zapNum}:{endpoint:string, zapNum:number}): Promise {\n        let res = await this.zapBondage.calcBondRate({\n            provider: this.providerOwner,\n            endpoint,\n            zapNum});\n        return res;\n    }\n\n\n    /**\n     * listen to new subscription events to this provider, managed by Arbiter contract\n     * @param {string} subscriber\n     * @param {number} fromBlock\n     * @returns {Promise}\n     */\n    async listenSubscribes({subscriber, fromBlock}:{subscriber:string, fromBlock: number}):Promise {\n        let callback = (error:any, result:string) => {\n            if (error) {\n                console.error(error);\n            } else {\n                return this.handler.handleSubscription(result);\n            }\n        };\n\n        this.zapArbiter.listenSubscriptionStart(\n            {provider: this.providerOwner, subscriber},\n            callback);\n    }\n\n    /**\n     *Listen to unsubscription events to this provider, managed by Arbiter contract\n     * @param {string} subscriber\n     * @param {string} terminator : address that call unsubscribe, this can be subscriber or provider\n     * @param {number} fromBlock\n     * @returns {Promise}\n     */\n    async listenUnsubscribes({subscriber, terminator, fromBlock}:UnsubscribeListen) :Promise{\n        let callback = (error:Error, result:string) => {\n            if (error) {\n                console.log(error);\n            } else {\n                return this.handler.handleUnsubscription(result);\n            }\n        };\n\n        this.zapArbiter.listenSubscriptionEnd(\n            {provider: this.providerOwner, subscriber, terminator, fromBlock},\n            callback);\n    }\n\n    /**\n     * Listen to Queries events, managed by Dispatch contract\n     * @param {string} queryId\n     * @param {address} subscriber\n     * @param {number} fromBlock\n     * @returns {Promise}\n     */\n    async listenQueries({queryId, subscriber, fromBlock}:ListenQuery) :Promise {\n        let callback = (error:any, result:string) => {\n            if (error) {\n                console.error(error);\n            } else {\n                return this.handler.handleIncoming(result);\n            }\n        };\n\n        this.zapDispatch.listenIncoming({queryId, provider: this.providerOwner, subscriber, fromBlock},\n            callback);\n    }\n\n    /**\n     * Respond to a query\n     * @param {string} queryId\n     * @param {string[]} responseParams\n     * @param {boolean} dynamic number of responses or not\n     * @returns {Promise}\n     */\n    async respond({queryId, responseParams, dynamic}:Respond):Promise{\n        return await this.zapDispatch.respond({queryId, responseParams, dynamic, from: this.providerOwner});\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ZapProviderType.html":{"url":"interfaces/ZapProviderType.html","title":"interface - ZapProviderType","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ZapProviderType\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/Utils/src/types.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        curve\n                                \n                                \n                                        endpoint\n                                \n                                \n                                        endpoint_params\n                                \n                                \n                                        provider\n                                \n                                \n                                        pubkey\n                                \n                                \n                                        title\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        curve\n                                    \n                                \n                                \n                                    \n                                        curve:     Curve\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Curve\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        endpoint\n                                    \n                                \n                                \n                                    \n                                        endpoint:     string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        endpoint_params\n                                    \n                                \n                                \n                                    \n                                        endpoint_params:     Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Array\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        provider\n                                    \n                                \n                                \n                                    \n                                        provider:     string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        pubkey\n                                    \n                                \n                                \n                                    \n                                        pubkey:     number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        title\n                                    \n                                \n                                \n                                    \n                                        title:     string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {Curve} from \"@zap/curve\";\nexport type serverOptionsType = {\n    network: string ,\n    network_id: number,\n    hostname: string,\n    port: number,\n    gas: number,\n    gasPrice: number\n}\n\nexport type buildOptionsType = {\n    logger: any,\n    contracts_build_directory: string,\n    contracts_directory:string,\n    working_directory: string,\n    migrations_directory: string,\n}\n\nexport interface ZapProviderType {\n    provider: string,\n    pubkey:number,\n    title:string,\n    endpoint: string,\n    endpoint_params:Array,\n    curve: Curve\n}\n\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ZapRegistry.html":{"url":"classes/ZapRegistry.html","title":"class - ZapRegistry","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  ZapRegistry\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/Registry/src/index.ts\n        \n\n            \n                Description\n            \n            \n                Manage Providers and Curves registration\n\n            \n\n            \n                Extends\n            \n            \n                    BaseContract\n            \n\n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                contract\n                            \n                            \n                                contract\n                            \n                            \n                                networkId\n                            \n                            \n                                provider\n                            \n                            \n                                web3\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getNextEndpointParams\n                            \n                            \n                                    Async\n                                getNextProvider\n                            \n                            \n                                    Async\n                                getProviderCurve\n                            \n                            \n                                    Async\n                                getProviderPublicKey\n                            \n                            \n                                    Async\n                                getProviderTitle\n                            \n                            \n                                    Async\n                                initiateProvider\n                            \n                            \n                                    Async\n                                initiateProviderCurve\n                            \n                            \n                                    Async\n                                listen\n                            \n                            \n                                    Async\n                                listenNewCurve\n                            \n                            \n                                    Async\n                                listenNewProvider\n                            \n                            \n                                    Async\n                                setEndpointParams\n                            \n                            \n                                    Async\n                                getContractOwner\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(undefined: BaseContractType)\n                    \n                \n                        \n                            \n                                Defined in packages/Registry/src/index.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                  \n                                                        \n                                                                    BaseContractType\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            contract\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        contract:     any\n\n                    \n                \n                    \n                        \n                            Type :     any\n\n                        \n                    \n                        \n                            \n                                    Defined in packages/Registry/src/index.ts:15\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            contract\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        contract:     any\n\n                    \n                \n                    \n                        \n                            Type :     any\n\n                        \n                    \n                            \n                                \n                                    Inherited from     BaseContract\n\n                                \n                            \n                        \n                            \n                                    Defined in BaseContract:14\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            networkId\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        networkId:     number\n\n                    \n                \n                    \n                        \n                            Type :     number\n\n                        \n                    \n                            \n                                \n                                    Inherited from     BaseContract\n\n                                \n                            \n                        \n                            \n                                    Defined in BaseContract:15\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            provider\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        provider:     any\n\n                    \n                \n                    \n                        \n                            Type :     any\n\n                        \n                    \n                            \n                                \n                                    Inherited from     BaseContract\n\n                                \n                            \n                        \n                            \n                                    Defined in BaseContract:12\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            web3\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        web3:     any\n\n                    \n                \n                    \n                        \n                            Type :     any\n\n                        \n                    \n                            \n                                \n                                    Inherited from     BaseContract\n\n                                \n                            \n                        \n                            \n                                    Defined in BaseContract:13\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Async\n                            getNextEndpointParams\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        getNextEndpointParams(undefined: NextEndpoint)\n                    \n                \n\n\n                        \n                            \n                                    Defined in packages/Registry/src/index.ts:137\n                            \n                        \n\n\n                \n                    \n                            Get endpoint params at index of a provider's endpoint\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        \n                                                                    NextEndpoint\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Promise\n\n                            \n                                \n                                    endpoint's param at index\n\n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Async\n                            getNextProvider\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        getNextProvider(index: number)\n                    \n                \n\n\n                        \n                            \n                                    Defined in packages/Registry/src/index.ts:125\n                            \n                        \n\n\n                \n                    \n                            Get provider in index +1 in Registry contract\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        index\n                                                        \n                                                                    number\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                        \n                                                                of next provider\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Promise\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Async\n                            getProviderCurve\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        getProviderCurve(provider: string, endpoint: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in packages/Registry/src/index.ts:112\n                            \n                        \n\n\n                \n                    \n                            Get a provider's endpoint's curve from Registry contract\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        provider\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        endpoint\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Promise\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Async\n                            getProviderPublicKey\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        getProviderPublicKey(provider: address)\n                    \n                \n\n\n                        \n                            \n                                    Defined in packages/Registry/src/index.ts:90\n                            \n                        \n\n\n                \n                    \n                            Get a provider's public key from Registry contract\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        provider\n                                                        \n                                                                    address\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Promise\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Async\n                            getProviderTitle\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        getProviderTitle(provider: address)\n                    \n                \n\n\n                        \n                            \n                                    Defined in packages/Registry/src/index.ts:100\n                            \n                        \n\n\n                \n                    \n                            Get a provider's title from Registry contract\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        provider\n                                                        \n                                                                    address\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Promise\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Async\n                            initiateProvider\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        initiateProvider(undefined: InitProvider)\n                    \n                \n\n\n                        \n                            \n                                    Defined in packages/Registry/src/index.ts:31\n                            \n                        \n\n\n                \n                    \n                            Add a brand new provider in Registry contract, distinguished by provider's address\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        \n                                                                    InitProvider\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Promise\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Async\n                            initiateProviderCurve\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        initiateProviderCurve(undefined: InitCurve)\n                    \n                \n\n\n                        \n                            \n                                    Defined in packages/Registry/src/index.ts:52\n                            \n                        \n\n\n                \n                    \n                            Set Curve for a provider's endpoint\nCurve can only be set once per endpoint\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        \n                                                                    InitCurve\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Promise\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Async\n                            listen\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        listen(filters: Filter, callback: Function)\n                    \n                \n\n\n                        \n                            \n                                    Defined in packages/Registry/src/index.ts:156\n                            \n                        \n\n\n                \n                    \n                            Listen to all Registry contract events with filters\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Default value\n                                            \n                                        \n                                        \n                                                \n                                                        filters\n                                                        \n                                                                    Filter\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                        \n                                                                {}\n                                                        \n\n                                                \n                                                \n                                                        callback\n                                                        \n                                                                    Function\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                        \n                                                        \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Promise\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Async\n                            listenNewCurve\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        listenNewCurve(provider: address, callback: Function)\n                    \n                \n\n\n                        \n                            \n                                    Defined in packages/Registry/src/index.ts:174\n                            \n                        \n\n\n                \n                    \n                            Listen to Registry contract's events for new providers' curve\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        provider\n                                                        \n                                                                    address\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        callback\n                                                        \n                                                                    Function\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Promise\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Async\n                            listenNewProvider\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        listenNewProvider(filters: Filter, callback: Function)\n                    \n                \n\n\n                        \n                            \n                                    Defined in packages/Registry/src/index.ts:165\n                            \n                        \n\n\n                \n                    \n                            Listen to Registry contracts events for new providers\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Default value\n                                            \n                                        \n                                        \n                                                \n                                                        filters\n                                                        \n                                                                    Filter\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                        \n                                                                {}\n                                                        \n\n                                                \n                                                \n                                                        callback\n                                                        \n                                                                    Function\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                        \n                                                        \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Promise\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Async\n                            setEndpointParams\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        setEndpointParams(undefined: EndpointParams)\n                    \n                \n\n\n                        \n                            \n                                    Defined in packages/Registry/src/index.ts:78\n                            \n                        \n\n\n                \n                    \n                            Provider can set endpoint params for owned endpoint\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        \n                                                                    EndpointParams\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Promise\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Async\n                            getContractOwner\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        getContractOwner()\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     BaseContract\n\n                                \n                            \n                        \n                            \n                                    Defined in BaseContract:49\n                            \n                        \n\n\n                \n                    \n                            Get Contract owner address\n\n\n                            \n                            \n                            \n                                Returns :     Promise\n\n                            \n                                \n                                    owner's address of this contract instance\n\n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        const {toHex,utf8ToHex,toBN, hexToUtf8} = require(\"web3-utils\");\nimport {BaseContract,BaseContractType} from \"@zap/basecontract\";\nimport {Curve,CurveType} from \"@zap/curve\";\nimport {Utils} from \"@zap/utils\"\nimport {InitProvider, InitCurve, NextEndpoint, EndpointParams,txid,address,Filter} from \"./types\"\n\n/**\n * Manage Providers and Curves registration\n * @extends BaseContract\n * @param {any} artifactsDir\n * @param {any} networkId\n * @param {any} networkProvider\n */\nexport class ZapRegistry extends BaseContract {\n    contract:any;\n\n    constructor({artifactsDir=undefined,networkId=undefined,networkProvider=undefined}:BaseContractType){\n        super({artifactsDir,artifactName:\"Registry\",networkId,networkProvider});\n    }\n\n    /**\n     * Add a brand new provider in Registry contract, distinguished by provider's address\n     * @param {string} provider's public_key\n     * @param {string} provider's title\n     * @param {string} endpoint\n     * @param {Array} endpoint_params\n     * @param {address} from : provider's address\n     * @param {BigNumber} gas\n     * @returns {Promise}\n     */\n    async initiateProvider({public_key, title, endpoint, endpoint_params, from, gas=Utils.Constants.DEFAULT_GAS}:InitProvider): Promise{\n        let params:Array;\n        if(!endpoint_params) params = []\n        else params = endpoint_params.map((item:string) =>{return utf8ToHex(item)});\n        return await this.contract.methods.initiateProvider(\n            toBN(public_key),\n            utf8ToHex(title),\n            utf8ToHex(endpoint),\n            params)\n            .send({from,gas});\n    }\n\n    /**\n     * Set Curve for a provider's endpoint\n     * Curve can only be set once per endpoint\n     * @param {string} endpoint\n     * @param {CurveType} curve\n     * @param {address} from : provider\n     * @param {BigNumber} gas\n     * @returns {Promise}\n     */\n    async initiateProviderCurve({endpoint, curve, from, gas=Utils.Constants.DEFAULT_GAS}:InitCurve):Promise {\n        let convertedConstants = curve.constants.map((item:number) => {\n            return toHex(item);\n        });\n        let convertedParts = curve.parts.map((item:number)=> {\n            return toHex(item);\n        });\n        let convertedDividers = curve.dividers.map((item:number) => {\n            return toHex(item);\n        });\n        return await this.contract.methods.initiateProviderCurve(\n            utf8ToHex(endpoint),\n            convertedConstants,\n            convertedParts,\n            convertedDividers)\n            .send({from, gas});\n    }\n\n    /**\n     * Provider can set endpoint params for owned endpoint\n     * @param {string} endpoint\n     * @param {string[]} endpoint_params\n     * @param {address} from : provider\n     * @param {BigNumber} gas\n     * @returns {Promise}\n     */\n    async setEndpointParams({endpoint, endpoint_params, from, gas=Utils.Constants.DEFAULT_GAS}:EndpointParams) :Promise{\n      let params = endpoint_params ? endpoint_params.map(el =>{return utf8ToHex(el)}) : [];\n        return await this.contract.methods.setEndpointParams(\n            utf8ToHex(endpoint),\n            params).send({from, gas});\n    }\n\n    /**\n     * Get a provider's public key from Registry contract\n     * @param {address} provider\n     * @returns {Promise}\n     */\n    async getProviderPublicKey(provider:address):Promise{\n        let pubKey:string =  await this.contract.methods.getProviderPublicKey(provider).call();\n        return Number(pubKey.valueOf());\n    }\n\n    /**\n     * Get a provider's title from Registry contract\n     * @param {address} provider\n     * @returns {Promise}\n     */\n    async getProviderTitle(provider:address):Promise{\n        let title = await this.contract.methods.getProviderTitle(provider).call();\n        return hexToUtf8(title)\n    }\n\n\n    /**\n     * Get a provider's endpoint's curve from Registry contract\n     * @param {string} provider\n     * @param {string} endpoint\n     * @returns {Promise}\n     */\n    async getProviderCurve(provider:string,endpoint:string):Promise{\n        let curve =  await this.contract.methods.getProviderCurve(\n            provider,\n            utf8ToHex(endpoint)\n        ).call();\n        return new Curve(curve['0'].map((i:string)=>parseInt(i)),curve['1'].map((i:string)=>parseInt(i)),curve['2'].map((i:string)=>parseInt(i)))\n    }\n\n    /**\n     * Get provider in index +1 in Registry contract\n     * @param index of next provider\n     * @returns {Promise}\n     */\n    async getNextProvider(index:number):Promise{\n        return await this.contract.methods.getNextProvider(index).call();\n    }\n\n\n    /**\n     * Get endpoint params at index of a provider's endpoint\n     * @param {address} provider\n     * @param {string} endpoint\n     * @param {number} index\n     * @returns {Promise} endpoint's param at index\n     */\n    async getNextEndpointParams({provider, endpoint, index}:NextEndpoint):Promise{\n        let params = await  this.contract.methods.getNextEndpointParam(\n            provider,\n            utf8ToHex(endpoint),\n            toBN(index)\n        ).call();\n        let endpointParams = params.endpointParam;\n        console.log(hexToUtf8(endpointParams));\n        return hexToUtf8(endpointParams)\n    }\n\n    // ==== Events ====//\n\n    /**\n     * Listen to all Registry contract events with filters\n     * @param {Filter} filters\n     * @param {Function} callback\n     * @returns {Promise}\n     */\n    async listen(filters:Filter={}, callback:Function):Promise{\n        this.contract.events.allEvents(filters, callback);\n    }\n\n    /**\n     * Listen to Registry contracts events for new providers\n     * @param {Filter} filters\n     * @param {Promise} callback\n     */\n    async listenNewProvider(filters:Filter={}, callback:Function):Promise{\n        this.contract.events.NewProvider(filters, callback);\n    }\n\n    /**\n     * Listen to Registry contract's events for new providers' curve\n     * @param {address} provider\n     * @param {Promise} callback\n     */\n    async listenNewCurve(provider:address, callback:Function):Promise{\n        this.contract.events.NewCurve(provider, callback);\n    }\n\n}\n\nexport * from \"./types\" ;\n\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ZapToken.html":{"url":"classes/ZapToken.html","title":"class - ZapToken","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  ZapToken\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/ZapToken/src/index.ts\n        \n\n            \n                Description\n            \n            \n                ERC20 Tokens methods for Zap Tokens\n\n            \n\n            \n                Extends\n            \n            \n                    BaseContract\n            \n\n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                contract\n                            \n                            \n                                networkId\n                            \n                            \n                                provider\n                            \n                            \n                                web3\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                allocate\n                            \n                            \n                                    Async\n                                approve\n                            \n                            \n                                    Async\n                                balanceOf\n                            \n                            \n                                    Async\n                                send\n                            \n                            \n                                    Async\n                                getContractOwner\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(undefined: BaseContractType)\n                    \n                \n                        \n                            \n                                Defined in packages/ZapToken/src/index.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                  \n                                                        \n                                                                    BaseContractType\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            contract\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        contract:     any\n\n                    \n                \n                    \n                        \n                            Type :     any\n\n                        \n                    \n                            \n                                \n                                    Inherited from     BaseContract\n\n                                \n                            \n                        \n                            \n                                    Defined in BaseContract:14\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            networkId\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        networkId:     number\n\n                    \n                \n                    \n                        \n                            Type :     number\n\n                        \n                    \n                            \n                                \n                                    Inherited from     BaseContract\n\n                                \n                            \n                        \n                            \n                                    Defined in BaseContract:15\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            provider\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        provider:     any\n\n                    \n                \n                    \n                        \n                            Type :     any\n\n                        \n                    \n                            \n                                \n                                    Inherited from     BaseContract\n\n                                \n                            \n                        \n                            \n                                    Defined in BaseContract:12\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            web3\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        web3:     any\n\n                    \n                \n                    \n                        \n                            Type :     any\n\n                        \n                    \n                            \n                                \n                                    Inherited from     BaseContract\n\n                                \n                            \n                        \n                            \n                                    Defined in BaseContract:13\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Async\n                            allocate\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        allocate(undefined: TransferType)\n                    \n                \n\n\n                        \n                            \n                                    Defined in packages/ZapToken/src/index.ts:52\n                            \n                        \n\n\n                \n                    \n                            Allocate Zap Token from Zap contract owner to an address\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        \n                                                                    TransferType\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Promise\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Async\n                            approve\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        approve(undefined: TransferType)\n                    \n                \n\n\n                        \n                            \n                                    Defined in packages/ZapToken/src/index.ts:65\n                            \n                        \n\n\n                \n                    \n                            Approve Zap Token to an address\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        \n                                                                    TransferType\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Promise\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Async\n                            balanceOf\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        balanceOf(address: address)\n                    \n                \n\n\n                        \n                            \n                                    Defined in packages/ZapToken/src/index.ts:26\n                            \n                        \n\n\n                \n                    \n                            Get Zap Token balance of address\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        address\n                                                        \n                                                                    address\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Promise\n\n                            \n                                \n                                    Zap balance\n\n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Async\n                            send\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        send(undefined: TransferType)\n                    \n                \n\n\n                        \n                            \n                                    Defined in packages/ZapToken/src/index.ts:39\n                            \n                        \n\n\n                \n                    \n                            Transfer Zap Token\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        \n                                                                    TransferType\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Promise\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Async\n                            getContractOwner\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        getContractOwner()\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     BaseContract\n\n                                \n                            \n                        \n                            \n                                    Defined in BaseContract:49\n                            \n                        \n\n\n                \n                    \n                            Get Contract owner address\n\n\n                            \n                            \n                            \n                                Returns :     Promise\n\n                            \n                                \n                                    owner's address of this contract instance\n\n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import {BaseContract,BaseContractType} from \"@zap/basecontract\";\nimport {Utils} from \"@zap/utils\";\nimport {TransferType,address,txid} from \"./types\";\n\n/**\n * ERC20 Tokens methods for Zap Tokens\n * @extends BaseContract\n * @param {?string} artifactsDir\n * @param {string} artifactName\n * @param {?string} networkId\n * @param {?string} networkProvider\n\n */\nexport class ZapToken extends BaseContract {\n\n\n    constructor({artifactsDir=undefined,artifactName=undefined,networkId=undefined,networkProvider=undefined}:BaseContractType){\n        super({artifactsDir,artifactName:\"ZapToken\",networkId,networkProvider});\n    }\n\n    /**\n     * Get Zap Token balance of address\n     * @param {address} address\n     * @returns {Promise} Zap balance\n     */\n    async balanceOf(address:address) :Promise{\n        let balance = await this.contract.methods.balanceOf(address).call();\n        return Utils.fromZapBase(balance);\n    }\n\n    /**\n     * Transfer Zap Token\n     * @param {address} to\n     * @param {number} amount\n     * @param {address} from\n     * @param {number} gas\n     * @returns {Promise}\n     */\n    async send({to, amount, from,gas=Utils.Constants.DEFAULT_GAS}:TransferType) :Promise{\n        let bigAmount = Utils.toZapBase(amount);\n        return await this.contract.methods.transfer(to, bigAmount).send({from,gas});\n    }\n\n    /**\n     * Allocate Zap Token from Zap contract owner to an address\n     * @param {address} to\n     * @param {number} amount\n     * @param {address} from\n     * @param {number} gas\n     * @returns {Promise}\n     */\n    async allocate({to, amount, from,gas=Utils.Constants.DEFAULT_GAS}:TransferType):Promise {\n        let bigAmount = Utils.toZapBase(amount)\n        return await this.contract.methods.allocate(to, bigAmount).send({from,gas});\n    }\n\n    /**\n     * Approve Zap Token to an address\n     * @param {address} to\n     * @param {number} amount\n     * @param {address} from\n     * @param {number} gas\n     * @returns {Promise}\n     */\n    async approve({to, amount, from, gas=Utils.Constants.DEFAULT_GAS}:TransferType):Promise {\n        const success = await this.contract.methods.approve(to, amount).send({from,gas});\n        if (!success) {\n            throw new Error('Failed to approve Bondage transfer');\n        }\n        return success;\n    }\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @compodoc/compodoc : ^1.1.3\n        \n            @types/chai : ^4.1.4\n        \n            @types/mocha : ^5.2.4\n        \n            bignumber.js : ^7.2.1\n        \n            chai : ^4.1.2\n        \n            chai-as-promised : ^7.1.1\n        \n            chai-bignumber : ^2.0.2\n        \n            documentation : ^8.0.1\n        \n            ganache-core : ^2.1.5\n        \n            mocha : ^5.2.0\n        \n            npm-run-all : ^4.1.3\n        \n            path : ^0.12.7\n        \n            require-all : ^3.0.0\n        \n            truffle-artifactor : ^3.0.7\n        \n            truffle-migrate : ^2.0.8\n        \n            truffle-resolver : ^4.0.4\n        \n            ts-node : ^7.0.0\n        \n            tslint : ^5.10.0\n        \n            type2docfx : ^0.9.100\n        \n            typedoc : ^0.11.1\n        \n            typedoc-clarity-theme : ^1.1.0\n        \n            typedoc-markdown-theme : 0.0.4\n        \n            typescript : ^2.9.2\n        \n            typescript-docs : ^1.0.1\n        \n            web3 : ^1.0.0-beta.34\n        \n            web3-utils : ^1.0.0-beta.34\n        \n            zap_contracts : git+https://github.com/zapproject/zap-ethereum-api.git\n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            getArtifacts   (packages/.../index.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    packages/Artifacts/src/index.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            getArtifacts\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetArtifacts()\n                    \n                \n\n\n\n\n                \n                    \n                            Get Artifacts in this package\n\n\n                            \n                            \n                    \n                \n            \n        \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\nTable of Contents\n\nBaseContract\nParameters\ngetContractOwner\n\n\nZapArbiter\nParameters\ninitiateSubscription\ngetSubscription\nendSubscriptionSubscriber\nendSubscriptionProvider\nlistenSubscriptionEnd\nlistenSubscriptionStart\nlisten\n\n\ngetArtifacts\nZapBondage\nParameters\nbond\nunbond\ngetBoundDots\ncalcZapForDots\ncalcBondRate\ncurrentCostOfDot\ngetDotsIssued\ngetZapBound\nlisten\nlistenBound\nlistenUnbound\nlistenEscrowed\nlistenReleased\n\n\nCurve\nstructurize\ngetPrice\nconvertToBNArrays\n\n\nZapDispatch\nParameters\nqueryData\nrespond\nlisten\nlistenIncoming\nlistenFulfillQuery\nlistenOffchainResponse\n\n\nZapProvider\ninitiateProvider\ninitiateProviderCurve\ngetTitle\ngetPubkey\ngetCurve\ngetZapBound\ngetZapRequired\ncalcDotsForZap\nlistenSubscribes\nlistenUnsubscribes\nlistenQueries\nrespond\n\n\nZapRegistry\nParameters\ninitiateProvider\ninitiateProviderCurve\nsetEndpointParams\ngetProviderPublicKey\ngetProviderTitle\ngetProviderCurve\ngetNextProvider\ngetNextEndpointParams\nlisten\nlistenNewProvider\nlistenNewCurve\n\n\nSubscriber\nbond\nunBond\nsubscribe\nhasEnoughZap\n\n\nZapToken\nParameters\nbalanceOf\nsend\nallocate\napprove\n\n\n\nBaseContract\nParent Class to Dispatch, Bondage, Arbiter, Token, Registry class\nProvide access to contract instance and web3 provider instance\nParameters\n\nartifactsDir (string | null) \nartifactName string \nnetworkId (number | null) \nnetworkProvider (any | null) : Ethereum network provider\n\ngetContractOwner\nGet Contract owner address\nReturns Promisestring> owner's address of this contract instance\nReturns Promisestring> owner's address of this contract instance\nZapArbiter\nExtends BaseContract\nProvides interface to  Arbiter contract for managing subscriptions activities\nParameters\n\n_a  \nartifactsDir string \nnetworkId string \nnetworkProvider  : Ethereum network provider\n\ninitiateSubscription\nStart subscription with a provider's endpoint\nParameters\n\n_a  \nprovider address \nendpoint string \nendpoint_params Arraystring> \nblocks number that subscription will last\nprovider number 's public key\nfrom address : subscriber\ngas number (optional)\n\nReturns Promise txid of init transaction\ngetSubscription\nParameters\n\n_a  \nprovider address \nsubscriber address \nendpoint string \n\nReturns Promisestring> Subscription Information\nendSubscriptionSubscriber\nParameters\n\n_a  \nprovider address \nendpoint string \nfrom address : subscriber\ngas number \n\nReturns Promise unsubscribe txid\nendSubscriptionProvider\nParameters\n\n_a  \nsubscriber address \nendpoint string \nfrom address : provider\ngas number \n\nReturns Promise \nlistenSubscriptionEnd\nParameters\n\nfilters Filter object\ncallback Function \n\nlistenSubscriptionStart\nParameters\n\nfilters Filter \ncallback Function \n\nlisten\nParameters\n\nfilter Filter \ncallback Function \n\ngetArtifacts\nGet Artifacts in this package\nReturns any Artifacts\nZapBondage\nExtends BaseContract\nManage bondage activities\nParameters\n\nartifactsDir any \nartifactName any \nnetworkId any \nnetworkProvider any \n\nbond\nBond number of Zap Token from a subscriber to a provider's endpoint,\nthis requires approved Zap Token from subscriber to Bondage contract\nParameters\n\n_a  \nprovider address \nendpoint string \nzapNum number :  number of Zap Token to bond\nfrom address : subscriber\ngas number \n\nReturns Promise \nunbond\nUnbond number of dots from a subscriber to a provider's endpoint\nParameters\n\n_a  \nprovider address \nendpoint string \ndots number \nfrom address : subscriber\ngas number \n\nReturns Promise \ngetBoundDots\nGet number of dots that are bounded to a provider's endpoint for a subscriber\nParameters\n\n_a  \nsubscriber address \nprovider address \nendpoint string \n\nReturns Promisenumber> : number of bound dots\ncalcZapForDots\nCalculate Zap required to bond number of dots to a provider's endpoint\nParameters\n\n_a  \nprovider address \nendpoint string \ndots number : number of dots that subscriber wants to use\n\nReturns Promisenumber> : number of Zap required to bond to use inquired dots\ncalcBondRate\nCalculate Bond's rate for a provider's endpoint\nParameters\n\n_a  \nprovider address \nendpoint string \ninquired number zapNum to see how many dots can subscriber get\n\nReturns Promisenumber> :  number of dots that can be used with inquired Zap Tokens\ncurrentCostOfDot\nGet Zap Token cost of next inquired dots\nParameters\n\n_a  \nprovider address \nendpoint string \ndots number : dots that subscriber want to use\n\nReturns Promisenumber> : Price of inquired dots\ngetDotsIssued\nGet the amount of dots that have been issued for a provider's endpoint\nParameters\n\n_a  \nprovider address \nendpoint string \n\nReturns Promisenumber> : number of issued dots\ngetZapBound\nGet amount of Zap tokens that are bound to a provider's endpoint\nParameters\n\n_a  \nprovider address \nendpoint string \n\nReturns Promisenumber> number of bound Zap tokens\nlisten\nListen to all Bondage contract's events with optional filters\nParameters\n\nfilters Filter? \ncallback Function \n\nlistenBound\nListen to Bonding events\nParameters\n\nfilters Filter? \ncallback Function \n\nlistenUnbound\nListen to Unbonding events\nParameters\n\nfilters Filter \ncallback Function \n\nlistenEscrowed\nListen to Escrow events\nParameters\n\nfilters Filter \ncallback Function \n\nlistenReleased\nListen to Release Bound Zap Tokens events\nParameters\n\nfilters Filter \ncallback Function \n\nCurve\nstructurize\nTurn constants, parts, dividers into curve's coef, power, fn, pieces\ngetPrice\nGet the price of a dot at a given totalBound\nParameters\n\ntotal number bound dots\n\nReturns number \nconvertToBNArrays\nConvert this curve constants, parts, dividers into Array of Bignumbers\nReturns ArrayArray> \nZapDispatch\nExtends BaseContract\nProvides interface to Dispatch contract\nParameters\n\nartifactsDir string \nnetworkId number \nnetworkProvider  : Ethereum provider instance\n\nqueryData\nSubscriber query data to a provider's endpoint\nParameters\n\n_a  \nprovider address \nquery string \nendpoint string \nendpointParams Arraystring> \nonchainProvider boolean \nonchainSubscriber boolean \nfrom address \ngas BigNumber \n\nReturns Promise txid of query transaction\nrespond\nProvider responds to a query it received\nParameters\n\n_a  \nqueryId string \nresponseParams Arraystring> \ndynamic boolean number of responses string\nfrom address : provider\ngas BigNumber \n\nReturns Promise txid of respond method\nlisten\nListen for all events with filters\nParameters\n\nfilters Filter \ncallback Function \n\nlistenIncoming\nListen to Query Incoming events with filters\nParameters\n\nfilters object \ncallback Function \n\nlistenFulfillQuery\nListen to FUlFill Query when providers respond\nParameters\n\nfilters object \ncallback Function \n\nlistenOffchainResponse\nListen to Offchain responses from providers\nParameters\n\nfilters object \ncallback Function \n\nZapProvider\ninitiateProvider\nCall ZapRegistry to create a new provider in Registry contract\nParameters\n\n_a  \npublic_key string \ntitle string \nendpoint string \nendpoint_params Arraystring> \n\nReturns Promise \ninitiateProviderCurve\nInitiate Curve for an endpoint\nParameters\n\n_a  \nendpoint string \nconstants Arraynumber> \nparts Arraynumber> \ndividers Arraynumber> \n\nReturns Promise \ngetTitle\nGet title of this provider from Registry contract\nReturns Promisestring> \ngetPubkey\nGet public key of this provider from Registry contract\nReturns Promisestring> \ngetCurve\nGet Curve of an owned endpoint\nParameters\n\nendpoint string \n\nReturns Promise \ngetZapBound\nGet amount Zap bound to an owned endpoint\nParameters\n\nendpoint string \n\nReturns Promisenumber> number of Zap Token bound\ngetZapRequired\nParameters\n\n_a  \nendpoint  \ndots  \n\nReturns Promisenumber> \ncalcDotsForZap\nCalculate number of dots that subscriber can use for inquired number of Zap Tokens\nParameters\n\n_a  \nendpoint string \nzapNum number \n\nReturns Promisenumber> number of dots subscriber can get\nlistenSubscribes\nlisten to new subscription events to this provider, managed by Arbiter contract\nParameters\n\n_a  \nsubscriber string \nfromBlock number \n\nReturns Promise \nlistenUnsubscribes\nListen to unsubscription events to this provider, managed by Arbiter contract\nParameters\n\n_a  \nsubscriber string \nterminator string : address that call unsubscribe, this can be subscriber or provider\nfromBlock number \n\nReturns Promise \nlistenQueries\nListen to Queries events, managed by Dispatch contract\nParameters\n\n_a  \nqueryId string \nsubscriber address \nfromBlock number \n\nReturns Promise \nrespond\nRespond to a query\nParameters\n\n_a  \nqueryId string \nresponseParams Arraystring> \ndynamic boolean number of responses or not\n\nReturns Promise \nZapRegistry\nExtends BaseContract\nManage Providers and Curves registration\nParameters\n\nartifactsDir any \nnetworkId any \nnetworkProvider any \n\ninitiateProvider\nAdd a brand new provider in Registry contract, distinguished by provider's address\nParameters\n\n_a  \nprovider string 's public_key\nprovider string 's title\nendpoint string \nendpoint_params Arraystring> \nfrom address : provider's address\ngas BigNumber \n\nReturns Promise \ninitiateProviderCurve\nSet Curve for a provider's endpoint\nCurve can only be set once per endpoint\nParameters\n\n_a  \nendpoint string \ncurve CurveType \nfrom address : provider\ngas BigNumber \n\nReturns Promise \nsetEndpointParams\nProvider can set endpoint params for owned endpoint\nParameters\n\n_a  \nendpoint string \nendpoint_params Arraystring> \nfrom address : provider\ngas BigNumber \n\nReturns Promise \ngetProviderPublicKey\nGet a provider's public key from Registry contract\nParameters\n\nprovider address \n\nReturns Promisenumber> \ngetProviderTitle\nGet a provider's title from Registry contract\nParameters\n\nprovider address \n\nReturns Promisestring> \ngetProviderCurve\nGet a provider's endpoint's curve from Registry contract\nParameters\n\nprovider string \nendpoint string \n\nReturns Promise \ngetNextProvider\nGet provider in index +1 in Registry contract\nParameters\n\nindex  of next provider\n\nReturns Promise \ngetNextEndpointParams\nGet endpoint params at index of a provider's endpoint\nParameters\n\n_a  \nprovider address \nendpoint string \nindex number \n\nReturns Promisestring> endpoint's param at index\nlisten\nListen to all Registry contract events with filters\nParameters\n\nfilters Filter \ncallback Function \n\nReturns Promise \nlistenNewProvider\nListen to Registry contracts events for new providers\nParameters\n\nfilters Filter \ncallback Promise \n\nlistenNewCurve\nListen to Registry contract's events for new providers' curve\nParameters\n\nprovider address \ncallback Promise \n\nSubscriber\nbond\nParameters\n\n_a  \nprovider string \nendpoint string \nzapNum number \n\nReturns Promise \nunBond\nParameters\n\n_a  \nprovider string \nendpoint string \ndots number \n\nReturns Promise \nsubscribe\nParameters\n\n_a  \nprovider string \nendpoint string \nendpointParams Arraystring> \ndots number \n\nReturns Promise \nhasEnoughZap\nParameters\n\nzapRequired number \n\nReturns Promiseboolean> \nZapToken\nExtends BaseContract\nERC20 Tokens methods for Zap Tokens\nParameters\n\nartifactsDir string? \nartifactName string \nnetworkId string? \nnetworkProvider string? \n\nbalanceOf\nGet Zap Token balance of address\nParameters\n\naddress address \n\nReturns Promisenumber> Zap balance\nsend\nTransfer Zap Token\nParameters\n\n_a  \nto address \namount number \nfrom address \ngas number \n\nReturns Promise \nallocate\nAllocate Zap Token from Zap contract owner to an address\nParameters\n\n_a  \nto address \namount number \nfrom address \ngas number \n\nReturns Promise \napprove\nApprove Zap Token to an address\nParameters\n\n_a  \nto address \namount number \nfrom address \ngas number \n\nReturns Promise \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n\n    \n            \n                \n                    \n                        \n                        10 classes\n                    \n                \n            \n            \n                \n                    \n                        \n                        16 interfaces\n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            address   (packages/.../types.ts)\n                        \n                        \n                            address   (packages/.../types.ts)\n                        \n                        \n                            address   (packages/.../types.ts)\n                        \n                        \n                            address   (packages/.../types.ts)\n                        \n                        \n                            address   (packages/.../types.ts)\n                        \n                        \n                            address   (packages/.../types.ts)\n                        \n                        \n                            BondageArgs   (packages/.../types.ts)\n                        \n                        \n                            BondArgs   (packages/.../types.ts)\n                        \n                        \n                            BondType   (packages/.../types.ts)\n                        \n                        \n                            buildOptionsType   (packages/.../types.ts)\n                        \n                        \n                            CalcBondRateType   (packages/.../types.ts)\n                        \n                        \n                            EndpointParams   (packages/.../types.ts)\n                        \n                        \n                            InitCurve   (packages/.../types.ts)\n                        \n                        \n                            InitCurve   (packages/.../types.ts)\n                        \n                        \n                            InitProvider   (packages/.../types.ts)\n                        \n                        \n                            listenEvent   (packages/.../types.ts)\n                        \n                        \n                            ListenQuery   (packages/.../types.ts)\n                        \n                        \n                            NextEndpoint   (packages/.../types.ts)\n                        \n                        \n                            ProviderConstructorType   (packages/.../types.ts)\n                        \n                        \n                            QueryArgs   (packages/.../types.ts)\n                        \n                        \n                            Respond   (packages/.../types.ts)\n                        \n                        \n                            serverOptionsType   (packages/.../types.ts)\n                        \n                        \n                            SubscriberConstructorType   (packages/.../types.ts)\n                        \n                        \n                            SubscribeType   (packages/.../types.ts)\n                        \n                        \n                            TransferType   (packages/.../types.ts)\n                        \n                        \n                            txid   (packages/.../types.ts)\n                        \n                        \n                            txid   (packages/.../types.ts)\n                        \n                        \n                            txid   (packages/.../types.ts)\n                        \n                        \n                            txid   (packages/.../types.ts)\n                        \n                        \n                            txid   (packages/.../types.ts)\n                        \n                        \n                            txid   (packages/.../types.ts)\n                        \n                        \n                            UnbondArgs   (packages/.../types.ts)\n                        \n                        \n                            UnbondType   (packages/.../types.ts)\n                        \n                        \n                            UnsubscribeListen   (packages/.../types.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    packages/Registry/src/types.ts\n    \n        \n            \n                \n                    \n                        \n                        address\n                    \n                \n                \n                    \n                        address:     string\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        EndpointParams\n                    \n                \n                \n                    \n                        EndpointParams:     literal type\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        InitCurve\n                    \n                \n                \n                    \n                        InitCurve:     literal type\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        NextEndpoint\n                    \n                \n                \n                    \n                        NextEndpoint:     literal type\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        txid\n                    \n                \n                \n                    \n                        txid:     string\n\n                    \n                \n            \n        \n\n    packages/Bondage/src/types.ts\n    \n        \n            \n                \n                    \n                        \n                        address\n                    \n                \n                \n                    \n                        address:     string\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        BondageArgs\n                    \n                \n                \n                    \n                        BondageArgs:     literal type\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        BondArgs\n                    \n                \n                \n                    \n                        BondArgs:     literal type\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        CalcBondRateType\n                    \n                \n                \n                    \n                        CalcBondRateType:     literal type\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        listenEvent\n                    \n                \n                \n                    \n                        listenEvent:     literal type\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        txid\n                    \n                \n                \n                    \n                        txid:     string\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        UnbondArgs\n                    \n                \n                \n                    \n                        UnbondArgs:     literal type\n\n                    \n                \n            \n        \n\n    packages/ZapToken/src/types.ts\n    \n        \n            \n                \n                    \n                        \n                        address\n                    \n                \n                \n                    \n                        address:     string\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        TransferType\n                    \n                \n                \n                    \n                        TransferType:     literal type\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        txid\n                    \n                \n                \n                    \n                        txid:     string | object\n\n                    \n                \n            \n        \n\n    packages/Dispatch/src/types.ts\n    \n        \n            \n                \n                    \n                        \n                        address\n                    \n                \n                \n                    \n                        address:     string\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        QueryArgs\n                    \n                \n                \n                    \n                        QueryArgs:     literal type\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        txid\n                    \n                \n                \n                    \n                        txid:     string\n\n                    \n                \n            \n        \n\n    packages/Provider/src/types.ts\n    \n        \n            \n                \n                    \n                        \n                        address\n                    \n                \n                \n                    \n                        address:     string\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        InitCurve\n                    \n                \n                \n                    \n                        InitCurve:     literal type\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        InitProvider\n                    \n                \n                \n                    \n                        InitProvider:     literal type\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        ListenQuery\n                    \n                \n                \n                    \n                        ListenQuery:     literal type\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        ProviderConstructorType\n                    \n                \n                \n                    \n                        ProviderConstructorType:     literal type\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        Respond\n                    \n                \n                \n                    \n                        Respond:     literal type\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        txid\n                    \n                \n                \n                    \n                        txid:     string | object\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        UnsubscribeListen\n                    \n                \n                \n                    \n                        UnsubscribeListen:     literal type\n\n                    \n                \n            \n        \n\n    packages/Arbiter/src/types.ts\n    \n        \n            \n                \n                    \n                        \n                        address\n                    \n                \n                    \n                        \n                            ethereum address \n\n                        \n                    \n                \n                    \n                        address:     string\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        txid\n                    \n                \n                \n                    \n                        txid:     string\n\n                    \n                \n            \n        \n\n    packages/Subscriber/src/types.ts\n    \n        \n            \n                \n                    \n                        \n                        BondType\n                    \n                \n                \n                    \n                        BondType:     literal type\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        SubscriberConstructorType\n                    \n                \n                \n                    \n                        SubscriberConstructorType:     literal type\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        SubscribeType\n                    \n                \n                \n                    \n                        SubscribeType:     literal type\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        UnbondType\n                    \n                \n                \n                    \n                        UnbondType:     literal type\n\n                    \n                \n            \n        \n\n    packages/Utils/src/types.ts\n    \n        \n            \n                \n                    \n                        \n                        buildOptionsType\n                    \n                \n                \n                    \n                        buildOptionsType:     literal type\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        serverOptionsType\n                    \n                \n                \n                    \n                        serverOptionsType:     literal type\n\n                    \n                \n            \n        \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            Artifacts   (packages/.../index.ts)\n                        \n                        \n                            assert   (packages/.../index.ts)\n                        \n                        \n                            assert   (packages/.../index.ts)\n                        \n                        \n                            assert   (packages/.../index.ts)\n                        \n                        \n                            asyncMigrate   (packages/.../index.ts)\n                        \n                        \n                            contractsDir   (packages/.../constants.ts)\n                        \n                        \n                            DEFAULT_GAS   (packages/.../constants.ts)\n                        \n                        \n                            DEFAULT_GAS   (packages/.../types.ts)\n                        \n                        \n                            EventEmitter   (packages/.../index.ts)\n                        \n                        \n                            ganacheProvider   (packages/.../constants.ts)\n                        \n                        \n                            GAS_PRICE   (packages/.../constants.ts)\n                        \n                        \n                            migrate   (packages/.../constants.ts)\n                        \n                        \n                            migrationDir   (packages/.../constants.ts)\n                        \n                        \n                            requireAll   (packages/.../constants.ts)\n                        \n                        \n                               (packages/.../constants.ts)\n                        \n                        \n                            NETWORK   (packages/.../constants.ts)\n                        \n                        \n                               (packages/.../index.ts)\n                        \n                        \n                               (packages/.../index.ts)\n                        \n                        \n                               (packages/.../index.ts)\n                        \n                        \n                               (packages/.../index.ts)\n                        \n                        \n                               (packages/.../index.ts)\n                        \n                        \n                               (packages/.../index.ts)\n                        \n                        \n                               (packages/.../index.ts)\n                        \n                        \n                               (packages/.../index.ts)\n                        \n                        \n                               (packages/.../index.ts)\n                        \n                        \n                               (packages/.../index.ts)\n                        \n                        \n                            web3   (packages/.../index.ts)\n                        \n                        \n                            Web3   (packages/.../index.ts)\n                        \n                        \n                            Web3   (packages/.../constants.ts)\n                        \n                        \n                            Web3   (packages/.../index.ts)\n                        \n                        \n                            workingDir   (packages/.../constants.ts)\n                        \n                        \n                            zapContractDirName   (packages/.../constants.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    packages/Artifacts/src/index.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            Artifacts\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        Artifacts:     any\n\n                    \n                \n                    \n                        \n                            Type :     any\n\n                        \n                    \n                    \n                        \n                            Default value : getArtifacts()\n                        \n                    \n\n\n            \n        \n\n    packages/Bondage/src/index.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            assert\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        assert:     \n\n                    \n                \n                    \n                        \n                            Default value : require(\"assert\")\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            \n                            \n                            \n                        \n                    \n                \n                \n                    \n                        :     \n\n                    \n                \n                    \n                        \n                            Default value : require(\"web3-utils\")\n                        \n                    \n\n\n            \n        \n\n    packages/Provider/src/index.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            assert\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        assert:     \n\n                    \n                \n                    \n                        \n                            Default value : require(\"assert\")\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            EventEmitter\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        EventEmitter:     \n\n                    \n                \n                    \n                        \n                            Default value : require('events')\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            \n                            \n                            \n                        \n                    \n                \n                \n                    \n                        :     \n\n                    \n                \n                    \n                        \n                            Default value : require(\"web3-utils\")\n                        \n                    \n\n\n            \n        \n\n    packages/Subscriber/src/index.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            assert\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        assert:     \n\n                    \n                \n                    \n                        \n                            Default value : require('assert')\n                        \n                    \n\n\n            \n        \n\n    packages/Utils/src/migrations/index.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            asyncMigrate\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        asyncMigrate:     \n\n                    \n                \n                    \n                        \n                            Default value : promisify(migrate.run)\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            \n                            \n                            \n                        \n                    \n                \n                \n                    \n                        :     \n\n                    \n                \n                    \n                        \n                            Default value : require('ganache-core')\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            \n                            \n                            \n                        \n                    \n                \n                \n                    \n                        :     \n\n                    \n                \n                    \n                        \n                            Default value : require('fs')\n                        \n                    \n\n\n            \n        \n\n    packages/Utils/src/constants.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            contractsDir\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        contractsDir:     \n\n                    \n                \n                    \n                        \n                            Default value : join(zapContractDirName,\"contracts\")\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            DEFAULT_GAS\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        DEFAULT_GAS:     number\n\n                    \n                \n                    \n                        \n                            Type :     number\n\n                        \n                    \n                    \n                        \n                            Default value : 6000000\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            ganacheProvider\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        ganacheProvider:     \n\n                    \n                \n                    \n                        \n                            Default value : new Web3.providers.HttpProvider('http://127.0.0.1:7545')\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            GAS_PRICE\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        GAS_PRICE:     number\n\n                    \n                \n                    \n                        \n                            Type :     number\n\n                        \n                    \n                    \n                        \n                            Default value : 40000000\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            migrate\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        migrate:     \n\n                    \n                \n                    \n                        \n                            Default value : require(\"truffle-core/lib/commands/migrate.js\")\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            migrationDir\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        migrationDir:     \n\n                    \n                \n                    \n                        \n                            Default value : join(zapContractDirName,\"migrations\")\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            requireAll\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        requireAll:     \n\n                    \n                \n                    \n                        \n                            Default value : require(\"require-all\")\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            \n                            \n                            \n                        \n                    \n                \n                \n                    \n                        :     \n\n                    \n                \n                    \n                        \n                            Default value : require('ganache-core')\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            NETWORK\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        NETWORK:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                    \n                        \n                            Default value : \"ganache-gui\"\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            Web3\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        Web3:     \n\n                    \n                \n                    \n                        \n                            Default value : require('web3')\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            workingDir\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        workingDir:     \n\n                    \n                \n                    \n                        \n                            Default value : zapContractDirName\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            zapContractDirName\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        zapContractDirName:     \n\n                    \n                \n                    \n                        \n                            Default value : dirname(require.resolve(\"zap_contracts/truffle-config.js\"))\n                        \n                    \n\n\n            \n        \n\n    packages/Arbiter/src/types.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            DEFAULT_GAS\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        DEFAULT_GAS:     number\n\n                    \n                \n                    \n                        \n                            Type :     number\n\n                        \n                    \n                    \n                        \n                            Default value : 400000\n                        \n                    \n\n\n            \n        \n\n    packages/Arbiter/src/index.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            \n                            \n                            \n                        \n                    \n                \n                \n                    \n                        :     \n\n                    \n                \n                    \n                        \n                            Default value : require ('web3-utils')\n                        \n                    \n\n\n            \n        \n\n    packages/Registry/src/index.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            \n                            \n                            \n                        \n                    \n                \n                \n                    \n                        :     \n\n                    \n                \n                    \n                        \n                            Default value : require(\"web3-utils\")\n                        \n                    \n\n\n            \n        \n\n    packages/Utils/src/index.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            \n                            \n                            \n                        \n                    \n                \n                \n                    \n                        :     \n\n                    \n                \n                    \n                        \n                            Default value : require(\"web3-utils\")\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            web3\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        web3:     \n\n                    \n                \n                    \n                        \n                            Default value : new Web3()\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            Web3\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        Web3:     \n\n                    \n                \n                    \n                        \n                            Default value : require('web3')\n                        \n                    \n\n\n            \n        \n\n    packages/Dispatch/src/index.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            \n                            \n                            \n                        \n                    \n                \n                \n                    \n                        :     \n\n                    \n                \n                    \n                        \n                            Default value : require (\"web3-utils\")\n                        \n                    \n\n\n            \n        \n\n    packages/Curve/src/index.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            \n                            \n                            \n                        \n                    \n                \n                \n                    \n                        :     \n\n                    \n                \n                    \n                        \n                            Default value : require(\"web3-utils\")\n                        \n                    \n\n\n            \n        \n\n    packages/Utils/src/migrations/contracts/index.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            \n                            \n                            \n                        \n                    \n                \n                \n                    \n                        :     \n\n                    \n                \n                    \n                        \n                            Default value : require(\"path\")\n                        \n                    \n\n\n            \n        \n\n    packages/BaseContract/src/index.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            Web3\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        Web3:     \n\n                    \n                \n                    \n                        \n                            Default value : require('web3')\n                        \n                    \n\n\n            \n        \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
